/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { AvalancheCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope, mcpScopes } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$webhooksAddressesAdd } from "./tools/webhooksAddressesAdd.js";
import { tool$webhooksAddressesList } from "./tools/webhooksAddressesList.js";
import { tool$webhooksAddressesRemove } from "./tools/webhooksAddressesRemove.js";
import { tool$webhooksCreate } from "./tools/webhooksCreate.js";
import { tool$webhooksDeactivate } from "./tools/webhooksDeactivate.js";
import { tool$webhooksGenerateOrRotateSharedSecret } from "./tools/webhooksGenerateOrRotateSharedSecret.js";
import { tool$webhooksGet } from "./tools/webhooksGet.js";
import { tool$webhooksGetSharedSecret } from "./tools/webhooksGetSharedSecret.js";
import { tool$webhooksHealthCheck } from "./tools/webhooksHealthCheck.js";
import { tool$webhooksList } from "./tools/webhooksList.js";
import { tool$webhooksUpdate } from "./tools/webhooksUpdate.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  apiKey?: SDKOptions["apiKey"] | undefined;
  chainId?: SDKOptions["chainId"] | undefined;
  network?: SDKOptions["network"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
}) {
  const server = new McpServer({
    name: "Avalanche",
    version: "0.3.1",
  });

  const client = new AvalancheCore({
    apiKey: deps.apiKey,
    chainId: deps.chainId,
    network: deps.network,
    serverURL: deps.serverURL,
    serverIdx: deps.serverIdx,
  });

  const scopes = new Set(deps.scopes ?? mcpScopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$webhooksHealthCheck);
  tool(tool$webhooksCreate);
  tool(tool$webhooksList);
  tool(tool$webhooksGet);
  tool(tool$webhooksDeactivate);
  tool(tool$webhooksUpdate);
  tool(tool$webhooksGenerateOrRotateSharedSecret);
  tool(tool$webhooksGetSharedSecret);
  tool(tool$webhooksAddressesAdd);
  tool(tool$webhooksAddressesRemove);
  tool(tool$webhooksAddressesList);

  return server;
}
