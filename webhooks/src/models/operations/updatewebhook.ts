/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateWebhookRequest = {
  /**
   * The webhook identifier.
   */
  id: string;
  updateWebhookRequest: components.UpdateWebhookRequest;
};

/**
 * Successful response
 */
export type UpdateWebhookResponse =
  | components.PlatformActivityResponse
  | components.EVMAddressActivityResponse;

/** @internal */
export const UpdateWebhookRequest$inboundSchema: z.ZodType<
  UpdateWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  UpdateWebhookRequest: components.UpdateWebhookRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "UpdateWebhookRequest": "updateWebhookRequest",
  });
});

/** @internal */
export type UpdateWebhookRequest$Outbound = {
  id: string;
  UpdateWebhookRequest: components.UpdateWebhookRequest$Outbound;
};

/** @internal */
export const UpdateWebhookRequest$outboundSchema: z.ZodType<
  UpdateWebhookRequest$Outbound,
  z.ZodTypeDef,
  UpdateWebhookRequest
> = z.object({
  id: z.string(),
  updateWebhookRequest: components.UpdateWebhookRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    updateWebhookRequest: "UpdateWebhookRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookRequest$ {
  /** @deprecated use `UpdateWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookRequest$inboundSchema;
  /** @deprecated use `UpdateWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhookRequest$outboundSchema;
  /** @deprecated use `UpdateWebhookRequest$Outbound` instead. */
  export type Outbound = UpdateWebhookRequest$Outbound;
}

export function updateWebhookRequestToJSON(
  updateWebhookRequest: UpdateWebhookRequest,
): string {
  return JSON.stringify(
    UpdateWebhookRequest$outboundSchema.parse(updateWebhookRequest),
  );
}

export function updateWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookRequest' from JSON`,
  );
}

/** @internal */
export const UpdateWebhookResponse$inboundSchema: z.ZodType<
  UpdateWebhookResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.PlatformActivityResponse$inboundSchema,
  components.EVMAddressActivityResponse$inboundSchema,
]);

/** @internal */
export type UpdateWebhookResponse$Outbound =
  | components.PlatformActivityResponse$Outbound
  | components.EVMAddressActivityResponse$Outbound;

/** @internal */
export const UpdateWebhookResponse$outboundSchema: z.ZodType<
  UpdateWebhookResponse$Outbound,
  z.ZodTypeDef,
  UpdateWebhookResponse
> = z.union([
  components.PlatformActivityResponse$outboundSchema,
  components.EVMAddressActivityResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookResponse$ {
  /** @deprecated use `UpdateWebhookResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookResponse$inboundSchema;
  /** @deprecated use `UpdateWebhookResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhookResponse$outboundSchema;
  /** @deprecated use `UpdateWebhookResponse$Outbound` instead. */
  export type Outbound = UpdateWebhookResponse$Outbound;
}

export function updateWebhookResponseToJSON(
  updateWebhookResponse: UpdateWebhookResponse,
): string {
  return JSON.stringify(
    UpdateWebhookResponse$outboundSchema.parse(updateWebhookResponse),
  );
}

export function updateWebhookResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWebhookResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookResponse' from JSON`,
  );
}
