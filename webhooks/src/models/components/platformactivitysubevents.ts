/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PlatformAddressActivitySubEventType,
  PlatformAddressActivitySubEventType$inboundSchema,
  PlatformAddressActivitySubEventType$outboundSchema,
} from "./platformaddressactivitysubeventtype.js";

export const ValidatorActivitySubEvent = {
  ValidatorStake: "validator_stake",
  DelegatorStake: "delegator_stake",
  RewardDistribution: "reward_distribution",
  L1ValidatorBalanceIncreased: "l1_validator_balance_increased",
  L1ValidatorDisabled: "l1_validator_disabled",
  L1ValidatorRemoved: "l1_validator_removed",
  L1ValidatorBalanceThreshold: "l1_validator_balance_threshold",
} as const;
export type ValidatorActivitySubEvent = ClosedEnum<
  typeof ValidatorActivitySubEvent
>;

export type PlatformActivitySubEvents = {
  /**
   * Array of validator activity sub-event types
   */
  validatorActivitySubEvents?: Array<ValidatorActivitySubEvent> | undefined;
  addressActivitySubEvents?:
    | Array<PlatformAddressActivitySubEventType>
    | undefined;
};

/** @internal */
export const ValidatorActivitySubEvent$inboundSchema: z.ZodNativeEnum<
  typeof ValidatorActivitySubEvent
> = z.nativeEnum(ValidatorActivitySubEvent);

/** @internal */
export const ValidatorActivitySubEvent$outboundSchema: z.ZodNativeEnum<
  typeof ValidatorActivitySubEvent
> = ValidatorActivitySubEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidatorActivitySubEvent$ {
  /** @deprecated use `ValidatorActivitySubEvent$inboundSchema` instead. */
  export const inboundSchema = ValidatorActivitySubEvent$inboundSchema;
  /** @deprecated use `ValidatorActivitySubEvent$outboundSchema` instead. */
  export const outboundSchema = ValidatorActivitySubEvent$outboundSchema;
}

/** @internal */
export const PlatformActivitySubEvents$inboundSchema: z.ZodType<
  PlatformActivitySubEvents,
  z.ZodTypeDef,
  unknown
> = z.object({
  validatorActivitySubEvents: z.array(ValidatorActivitySubEvent$inboundSchema)
    .optional(),
  addressActivitySubEvents: z.array(
    PlatformAddressActivitySubEventType$inboundSchema,
  ).optional(),
});

/** @internal */
export type PlatformActivitySubEvents$Outbound = {
  validatorActivitySubEvents?: Array<string> | undefined;
  addressActivitySubEvents?: Array<string> | undefined;
};

/** @internal */
export const PlatformActivitySubEvents$outboundSchema: z.ZodType<
  PlatformActivitySubEvents$Outbound,
  z.ZodTypeDef,
  PlatformActivitySubEvents
> = z.object({
  validatorActivitySubEvents: z.array(ValidatorActivitySubEvent$outboundSchema)
    .optional(),
  addressActivitySubEvents: z.array(
    PlatformAddressActivitySubEventType$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlatformActivitySubEvents$ {
  /** @deprecated use `PlatformActivitySubEvents$inboundSchema` instead. */
  export const inboundSchema = PlatformActivitySubEvents$inboundSchema;
  /** @deprecated use `PlatformActivitySubEvents$outboundSchema` instead. */
  export const outboundSchema = PlatformActivitySubEvents$outboundSchema;
  /** @deprecated use `PlatformActivitySubEvents$Outbound` instead. */
  export type Outbound = PlatformActivitySubEvents$Outbound;
}

export function platformActivitySubEventsToJSON(
  platformActivitySubEvents: PlatformActivitySubEvents,
): string {
  return JSON.stringify(
    PlatformActivitySubEvents$outboundSchema.parse(platformActivitySubEvents),
  );
}

export function platformActivitySubEventsFromJSON(
  jsonString: string,
): SafeParseResult<PlatformActivitySubEvents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlatformActivitySubEvents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlatformActivitySubEvents' from JSON`,
  );
}
