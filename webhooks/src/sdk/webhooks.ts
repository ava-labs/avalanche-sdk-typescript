/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksAddAddressesToWebhook } from "../funcs/webhooksAddAddressesToWebhook.js";
import { webhooksCreateWebhook } from "../funcs/webhooksCreateWebhook.js";
import { webhooksDeactivateWebhook } from "../funcs/webhooksDeactivateWebhook.js";
import { webhooksGenerateOrRotateSharedSecret } from "../funcs/webhooksGenerateOrRotateSharedSecret.js";
import { webhooksGetAddressesFromWebhook } from "../funcs/webhooksGetAddressesFromWebhook.js";
import { webhooksGetSharedSecret } from "../funcs/webhooksGetSharedSecret.js";
import { webhooksGetWebhook } from "../funcs/webhooksGetWebhook.js";
import { webhooksHealthCheck } from "../funcs/webhooksHealthCheck.js";
import { webhooksListWebhooks } from "../funcs/webhooksListWebhooks.js";
import { webhooksRemoveAddressesFromWebhook } from "../funcs/webhooksRemoveAddressesFromWebhook.js";
import { webhooksUpdateWebhook } from "../funcs/webhooksUpdateWebhook.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Webhooks extends ClientSDK {
  /**
   * Get the health of the service
   *
   * @remarks
   * Check the health of the service.
   */
  async healthCheck(
    options?: RequestOptions,
  ): Promise<components.HealthCheckResultDto> {
    return unwrapAsync(webhooksHealthCheck(
      this,
      options,
    ));
  }

  /**
   * Create a webhook
   *
   * @remarks
   * Create a new webhook.
   */
  async createWebhook(
    request: operations.CreateWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateWebhookResponse> {
    return unwrapAsync(webhooksCreateWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * List webhooks
   *
   * @remarks
   * Lists webhooks for the user.
   */
  async listWebhooks(
    request: operations.ListWebhooksRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.ListWebhooksResponse, { cursor: string }>
  > {
    return unwrapResultIterator(webhooksListWebhooks(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a webhook by ID
   *
   * @remarks
   * Retrieves a webhook by ID.
   */
  async getWebhook(
    request: operations.GetWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.GetWebhookResponse> {
    return unwrapAsync(webhooksGetWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Deactivate a webhook
   *
   * @remarks
   * Deactivates a webhook by ID.
   */
  async deactivateWebhook(
    request: operations.DeactivateWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.DeactivateWebhookResponse> {
    return unwrapAsync(webhooksDeactivateWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a webhook
   *
   * @remarks
   * Updates an existing webhook.
   */
  async updateWebhook(
    request: operations.UpdateWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateWebhookResponse> {
    return unwrapAsync(webhooksUpdateWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate or rotate a shared secret
   *
   * @remarks
   * Generates a new shared secret or rotate an existing one.
   */
  async generateOrRotateSharedSecret(
    options?: RequestOptions,
  ): Promise<components.SharedSecretsResponse> {
    return unwrapAsync(webhooksGenerateOrRotateSharedSecret(
      this,
      options,
    ));
  }

  /**
   * Get a shared secret
   *
   * @remarks
   * Get a previously generated shared secret.
   */
  async getSharedSecret(
    options?: RequestOptions,
  ): Promise<components.SharedSecretsResponse> {
    return unwrapAsync(webhooksGetSharedSecret(
      this,
      options,
    ));
  }

  /**
   * Add addresses to EVM activity webhook
   *
   * @remarks
   * Add addresses to webhook. Only valid for EVM activity webhooks.
   */
  async addAddressesToWebhook(
    request: operations.AddAddressesToWebhookRequest,
    options?: RequestOptions,
  ): Promise<components.EVMAddressActivityResponse> {
    return unwrapAsync(webhooksAddAddressesToWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove addresses from EVM activity  webhook
   *
   * @remarks
   * Remove addresses from webhook. Only valid for EVM activity webhooks.
   */
  async removeAddressesFromWebhook(
    request: operations.RemoveAddressesFromWebhookRequest,
    options?: RequestOptions,
  ): Promise<components.EVMAddressActivityResponse> {
    return unwrapAsync(webhooksRemoveAddressesFromWebhook(
      this,
      request,
      options,
    ));
  }

  /**
   * List adresses by EVM activity webhooks
   *
   * @remarks
   * List adresses by webhook. Only valid for EVM activity webhooks.
   */
  async getAddressesFromWebhook(
    request: operations.GetAddressesFromWebhookRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAddressesFromWebhookResponse, { cursor: string }>
  > {
    return unwrapResultIterator(webhooksGetAddressesFromWebhook(
      this,
      request,
      options,
    ));
  }
}
