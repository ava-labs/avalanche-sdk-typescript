lockVersion: 2.0.0
id: 125b8491-d8a2-4e4f-ad7e-83badf249c68
management:
  docChecksum: 105b77e106244f83afb4785e38b03147
  docVersion: Beta
  speakeasyVersion: 1.529.1
  generationVersion: 2.566.5
  releaseVersion: 0.0.3
  configChecksum: 97b27648c45e86605feef31f71cc1ca7
  repoURL: https://github.com/ava-labs/avalanche-sdk-typescript.git
  repoSubDirectory: devtools
  installationURL: https://gitpkg.now.sh/ava-labs/avalanche-sdk-typescript/devtools
  published: true
features:
  typescript:
    additionalDependencies: 0.1.0
    constsAndDefaults: 0.1.11
    core: 3.21.5
    defaultEnabledRetries: 0.1.0
    deprecations: 2.81.1
    devContainers: 2.90.0
    enumUnions: 0.1.0
    envVarSecurityUsage: 0.1.2
    examples: 2.81.5
    globalSecurity: 2.82.13
    globalSecurityCallbacks: 0.1.0
    globalSecurityFlattening: 0.1.0
    globalServerURLs: 2.82.4
    globals: 2.82.2
    groups: 2.81.2
    ignores: 2.81.1
    mcpServer: 0.9.0
    methodServerURLs: 2.82.1
    nameOverrides: 2.81.2
    nullables: 0.1.1
    pagination: 2.83.0
    responseFormat: 0.2.3
    retries: 2.83.0
    sdkHooks: 0.2.0
    unions: 2.85.8
    webhooks: 1.5.0
generatedFiles:
  - .devcontainer/README.md
  - .devcontainer/devcontainer.json
  - .devcontainer/setup.sh
  - .gitattributes
  - .npmignore
  - FUNCTIONS.md
  - RUNTIMES.md
  - USAGE.md
  - docs/lib/utils/retryconfig.md
  - docs/models/components/accesslistdata.md
  - docs/models/components/activedelegatordetails.md
  - docs/models/components/activedelegatordetailsdelegationstatus.md
  - docs/models/components/activevalidatordetails.md
  - docs/models/components/activevalidatordetailsvalidationstatus.md
  - docs/models/components/addressactivitymetadata.md
  - docs/models/components/addressdetails.md
  - docs/models/components/addresseschangerequest.md
  - docs/models/components/aggregatedassetamount.md
  - docs/models/components/alltimeerc20balancequerydto.md
  - docs/models/components/alltimeerc20balancequerydtotype.md
  - docs/models/components/alltimenativebalancequerydto.md
  - docs/models/components/alltimenativebalancequerydtotype.md
  - docs/models/components/alltimenftholdersquerydto.md
  - docs/models/components/alltimenftholdersquerydtoparams.md
  - docs/models/components/alltimenftholdersquerydtotype.md
  - docs/models/components/alltimestarsarenabalancequerydto.md
  - docs/models/components/alltimestarsarenabalancequerydtotype.md
  - docs/models/components/anytimeerc20balancequerydto.md
  - docs/models/components/anytimeerc20balancequerydtotype.md
  - docs/models/components/anytimenativebalancequerydto.md
  - docs/models/components/anytimenativebalancequerydtotype.md
  - docs/models/components/anytimenftholdersquerydto.md
  - docs/models/components/anytimenftholdersquerydtoparams.md
  - docs/models/components/anytimenftholdersquerydtotype.md
  - docs/models/components/anytimestarsarenabalancequerydto.md
  - docs/models/components/anytimestarsarenabalancequerydtotype.md
  - docs/models/components/apifeature.md
  - docs/models/components/assetamount.md
  - docs/models/components/assetwithpriceinfo.md
  - docs/models/components/balanceowner.md
  - docs/models/components/blockchain.md
  - docs/models/components/blockchainid.md
  - docs/models/components/blockchainids.md
  - docs/models/components/blscredentials.md
  - docs/models/components/cchainatomicbalances.md
  - docs/models/components/cchainexporttransaction.md
  - docs/models/components/cchainexporttransactiontxtype.md
  - docs/models/components/cchainimporttransaction.md
  - docs/models/components/cchainimporttransactiontxtype.md
  - docs/models/components/cchainsharedassetbalance.md
  - docs/models/components/chain.md
  - docs/models/components/chainaddresschainidmap.md
  - docs/models/components/chainaddresschainidmaplistresponse.md
  - docs/models/components/chaininfo.md
  - docs/models/components/chaininfoenabledfeature.md
  - docs/models/components/chainmetric.md
  - docs/models/components/chainrollingwindowmetric.md
  - docs/models/components/chainrollingwindowmetricsvalue.md
  - docs/models/components/chainstatus.md
  - docs/models/components/collectiblebalance.md
  - docs/models/components/commonbalancetype.md
  - docs/models/components/completeddelegatordetails.md
  - docs/models/components/completeddelegatordetailsdelegationstatus.md
  - docs/models/components/completedvalidatordetails.md
  - docs/models/components/completedvalidatordetailsvalidationstatus.md
  - docs/models/components/compositequeryrequestdto.md
  - docs/models/components/compositequeryresponse.md
  - docs/models/components/contract.md
  - docs/models/components/contractdeploymentdetails.md
  - docs/models/components/createevmtransactionexportrequest.md
  - docs/models/components/createprimarynetworktransactionexportrequest.md
  - docs/models/components/currencycode.md
  - docs/models/components/datalistchainsresponse.md
  - docs/models/components/daterangeerc20minbalanceparam.md
  - docs/models/components/daterangeminbalanceparam.md
  - docs/models/components/daterangenftholdersparam.md
  - docs/models/components/daterangestarsarenaminbalanceparam.md
  - docs/models/components/delegationstatustype.md
  - docs/models/components/delegator.md
  - docs/models/components/delegatorsdetails.md
  - docs/models/components/deliveredicmmessage.md
  - docs/models/components/deliveredicmmessagestatus.md
  - docs/models/components/deliveredsourcenotindexedicmmessage.md
  - docs/models/components/deliveredsourcenotindexedicmmessagestatus.md
  - docs/models/components/deliveredsourcenotindexedteleportermessage.md
  - docs/models/components/deliveredsourcenotindexedteleportermessagestatus.md
  - docs/models/components/deliveredteleportermessage.md
  - docs/models/components/deliveredteleportermessagestatus.md
  - docs/models/components/destinationchainid.md
  - docs/models/components/erc1155contract.md
  - docs/models/components/erc1155contracterctype.md
  - docs/models/components/erc1155token.md
  - docs/models/components/erc1155tokenbalance.md
  - docs/models/components/erc1155tokenbalanceerctype.md
  - docs/models/components/erc1155tokenerctype.md
  - docs/models/components/erc1155tokenmetadata.md
  - docs/models/components/erc1155transfer.md
  - docs/models/components/erc1155transferdetails.md
  - docs/models/components/erc20contract.md
  - docs/models/components/erc20contracterctype.md
  - docs/models/components/erc20token.md
  - docs/models/components/erc20tokenbalance.md
  - docs/models/components/erc20tokenbalanceerctype.md
  - docs/models/components/erc20tokenerctype.md
  - docs/models/components/erc20transfer.md
  - docs/models/components/erc20transferdetails.md
  - docs/models/components/erc721contract.md
  - docs/models/components/erc721contracterctype.md
  - docs/models/components/erc721token.md
  - docs/models/components/erc721tokenbalance.md
  - docs/models/components/erc721tokenbalanceerctype.md
  - docs/models/components/erc721tokenerctype.md
  - docs/models/components/erc721tokenmetadata.md
  - docs/models/components/erc721transfer.md
  - docs/models/components/erc721transferdetails.md
  - docs/models/components/erctoken.md
  - docs/models/components/erctransfer.md
  - docs/models/components/eventtype.md
  - docs/models/components/evmaddressactivityrequest.md
  - docs/models/components/evmaddressactivityrequesteventtype.md
  - docs/models/components/evmaddressactivityrequestmetadata.md
  - docs/models/components/evmaddressactivityresponse.md
  - docs/models/components/evmaddressactivityresponsemetadata.md
  - docs/models/components/evmblock.md
  - docs/models/components/evminput.md
  - docs/models/components/evmnetworkoptions.md
  - docs/models/components/evmoperationtype.md
  - docs/models/components/evmoutput.md
  - docs/models/components/fullnativetransactiondetails.md
  - docs/models/components/geolocation.md
  - docs/models/components/getchainresponse.md
  - docs/models/components/getchainresponseenabledfeature.md
  - docs/models/components/getevmblockresponse.md
  - docs/models/components/getnativebalanceresponse.md
  - docs/models/components/getnetworkdetailsresponse.md
  - docs/models/components/getprimarynetworkblockresponse.md
  - docs/models/components/gettransactionresponse.md
  - docs/models/components/globalparamnetwork.md
  - docs/models/components/healthcheckresultdto.md
  - docs/models/components/healthcheckresultdtostatus.md
  - docs/models/components/healthindicatorresultdto.md
  - docs/models/components/healthindicatorresultdtostatus.md
  - docs/models/components/historicalreward.md
  - docs/models/components/icmdestinationtransaction.md
  - docs/models/components/icmreceipt.md
  - docs/models/components/icmrewarddetails.md
  - docs/models/components/icmrewarddetailserctype.md
  - docs/models/components/icmsourcetransaction.md
  - docs/models/components/imageasset.md
  - docs/models/components/includechain.md
  - docs/models/components/internaltransaction.md
  - docs/models/components/internaltransactiondetails.md
  - docs/models/components/internaltransactionopcall.md
  - docs/models/components/l1validatordetailsfull.md
  - docs/models/components/l1validatordetailsfullblscredentials.md
  - docs/models/components/l1validatordetailstransaction.md
  - docs/models/components/l1validatordetailstransactionblscredentials.md
  - docs/models/components/l1validatormanagerdetails.md
  - docs/models/components/latestbalanceparams.md
  - docs/models/components/latestbalancequerydto.md
  - docs/models/components/latestbalancequerydtotype.md
  - docs/models/components/lateststarsarenabalanceparams.md
  - docs/models/components/lateststarsarenabalancequerydto.md
  - docs/models/components/lateststarsarenabalancequerydtotype.md
  - docs/models/components/listaddresschainsresponse.md
  - docs/models/components/listblockchainsresponse.md
  - docs/models/components/listcchainatomicbalancesresponse.md
  - docs/models/components/listcchainatomictransactionsresponse.md
  - docs/models/components/listcchainatomictransactionsresponsetransaction.md
  - docs/models/components/listcollectiblebalancesresponse.md
  - docs/models/components/listcontractsresponse.md
  - docs/models/components/listdelegatordetailsresponse.md
  - docs/models/components/listerc1155balancesresponse.md
  - docs/models/components/listerc1155transactionsresponse.md
  - docs/models/components/listerc20balancesresponse.md
  - docs/models/components/listerc20transactionsresponse.md
  - docs/models/components/listerc721balancesresponse.md
  - docs/models/components/listerc721transactionsresponse.md
  - docs/models/components/listevmblocksresponse.md
  - docs/models/components/listhistoricalrewardsresponse.md
  - docs/models/components/listicmmessagesresponse.md
  - docs/models/components/listicmmessagesresponsemessage.md
  - docs/models/components/listinternaltransactionsresponse.md
  - docs/models/components/listl1validatorsresponse.md
  - docs/models/components/listnativetransactionsresponse.md
  - docs/models/components/listnfttokens.md
  - docs/models/components/listpchainbalancesresponse.md
  - docs/models/components/listpchaintransactionsresponse.md
  - docs/models/components/listpchainutxosresponse.md
  - docs/models/components/listpendingrewardsresponse.md
  - docs/models/components/listprimarynetworkblocksresponse.md
  - docs/models/components/listsubnetsresponse.md
  - docs/models/components/listteleportermessagesresponse.md
  - docs/models/components/listteleportermessagesresponsemessage.md
  - docs/models/components/listtransactiondetailsresponse.md
  - docs/models/components/listtransfersresponse.md
  - docs/models/components/listutxosresponse.md
  - docs/models/components/listvalidatordetailsresponse.md
  - docs/models/components/listwebhookaddressesresponse.md
  - docs/models/components/listwebhooksresponse.md
  - docs/models/components/listxchainbalancesresponse.md
  - docs/models/components/listxchaintransactionsresponse.md
  - docs/models/components/listxchaintransactionsresponsetransaction.md
  - docs/models/components/listxchainverticesresponse.md
  - docs/models/components/log.md
  - docs/models/components/logsformat.md
  - docs/models/components/logsformatmetadata.md
  - docs/models/components/logsresponsedto.md
  - docs/models/components/lookingglassresponse.md
  - docs/models/components/method.md
  - docs/models/components/metric.md
  - docs/models/components/metricsapiresponse.md
  - docs/models/components/metricslistchainsresponse.md
  - docs/models/components/metricsvalue.md
  - docs/models/components/money.md
  - docs/models/components/nativetokenbalance.md
  - docs/models/components/nativetransaction.md
  - docs/models/components/network.md
  - docs/models/components/networkmetric.md
  - docs/models/components/networktoken.md
  - docs/models/components/networktokendetails.md
  - docs/models/components/networktokeninfo.md
  - docs/models/components/networktype.md
  - docs/models/components/nftholdersresponse.md
  - docs/models/components/nfttokenmetadatastatus.md
  - docs/models/components/operationstatus.md
  - docs/models/components/operationstatuscode.md
  - docs/models/components/operationstatusresponse.md
  - docs/models/components/operationstatusresponsemetadata.md
  - docs/models/components/operationtype.md
  - docs/models/components/operator.md
  - docs/models/components/pchainaddressdetails.md
  - docs/models/components/pchainbalance.md
  - docs/models/components/pchainid.md
  - docs/models/components/pchainlookingglassresponse.md
  - docs/models/components/pchainsharedasset.md
  - docs/models/components/pchaintransaction.md
  - docs/models/components/pchaintransactiontype.md
  - docs/models/components/pchainutxo.md
  - docs/models/components/pendingdelegatordetails.md
  - docs/models/components/pendingdelegatordetailsdelegationstatus.md
  - docs/models/components/pendingicmmessage.md
  - docs/models/components/pendingicmmessagestatus.md
  - docs/models/components/pendingreward.md
  - docs/models/components/pendingteleportermessage.md
  - docs/models/components/pendingteleportermessagestatus.md
  - docs/models/components/pendingvalidatordetails.md
  - docs/models/components/pendingvalidatordetailsvalidationstatus.md
  - docs/models/components/platformactivitykeytype.md
  - docs/models/components/platformactivitymetadata.md
  - docs/models/components/platformactivityrequest.md
  - docs/models/components/platformactivityrequesteventtype.md
  - docs/models/components/platformactivityrequestmetadata.md
  - docs/models/components/platformactivityresponse.md
  - docs/models/components/platformactivityresponsemetadata.md
  - docs/models/components/platformactivitysubevents.md
  - docs/models/components/platformaddressactivitysubeventtype.md
  - docs/models/components/platformbalancethresholdfilter.md
  - docs/models/components/pricingproviders.md
  - docs/models/components/primarynetworkassetcap.md
  - docs/models/components/primarynetworkassettype.md
  - docs/models/components/primarynetworkblock.md
  - docs/models/components/primarynetworkchaininfo.md
  - docs/models/components/primarynetworkchainname.md
  - docs/models/components/primarynetworkoperationtype.md
  - docs/models/components/primarynetworkoptions.md
  - docs/models/components/primarynetworktxtype.md
  - docs/models/components/primarynetworktype.md
  - docs/models/components/proposerdetails.md
  - docs/models/components/query.md
  - docs/models/components/removedvalidatordetails.md
  - docs/models/components/removedvalidatordetailsvalidationstatus.md
  - docs/models/components/requesttype.md
  - docs/models/components/resourcelink.md
  - docs/models/components/resourcelinktype.md
  - docs/models/components/rewards.md
  - docs/models/components/rewardtype.md
  - docs/models/components/richaddress.md
  - docs/models/components/rollingwindowmetricsapiresponse.md
  - docs/models/components/rpcmetrics.md
  - docs/models/components/rpcusagemetricsgroupbyenum.md
  - docs/models/components/rpcusagemetricsvalueaggregated.md
  - docs/models/components/rpcusagemetricsvalueaggregatedgroupedby.md
  - docs/models/components/rpcusagemetricsvalueaggregatedgroupvalue.md
  - docs/models/components/security.md
  - docs/models/components/sharedsecretsresponse.md
  - docs/models/components/signatureaggregationresponse.md
  - docs/models/components/signatureaggregatorrequest.md
  - docs/models/components/sortbyoption.md
  - docs/models/components/sortorder.md
  - docs/models/components/sourcechainid.md
  - docs/models/components/stakingdistribution.md
  - docs/models/components/subnet.md
  - docs/models/components/subnetownershipinfo.md
  - docs/models/components/subnetrpctimeintervalgranularity.md
  - docs/models/components/subnetrpcusagemetricsresponsedto.md
  - docs/models/components/teleporterchainmetricsapiresponse.md
  - docs/models/components/teleporterdestinationtransaction.md
  - docs/models/components/teleportermessageinfo.md
  - docs/models/components/teleportermetric.md
  - docs/models/components/teleportermetricsvalue.md
  - docs/models/components/teleporterreceipt.md
  - docs/models/components/teleporterrewarddetails.md
  - docs/models/components/teleporterrewarddetailserctype.md
  - docs/models/components/teleportersourcetransaction.md
  - docs/models/components/timeintervalgranularity.md
  - docs/models/components/timeintervalgranularityextended.md
  - docs/models/components/timestamprangenftholdersparam.md
  - docs/models/components/token.md
  - docs/models/components/tokenreputation.md
  - docs/models/components/tokentype.md
  - docs/models/components/transaction.md
  - docs/models/components/transactiondetails.md
  - docs/models/components/transactiondirectiontype.md
  - docs/models/components/transactionevent.md
  - docs/models/components/transactionexportmetadata.md
  - docs/models/components/transactionmethodtype.md
  - docs/models/components/transactionstatus.md
  - docs/models/components/transactionvertexdetail.md
  - docs/models/components/transfer.md
  - docs/models/components/unknowncontract.md
  - docs/models/components/unknowncontracterctype.md
  - docs/models/components/updatewebhookrequest.md
  - docs/models/components/usagemetricsgroupbyenum.md
  - docs/models/components/usagemetricsresponsedto.md
  - docs/models/components/usagemetricsvaluedto.md
  - docs/models/components/usagemetricsvaluedtogroupedby.md
  - docs/models/components/usagemetricsvaluedtogroupvalue.md
  - docs/models/components/utilityaddresses.md
  - docs/models/components/utxo.md
  - docs/models/components/utxocredential.md
  - docs/models/components/utxotype.md
  - docs/models/components/validationstatustype.md
  - docs/models/components/validator.md
  - docs/models/components/validatoractivitysubevent.md
  - docs/models/components/validatorhealthdetails.md
  - docs/models/components/validatorsdetails.md
  - docs/models/components/vmname.md
  - docs/models/components/webhook.md
  - docs/models/components/webhookaddressactivityresponse.md
  - docs/models/components/webhookaddressactivityresponseeventtype.md
  - docs/models/components/webhookstatus.md
  - docs/models/components/webhookstatustype.md
  - docs/models/components/xchainassetdetails.md
  - docs/models/components/xchainbalances.md
  - docs/models/components/xchainid.md
  - docs/models/components/xchainlineartransaction.md
  - docs/models/components/xchainlineartransactionchainformat.md
  - docs/models/components/xchainnonlineartransaction.md
  - docs/models/components/xchainnonlineartransactionchainformat.md
  - docs/models/components/xchainsharedassetbalance.md
  - docs/models/components/xchaintransactiontype.md
  - docs/models/components/xchainvertex.md
  - docs/models/errors/badgatewayerror.md
  - docs/models/errors/badgatewaymessage.md
  - docs/models/errors/badrequesterror.md
  - docs/models/errors/badrequestmessage.md
  - docs/models/errors/forbiddenerror.md
  - docs/models/errors/forbiddenmessage.md
  - docs/models/errors/internalservererror.md
  - docs/models/errors/internalservererrormessage.md
  - docs/models/errors/notfounderror.md
  - docs/models/errors/notfoundmessage.md
  - docs/models/errors/serviceunavailableerror.md
  - docs/models/errors/serviceunavailablemessage.md
  - docs/models/errors/toomanyrequestserror.md
  - docs/models/errors/toomanyrequestsmessage.md
  - docs/models/errors/unauthorizederror.md
  - docs/models/errors/unauthorizedmessage.md
  - docs/models/operations/addaddressestowebhookrequest.md
  - docs/models/operations/aggregatesignaturesglobals.md
  - docs/models/operations/aggregatesignaturesrequest.md
  - docs/models/operations/compositequeryv2response.md
  - docs/models/operations/createwebhookrequest.md
  - docs/models/operations/createwebhookresponse.md
  - docs/models/operations/deactivatewebhookrequest.md
  - docs/models/operations/deactivatewebhookresponse.md
  - docs/models/operations/getaddresschainsrequest.md
  - docs/models/operations/getaddressesbybalanceovertimeglobals.md
  - docs/models/operations/getaddressesbybalanceovertimerequest.md
  - docs/models/operations/getaddressesbybalanceovertimeresponse.md
  - docs/models/operations/getaddressesbybtcbbridgedrequest.md
  - docs/models/operations/getaddressesbybtcbbridgedresponse.md
  - docs/models/operations/getaddressesfromwebhookrequest.md
  - docs/models/operations/getaddressesfromwebhookresponse.md
  - docs/models/operations/getaggregatedsignaturesglobals.md
  - docs/models/operations/getaggregatedsignaturesrequest.md
  - docs/models/operations/getapilogsrequest.md
  - docs/models/operations/getapilogsrequesttype.md
  - docs/models/operations/getapilogsresponse.md
  - docs/models/operations/getapiusagemetricsrequest.md
  - docs/models/operations/getapiusagemetricsrequesttype.md
  - docs/models/operations/getassetdetailsglobals.md
  - docs/models/operations/getassetdetailsrequest.md
  - docs/models/operations/getbalancesbyaddressesglobals.md
  - docs/models/operations/getbalancesbyaddressesrequest.md
  - docs/models/operations/getbalancesbyaddressesresponse.md
  - docs/models/operations/getblockbyidglobals.md
  - docs/models/operations/getblockbyidrequest.md
  - docs/models/operations/getblockchainbyidglobals.md
  - docs/models/operations/getblockchainbyidrequest.md
  - docs/models/operations/getblockglobals.md
  - docs/models/operations/getblockrequest.md
  - docs/models/operations/getchainglobals.md
  - docs/models/operations/getchainidsforaddressesglobals.md
  - docs/models/operations/getchainidsforaddressesrequest.md
  - docs/models/operations/getchaininfoglobals.md
  - docs/models/operations/getchaininforequest.md
  - docs/models/operations/getchainrequest.md
  - docs/models/operations/getcontractmetadataglobals.md
  - docs/models/operations/getcontractmetadatarequest.md
  - docs/models/operations/getcontractmetadataresponse.md
  - docs/models/operations/getdeploymenttransactionglobals.md
  - docs/models/operations/getdeploymenttransactionrequest.md
  - docs/models/operations/getevmchainmetricsglobals.md
  - docs/models/operations/getevmchainmetricsrequest.md
  - docs/models/operations/getevmchainmetricsresponse.md
  - docs/models/operations/getevmchainrollingwindowmetricsglobals.md
  - docs/models/operations/getevmchainrollingwindowmetricsrequest.md
  - docs/models/operations/geticmmessagerequest.md
  - docs/models/operations/geticmmessageresponse.md
  - docs/models/operations/getlatestblocksglobals.md
  - docs/models/operations/getlatestblocksrequest.md
  - docs/models/operations/getlatestblocksresponse.md
  - docs/models/operations/getnativebalanceglobals.md
  - docs/models/operations/getnativebalancerequest.md
  - docs/models/operations/getnetworkdetailsglobals.md
  - docs/models/operations/getnetworkdetailsrequest.md
  - docs/models/operations/getnftholdersbycontractaddressglobals.md
  - docs/models/operations/getnftholdersbycontractaddressrequest.md
  - docs/models/operations/getnftholdersbycontractaddressresponse.md
  - docs/models/operations/getoperationresultrequest.md
  - docs/models/operations/getrpcusagemetricsrequest.md
  - docs/models/operations/getsinglevalidatordetailsglobals.md
  - docs/models/operations/getsinglevalidatordetailsrequest.md
  - docs/models/operations/getsinglevalidatordetailsresponse.md
  - docs/models/operations/getstakingmetricsglobals.md
  - docs/models/operations/getstakingmetricsrequest.md
  - docs/models/operations/getstakingmetricsresponse.md
  - docs/models/operations/getsubnetbyidglobals.md
  - docs/models/operations/getsubnetbyidrequest.md
  - docs/models/operations/getsubnetrpcusagemetricsrequest.md
  - docs/models/operations/getteleportermessagerequest.md
  - docs/models/operations/getteleportermessageresponse.md
  - docs/models/operations/getteleportermetricsbychainglobals.md
  - docs/models/operations/getteleportermetricsbychainrequest.md
  - docs/models/operations/gettokendetailsglobals.md
  - docs/models/operations/gettokendetailsrequest.md
  - docs/models/operations/gettokendetailsresponse.md
  - docs/models/operations/gettransactionglobals.md
  - docs/models/operations/gettransactionrequest.md
  - docs/models/operations/gettransactionsforblockglobals.md
  - docs/models/operations/gettransactionsforblockrequest.md
  - docs/models/operations/gettxbyhashglobals.md
  - docs/models/operations/gettxbyhashrequest.md
  - docs/models/operations/gettxbyhashresponse.md
  - docs/models/operations/getutxosbyaddressesglobals.md
  - docs/models/operations/getutxosbyaddressesrequest.md
  - docs/models/operations/getutxosbyaddressesresponse.md
  - docs/models/operations/getutxosbyaddressesresponsebody.md
  - docs/models/operations/getvalidatorsbydaterangerequest.md
  - docs/models/operations/getvalidatorsbydaterangeresponse.md
  - docs/models/operations/getvertexbyhashglobals.md
  - docs/models/operations/getvertexbyhashrequest.md
  - docs/models/operations/getvertexbyheightglobals.md
  - docs/models/operations/getvertexbyheightrequest.md
  - docs/models/operations/getvertexbyheightresponse.md
  - docs/models/operations/getwebhookrequest.md
  - docs/models/operations/getwebhookresponse.md
  - docs/models/operations/listactiveprimarynetworkstakingtransactionsglobals.md
  - docs/models/operations/listactiveprimarynetworkstakingtransactionsrequest.md
  - docs/models/operations/listactiveprimarynetworkstakingtransactionsresponse.md
  - docs/models/operations/listaddresschainsrequest.md
  - docs/models/operations/listalllatestblocksrequest.md
  - docs/models/operations/listalllatestblocksresponse.md
  - docs/models/operations/listalllatesttransactionsrequest.md
  - docs/models/operations/listalllatesttransactionsresponse.md
  - docs/models/operations/listassettransactionsglobals.md
  - docs/models/operations/listassettransactionsrequest.md
  - docs/models/operations/listassettransactionsresponse.md
  - docs/models/operations/listblockchainsglobals.md
  - docs/models/operations/listblockchainsrequest.md
  - docs/models/operations/listblockchainsresponse.md
  - docs/models/operations/listchainsrequest.md
  - docs/models/operations/listchainsresponse.md
  - docs/models/operations/listcollectiblebalancesglobals.md
  - docs/models/operations/listcollectiblebalancesrequest.md
  - docs/models/operations/listcollectiblebalancesresponse.md
  - docs/models/operations/listcontractdeploymentsglobals.md
  - docs/models/operations/listcontractdeploymentsrequest.md
  - docs/models/operations/listcontractdeploymentsresponse.md
  - docs/models/operations/listdelegatorsglobals.md
  - docs/models/operations/listdelegatorsrequest.md
  - docs/models/operations/listdelegatorsresponse.md
  - docs/models/operations/listerc1155balancesglobals.md
  - docs/models/operations/listerc1155balancesrequest.md
  - docs/models/operations/listerc1155balancesresponse.md
  - docs/models/operations/listerc1155transactionsglobals.md
  - docs/models/operations/listerc1155transactionsrequest.md
  - docs/models/operations/listerc1155transactionsresponse.md
  - docs/models/operations/listerc20balancesglobals.md
  - docs/models/operations/listerc20balancesrequest.md
  - docs/models/operations/listerc20balancesresponse.md
  - docs/models/operations/listerc20transactionsglobals.md
  - docs/models/operations/listerc20transactionsrequest.md
  - docs/models/operations/listerc20transactionsresponse.md
  - docs/models/operations/listerc721balancesglobals.md
  - docs/models/operations/listerc721balancesrequest.md
  - docs/models/operations/listerc721balancesresponse.md
  - docs/models/operations/listerc721transactionsglobals.md
  - docs/models/operations/listerc721transactionsrequest.md
  - docs/models/operations/listerc721transactionsresponse.md
  - docs/models/operations/listhistoricalprimarynetworkrewardsglobals.md
  - docs/models/operations/listhistoricalprimarynetworkrewardsrequest.md
  - docs/models/operations/listhistoricalprimarynetworkrewardsresponse.md
  - docs/models/operations/listicmmessagesbyaddressrequest.md
  - docs/models/operations/listicmmessagesrequest.md
  - docs/models/operations/listicmmessagesresponse.md
  - docs/models/operations/listinternaltransactionsglobals.md
  - docs/models/operations/listinternaltransactionsrequest.md
  - docs/models/operations/listinternaltransactionsresponse.md
  - docs/models/operations/listl1validatorsglobals.md
  - docs/models/operations/listl1validatorsrequest.md
  - docs/models/operations/listl1validatorsresponse.md
  - docs/models/operations/listlatestblocksallchainsrequest.md
  - docs/models/operations/listlatestblocksallchainsresponse.md
  - docs/models/operations/listlatestprimarynetworkblocksglobals.md
  - docs/models/operations/listlatestprimarynetworkblocksrequest.md
  - docs/models/operations/listlatestprimarynetworkblocksresponse.md
  - docs/models/operations/listlatestprimarynetworktransactionsglobals.md
  - docs/models/operations/listlatestprimarynetworktransactionsrequest.md
  - docs/models/operations/listlatestprimarynetworktransactionsresponse.md
  - docs/models/operations/listlatestprimarynetworktransactionsresponsebody.md
  - docs/models/operations/listlatesttransactionsallchainsrequest.md
  - docs/models/operations/listlatesttransactionsallchainsresponse.md
  - docs/models/operations/listlatesttransactionsglobals.md
  - docs/models/operations/listlatesttransactionsrequest.md
  - docs/models/operations/listlatesttransactionsresponse.md
  - docs/models/operations/listlatestxchainverticesglobals.md
  - docs/models/operations/listlatestxchainverticesrequest.md
  - docs/models/operations/listlatestxchainverticesresponse.md
  - docs/models/operations/listnativetransactionsglobals.md
  - docs/models/operations/listnativetransactionsrequest.md
  - docs/models/operations/listnativetransactionsresponse.md
  - docs/models/operations/listpendingprimarynetworkrewardsglobals.md
  - docs/models/operations/listpendingprimarynetworkrewardsrequest.md
  - docs/models/operations/listpendingprimarynetworkrewardsresponse.md
  - docs/models/operations/listprimarynetworkblocksbynodeidglobals.md
  - docs/models/operations/listprimarynetworkblocksbynodeidrequest.md
  - docs/models/operations/listprimarynetworkblocksbynodeidresponse.md
  - docs/models/operations/listsubnetsglobals.md
  - docs/models/operations/listsubnetsrequest.md
  - docs/models/operations/listsubnetsresponse.md
  - docs/models/operations/listteleportermessagesbyaddressrequest.md
  - docs/models/operations/listteleportermessagesrequest.md
  - docs/models/operations/listteleportermessagesresponse.md
  - docs/models/operations/listtokensglobals.md
  - docs/models/operations/listtokensrequest.md
  - docs/models/operations/listtokensresponse.md
  - docs/models/operations/listtransactionsglobals.md
  - docs/models/operations/listtransactionsrequest.md
  - docs/models/operations/listtransactionsresponse.md
  - docs/models/operations/listtransfersglobals.md
  - docs/models/operations/listtransfersrequest.md
  - docs/models/operations/listtransfersresponse.md
  - docs/models/operations/listvalidatorsglobals.md
  - docs/models/operations/listvalidatorsrequest.md
  - docs/models/operations/listvalidatorsresponse.md
  - docs/models/operations/listwebhooksrequest.md
  - docs/models/operations/listwebhooksresponse.md
  - docs/models/operations/posttransactionexportjobrequest.md
  - docs/models/operations/reindexnftglobals.md
  - docs/models/operations/reindexnftrequest.md
  - docs/models/operations/removeaddressesfromwebhookrequest.md
  - docs/models/operations/supportedchainsrequest.md
  - docs/models/operations/updatewebhookrequest.md
  - docs/models/operations/updatewebhookresponse.md
  - docs/sdks/address/README.md
  - docs/sdks/addressbalances/README.md
  - docs/sdks/addresschains/README.md
  - docs/sdks/addresscontracts/README.md
  - docs/sdks/addresses/README.md
  - docs/sdks/addresstransactions/README.md
  - docs/sdks/avalanche/README.md
  - docs/sdks/contracts/README.md
  - docs/sdks/data/README.md
  - docs/sdks/evm/README.md
  - docs/sdks/evmblocks/README.md
  - docs/sdks/evmchains/README.md
  - docs/sdks/evmtransactions/README.md
  - docs/sdks/icm/README.md
  - docs/sdks/lookingglass/README.md
  - docs/sdks/metrics/README.md
  - docs/sdks/metricschains/README.md
  - docs/sdks/networks/README.md
  - docs/sdks/nfts/README.md
  - docs/sdks/operations/README.md
  - docs/sdks/primarynetwork/README.md
  - docs/sdks/primarynetworkbalances/README.md
  - docs/sdks/primarynetworkblocks/README.md
  - docs/sdks/primarynetworktransactions/README.md
  - docs/sdks/rewards/README.md
  - docs/sdks/signatureaggregator/README.md
  - docs/sdks/subnets/README.md
  - docs/sdks/teleporter/README.md
  - docs/sdks/usagemetrics/README.md
  - docs/sdks/utxos/README.md
  - docs/sdks/vertices/README.md
  - docs/sdks/webhooks/README.md
  - eslint.config.mjs
  - package.json
  - src/core.ts
  - src/funcs/dataEvmAddressBalancesGetNative.ts
  - src/funcs/dataEvmAddressBalancesListCollectibles.ts
  - src/funcs/dataEvmAddressBalancesListErc1155.ts
  - src/funcs/dataEvmAddressBalancesListErc20.ts
  - src/funcs/dataEvmAddressBalancesListErc721.ts
  - src/funcs/dataEvmAddressChainsList.ts
  - src/funcs/dataEvmAddressContractsListDeployments.ts
  - src/funcs/dataEvmAddressTransactionsList.ts
  - src/funcs/dataEvmAddressTransactionsListErc1155.ts
  - src/funcs/dataEvmAddressTransactionsListErc20.ts
  - src/funcs/dataEvmAddressTransactionsListErc721.ts
  - src/funcs/dataEvmAddressTransactionsListInternal.ts
  - src/funcs/dataEvmAddressTransactionsListNative.ts
  - src/funcs/dataEvmBlocksGet.ts
  - src/funcs/dataEvmBlocksListLatest.ts
  - src/funcs/dataEvmBlocksListLatestAllChains.ts
  - src/funcs/dataEvmBlocksListTransactions.ts
  - src/funcs/dataEvmChainsGet.ts
  - src/funcs/dataEvmChainsGetAddressChains.ts
  - src/funcs/dataEvmChainsList.ts
  - src/funcs/dataEvmChainsListAllLatestBlocks.ts
  - src/funcs/dataEvmChainsListAllLatestTransactions.ts
  - src/funcs/dataEvmContractsGetDeploymentTransaction.ts
  - src/funcs/dataEvmContractsGetMetadata.ts
  - src/funcs/dataEvmContractsListTransfers.ts
  - src/funcs/dataEvmTransactionsGet.ts
  - src/funcs/dataEvmTransactionsListLatest.ts
  - src/funcs/dataEvmTransactionsListLatestAllChains.ts
  - src/funcs/dataHealthCheck.ts
  - src/funcs/dataIcmGet.ts
  - src/funcs/dataIcmList.ts
  - src/funcs/dataIcmListByAddress.ts
  - src/funcs/dataNftsGet.ts
  - src/funcs/dataNftsList.ts
  - src/funcs/dataNftsReindex.ts
  - src/funcs/dataOperationsExportTransactions.ts
  - src/funcs/dataOperationsGetResult.ts
  - src/funcs/dataPrimaryNetworkBalancesListByAddresses.ts
  - src/funcs/dataPrimaryNetworkBlocksGet.ts
  - src/funcs/dataPrimaryNetworkBlocksListByNodeId.ts
  - src/funcs/dataPrimaryNetworkBlocksListLatest.ts
  - src/funcs/dataPrimaryNetworkGetAssetDetails.ts
  - src/funcs/dataPrimaryNetworkGetBlockchainById.ts
  - src/funcs/dataPrimaryNetworkGetChainIdsForAddresses.ts
  - src/funcs/dataPrimaryNetworkGetNetworkDetails.ts
  - src/funcs/dataPrimaryNetworkGetSubnetById.ts
  - src/funcs/dataPrimaryNetworkGetValidatorDetails.ts
  - src/funcs/dataPrimaryNetworkListBlockchains.ts
  - src/funcs/dataPrimaryNetworkListDelegators.ts
  - src/funcs/dataPrimaryNetworkListL1Validators.ts
  - src/funcs/dataPrimaryNetworkListSubnets.ts
  - src/funcs/dataPrimaryNetworkListValidators.ts
  - src/funcs/dataPrimaryNetworkRewardsListHistoricalRewards.ts
  - src/funcs/dataPrimaryNetworkRewardsListPendingRewards.ts
  - src/funcs/dataPrimaryNetworkTransactionsGet.ts
  - src/funcs/dataPrimaryNetworkTransactionsListActiveStakingTransactions.ts
  - src/funcs/dataPrimaryNetworkTransactionsListAssetTransactions.ts
  - src/funcs/dataPrimaryNetworkTransactionsListLatest.ts
  - src/funcs/dataPrimaryNetworkUtxosListByAddresses.ts
  - src/funcs/dataPrimaryNetworkVerticesGetByHash.ts
  - src/funcs/dataPrimaryNetworkVerticesListByHeight.ts
  - src/funcs/dataPrimaryNetworkVerticesListLatest.ts
  - src/funcs/dataSignatureAggregatorAggregate.ts
  - src/funcs/dataSignatureAggregatorGet.ts
  - src/funcs/dataTeleporterGetTeleporterMessage.ts
  - src/funcs/dataTeleporterListTeleporterMessages.ts
  - src/funcs/dataTeleporterListTeleporterMessagesByAddress.ts
  - src/funcs/dataUsageMetricsGetLogs.ts
  - src/funcs/dataUsageMetricsGetRpcUsageMetrics.ts
  - src/funcs/dataUsageMetricsGetSubnetRpcUsage.ts
  - src/funcs/dataUsageMetricsGetUsage.ts
  - src/funcs/lookingGlassCompositeQuery.ts
  - src/funcs/metricsChainsGet.ts
  - src/funcs/metricsChainsGetMetrics.ts
  - src/funcs/metricsChainsGetRollingWindowMetrics.ts
  - src/funcs/metricsChainsGetTeleporterMetrics.ts
  - src/funcs/metricsChainsList.ts
  - src/funcs/metricsChainsListBTCbBridgersAboveThreshold.ts
  - src/funcs/metricsChainsListNftHolders.ts
  - src/funcs/metricsChainsListTokenHoldersAboveThreshold.ts
  - src/funcs/metricsHealthCheck.ts
  - src/funcs/metricsNetworksGetStakingMetrics.ts
  - src/funcs/metricsSubnetsGetValidators.ts
  - src/funcs/webhooksAddressesAdd.ts
  - src/funcs/webhooksAddressesList.ts
  - src/funcs/webhooksAddressesRemove.ts
  - src/funcs/webhooksCreate.ts
  - src/funcs/webhooksDeactivate.ts
  - src/funcs/webhooksGenerateOrRotateSharedSecret.ts
  - src/funcs/webhooksGet.ts
  - src/funcs/webhooksGetSharedSecret.ts
  - src/funcs/webhooksList.ts
  - src/funcs/webhooksUpdate.ts
  - src/hooks/hooks.ts
  - src/hooks/index.ts
  - src/hooks/types.ts
  - src/index.ts
  - src/lib/base64.ts
  - src/lib/config.ts
  - src/lib/dlv.ts
  - src/lib/encodings.ts
  - src/lib/files.ts
  - src/lib/http.ts
  - src/lib/is-plain-object.ts
  - src/lib/logger.ts
  - src/lib/matchers.ts
  - src/lib/primitives.ts
  - src/lib/retries.ts
  - src/lib/schemas.ts
  - src/lib/sdks.ts
  - src/lib/security.ts
  - src/lib/url.ts
  - src/mcp-server/build.mts
  - src/mcp-server/cli.ts
  - src/mcp-server/cli/start/command.ts
  - src/mcp-server/cli/start/impl.ts
  - src/mcp-server/console-logger.ts
  - src/mcp-server/extensions.ts
  - src/mcp-server/mcp-server.ts
  - src/mcp-server/prompts.ts
  - src/mcp-server/resources.ts
  - src/mcp-server/scopes.ts
  - src/mcp-server/server.ts
  - src/mcp-server/shared.ts
  - src/mcp-server/tools.ts
  - src/mcp-server/tools/dataEvmAddressBalancesGetNative.ts
  - src/mcp-server/tools/dataEvmAddressBalancesListCollectibles.ts
  - src/mcp-server/tools/dataEvmAddressBalancesListErc1155.ts
  - src/mcp-server/tools/dataEvmAddressBalancesListErc20.ts
  - src/mcp-server/tools/dataEvmAddressBalancesListErc721.ts
  - src/mcp-server/tools/dataEvmAddressChainsList.ts
  - src/mcp-server/tools/dataEvmAddressContractsListDeployments.ts
  - src/mcp-server/tools/dataEvmAddressTransactionsList.ts
  - src/mcp-server/tools/dataEvmAddressTransactionsListErc1155.ts
  - src/mcp-server/tools/dataEvmAddressTransactionsListErc20.ts
  - src/mcp-server/tools/dataEvmAddressTransactionsListErc721.ts
  - src/mcp-server/tools/dataEvmAddressTransactionsListInternal.ts
  - src/mcp-server/tools/dataEvmAddressTransactionsListNative.ts
  - src/mcp-server/tools/dataEvmBlocksGet.ts
  - src/mcp-server/tools/dataEvmBlocksListLatest.ts
  - src/mcp-server/tools/dataEvmBlocksListLatestAllChains.ts
  - src/mcp-server/tools/dataEvmBlocksListTransactions.ts
  - src/mcp-server/tools/dataEvmChainsGet.ts
  - src/mcp-server/tools/dataEvmChainsGetAddressChains.ts
  - src/mcp-server/tools/dataEvmChainsList.ts
  - src/mcp-server/tools/dataEvmChainsListAllLatestBlocks.ts
  - src/mcp-server/tools/dataEvmChainsListAllLatestTransactions.ts
  - src/mcp-server/tools/dataEvmContractsGetDeploymentTransaction.ts
  - src/mcp-server/tools/dataEvmContractsGetMetadata.ts
  - src/mcp-server/tools/dataEvmContractsListTransfers.ts
  - src/mcp-server/tools/dataEvmTransactionsGet.ts
  - src/mcp-server/tools/dataEvmTransactionsListLatest.ts
  - src/mcp-server/tools/dataEvmTransactionsListLatestAllChains.ts
  - src/mcp-server/tools/dataHealthCheck.ts
  - src/mcp-server/tools/dataIcmGet.ts
  - src/mcp-server/tools/dataIcmList.ts
  - src/mcp-server/tools/dataIcmListByAddress.ts
  - src/mcp-server/tools/dataNftsGet.ts
  - src/mcp-server/tools/dataNftsList.ts
  - src/mcp-server/tools/dataNftsReindex.ts
  - src/mcp-server/tools/dataOperationsExportTransactions.ts
  - src/mcp-server/tools/dataOperationsGetResult.ts
  - src/mcp-server/tools/dataPrimaryNetworkBalancesListByAddresses.ts
  - src/mcp-server/tools/dataPrimaryNetworkBlocksGet.ts
  - src/mcp-server/tools/dataPrimaryNetworkBlocksListByNodeId.ts
  - src/mcp-server/tools/dataPrimaryNetworkBlocksListLatest.ts
  - src/mcp-server/tools/dataPrimaryNetworkGetAssetDetails.ts
  - src/mcp-server/tools/dataPrimaryNetworkGetBlockchainById.ts
  - src/mcp-server/tools/dataPrimaryNetworkGetChainIdsForAddresses.ts
  - src/mcp-server/tools/dataPrimaryNetworkGetNetworkDetails.ts
  - src/mcp-server/tools/dataPrimaryNetworkGetSubnetById.ts
  - src/mcp-server/tools/dataPrimaryNetworkGetValidatorDetails.ts
  - src/mcp-server/tools/dataPrimaryNetworkListBlockchains.ts
  - src/mcp-server/tools/dataPrimaryNetworkListDelegators.ts
  - src/mcp-server/tools/dataPrimaryNetworkListL1Validators.ts
  - src/mcp-server/tools/dataPrimaryNetworkListSubnets.ts
  - src/mcp-server/tools/dataPrimaryNetworkListValidators.ts
  - src/mcp-server/tools/dataPrimaryNetworkRewardsListHistoricalRewards.ts
  - src/mcp-server/tools/dataPrimaryNetworkRewardsListPendingRewards.ts
  - src/mcp-server/tools/dataPrimaryNetworkTransactionsGet.ts
  - src/mcp-server/tools/dataPrimaryNetworkTransactionsListActiveStakingTransactions.ts
  - src/mcp-server/tools/dataPrimaryNetworkTransactionsListAssetTransactions.ts
  - src/mcp-server/tools/dataPrimaryNetworkTransactionsListLatest.ts
  - src/mcp-server/tools/dataPrimaryNetworkUtxosListByAddresses.ts
  - src/mcp-server/tools/dataPrimaryNetworkVerticesGetByHash.ts
  - src/mcp-server/tools/dataPrimaryNetworkVerticesListByHeight.ts
  - src/mcp-server/tools/dataPrimaryNetworkVerticesListLatest.ts
  - src/mcp-server/tools/dataSignatureAggregatorAggregate.ts
  - src/mcp-server/tools/dataSignatureAggregatorGet.ts
  - src/mcp-server/tools/dataTeleporterGetTeleporterMessage.ts
  - src/mcp-server/tools/dataTeleporterListTeleporterMessages.ts
  - src/mcp-server/tools/dataTeleporterListTeleporterMessagesByAddress.ts
  - src/mcp-server/tools/dataUsageMetricsGetLogs.ts
  - src/mcp-server/tools/dataUsageMetricsGetRpcUsageMetrics.ts
  - src/mcp-server/tools/dataUsageMetricsGetSubnetRpcUsage.ts
  - src/mcp-server/tools/dataUsageMetricsGetUsage.ts
  - src/mcp-server/tools/lookingGlassCompositeQuery.ts
  - src/mcp-server/tools/metricsChainsGet.ts
  - src/mcp-server/tools/metricsChainsGetMetrics.ts
  - src/mcp-server/tools/metricsChainsGetRollingWindowMetrics.ts
  - src/mcp-server/tools/metricsChainsGetTeleporterMetrics.ts
  - src/mcp-server/tools/metricsChainsList.ts
  - src/mcp-server/tools/metricsChainsListBTCbBridgersAboveThreshold.ts
  - src/mcp-server/tools/metricsChainsListNftHolders.ts
  - src/mcp-server/tools/metricsChainsListTokenHoldersAboveThreshold.ts
  - src/mcp-server/tools/metricsHealthCheck.ts
  - src/mcp-server/tools/metricsNetworksGetStakingMetrics.ts
  - src/mcp-server/tools/metricsSubnetsGetValidators.ts
  - src/mcp-server/tools/webhooksAddressesAdd.ts
  - src/mcp-server/tools/webhooksAddressesList.ts
  - src/mcp-server/tools/webhooksAddressesRemove.ts
  - src/mcp-server/tools/webhooksCreate.ts
  - src/mcp-server/tools/webhooksDeactivate.ts
  - src/mcp-server/tools/webhooksGenerateOrRotateSharedSecret.ts
  - src/mcp-server/tools/webhooksGet.ts
  - src/mcp-server/tools/webhooksGetSharedSecret.ts
  - src/mcp-server/tools/webhooksList.ts
  - src/mcp-server/tools/webhooksUpdate.ts
  - src/models/components/accesslistdata.ts
  - src/models/components/activedelegatordetails.ts
  - src/models/components/activevalidatordetails.ts
  - src/models/components/addressactivitymetadata.ts
  - src/models/components/addressdetails.ts
  - src/models/components/addresseschangerequest.ts
  - src/models/components/aggregatedassetamount.ts
  - src/models/components/alltimeerc20balancequerydto.ts
  - src/models/components/alltimenativebalancequerydto.ts
  - src/models/components/alltimenftholdersquerydto.ts
  - src/models/components/alltimestarsarenabalancequerydto.ts
  - src/models/components/anytimeerc20balancequerydto.ts
  - src/models/components/anytimenativebalancequerydto.ts
  - src/models/components/anytimenftholdersquerydto.ts
  - src/models/components/anytimestarsarenabalancequerydto.ts
  - src/models/components/apifeature.ts
  - src/models/components/assetamount.ts
  - src/models/components/assetwithpriceinfo.ts
  - src/models/components/balanceowner.ts
  - src/models/components/blockchain.ts
  - src/models/components/blockchainid.ts
  - src/models/components/blockchainids.ts
  - src/models/components/blscredentials.ts
  - src/models/components/cchainatomicbalances.ts
  - src/models/components/cchainexporttransaction.ts
  - src/models/components/cchainimporttransaction.ts
  - src/models/components/cchainsharedassetbalance.ts
  - src/models/components/chain.ts
  - src/models/components/chainaddresschainidmap.ts
  - src/models/components/chainaddresschainidmaplistresponse.ts
  - src/models/components/chaininfo.ts
  - src/models/components/chainmetric.ts
  - src/models/components/chainrollingwindowmetric.ts
  - src/models/components/chainrollingwindowmetricsvalue.ts
  - src/models/components/chainstatus.ts
  - src/models/components/commonbalancetype.ts
  - src/models/components/completeddelegatordetails.ts
  - src/models/components/completedvalidatordetails.ts
  - src/models/components/compositequeryrequestdto.ts
  - src/models/components/compositequeryresponse.ts
  - src/models/components/contractdeploymentdetails.ts
  - src/models/components/createevmtransactionexportrequest.ts
  - src/models/components/createprimarynetworktransactionexportrequest.ts
  - src/models/components/currencycode.ts
  - src/models/components/datalistchainsresponse.ts
  - src/models/components/daterangeerc20minbalanceparam.ts
  - src/models/components/daterangeminbalanceparam.ts
  - src/models/components/daterangenftholdersparam.ts
  - src/models/components/daterangestarsarenaminbalanceparam.ts
  - src/models/components/delegationstatustype.ts
  - src/models/components/delegatorsdetails.ts
  - src/models/components/deliveredicmmessage.ts
  - src/models/components/deliveredsourcenotindexedicmmessage.ts
  - src/models/components/deliveredsourcenotindexedteleportermessage.ts
  - src/models/components/deliveredteleportermessage.ts
  - src/models/components/erc1155contract.ts
  - src/models/components/erc1155token.ts
  - src/models/components/erc1155tokenbalance.ts
  - src/models/components/erc1155tokenmetadata.ts
  - src/models/components/erc1155transfer.ts
  - src/models/components/erc1155transferdetails.ts
  - src/models/components/erc20contract.ts
  - src/models/components/erc20token.ts
  - src/models/components/erc20tokenbalance.ts
  - src/models/components/erc20transfer.ts
  - src/models/components/erc20transferdetails.ts
  - src/models/components/erc721contract.ts
  - src/models/components/erc721token.ts
  - src/models/components/erc721tokenbalance.ts
  - src/models/components/erc721tokenmetadata.ts
  - src/models/components/erc721transfer.ts
  - src/models/components/erc721transferdetails.ts
  - src/models/components/erctoken.ts
  - src/models/components/erctransfer.ts
  - src/models/components/eventtype.ts
  - src/models/components/evmaddressactivityrequest.ts
  - src/models/components/evmaddressactivityresponse.ts
  - src/models/components/evmblock.ts
  - src/models/components/evminput.ts
  - src/models/components/evmnetworkoptions.ts
  - src/models/components/evmoperationtype.ts
  - src/models/components/evmoutput.ts
  - src/models/components/fullnativetransactiondetails.ts
  - src/models/components/getchainresponse.ts
  - src/models/components/getevmblockresponse.ts
  - src/models/components/getnativebalanceresponse.ts
  - src/models/components/getnetworkdetailsresponse.ts
  - src/models/components/getprimarynetworkblockresponse.ts
  - src/models/components/gettransactionresponse.ts
  - src/models/components/globalparamnetwork.ts
  - src/models/components/healthcheckresultdto.ts
  - src/models/components/healthindicatorresultdto.ts
  - src/models/components/historicalreward.ts
  - src/models/components/icmdestinationtransaction.ts
  - src/models/components/icmreceipt.ts
  - src/models/components/icmrewarddetails.ts
  - src/models/components/icmsourcetransaction.ts
  - src/models/components/imageasset.ts
  - src/models/components/index.ts
  - src/models/components/internaltransaction.ts
  - src/models/components/internaltransactiondetails.ts
  - src/models/components/internaltransactionopcall.ts
  - src/models/components/l1validatordetailsfull.ts
  - src/models/components/l1validatordetailstransaction.ts
  - src/models/components/l1validatormanagerdetails.ts
  - src/models/components/latestbalanceparams.ts
  - src/models/components/latestbalancequerydto.ts
  - src/models/components/lateststarsarenabalanceparams.ts
  - src/models/components/lateststarsarenabalancequerydto.ts
  - src/models/components/listaddresschainsresponse.ts
  - src/models/components/listblockchainsresponse.ts
  - src/models/components/listcchainatomicbalancesresponse.ts
  - src/models/components/listcchainatomictransactionsresponse.ts
  - src/models/components/listcollectiblebalancesresponse.ts
  - src/models/components/listcontractsresponse.ts
  - src/models/components/listdelegatordetailsresponse.ts
  - src/models/components/listerc1155balancesresponse.ts
  - src/models/components/listerc1155transactionsresponse.ts
  - src/models/components/listerc20balancesresponse.ts
  - src/models/components/listerc20transactionsresponse.ts
  - src/models/components/listerc721balancesresponse.ts
  - src/models/components/listerc721transactionsresponse.ts
  - src/models/components/listevmblocksresponse.ts
  - src/models/components/listhistoricalrewardsresponse.ts
  - src/models/components/listicmmessagesresponse.ts
  - src/models/components/listinternaltransactionsresponse.ts
  - src/models/components/listl1validatorsresponse.ts
  - src/models/components/listnativetransactionsresponse.ts
  - src/models/components/listnfttokens.ts
  - src/models/components/listpchainbalancesresponse.ts
  - src/models/components/listpchaintransactionsresponse.ts
  - src/models/components/listpchainutxosresponse.ts
  - src/models/components/listpendingrewardsresponse.ts
  - src/models/components/listprimarynetworkblocksresponse.ts
  - src/models/components/listsubnetsresponse.ts
  - src/models/components/listteleportermessagesresponse.ts
  - src/models/components/listtransactiondetailsresponse.ts
  - src/models/components/listtransfersresponse.ts
  - src/models/components/listutxosresponse.ts
  - src/models/components/listvalidatordetailsresponse.ts
  - src/models/components/listwebhookaddressesresponse.ts
  - src/models/components/listwebhooksresponse.ts
  - src/models/components/listxchainbalancesresponse.ts
  - src/models/components/listxchaintransactionsresponse.ts
  - src/models/components/listxchainverticesresponse.ts
  - src/models/components/log.ts
  - src/models/components/logsformat.ts
  - src/models/components/logsformatmetadata.ts
  - src/models/components/logsresponsedto.ts
  - src/models/components/lookingglassresponse.ts
  - src/models/components/method.ts
  - src/models/components/metric.ts
  - src/models/components/metricsapiresponse.ts
  - src/models/components/metricslistchainsresponse.ts
  - src/models/components/metricsvalue.ts
  - src/models/components/money.ts
  - src/models/components/nativetokenbalance.ts
  - src/models/components/nativetransaction.ts
  - src/models/components/network.ts
  - src/models/components/networkmetric.ts
  - src/models/components/networktoken.ts
  - src/models/components/networktokendetails.ts
  - src/models/components/networktokeninfo.ts
  - src/models/components/networktype.ts
  - src/models/components/nftholdersresponse.ts
  - src/models/components/nfttokenmetadatastatus.ts
  - src/models/components/operationstatus.ts
  - src/models/components/operationstatuscode.ts
  - src/models/components/operationstatusresponse.ts
  - src/models/components/operationtype.ts
  - src/models/components/operator.ts
  - src/models/components/pchainaddressdetails.ts
  - src/models/components/pchainbalance.ts
  - src/models/components/pchainid.ts
  - src/models/components/pchainlookingglassresponse.ts
  - src/models/components/pchainsharedasset.ts
  - src/models/components/pchaintransaction.ts
  - src/models/components/pchaintransactiontype.ts
  - src/models/components/pchainutxo.ts
  - src/models/components/pendingdelegatordetails.ts
  - src/models/components/pendingicmmessage.ts
  - src/models/components/pendingreward.ts
  - src/models/components/pendingteleportermessage.ts
  - src/models/components/pendingvalidatordetails.ts
  - src/models/components/platformactivitykeytype.ts
  - src/models/components/platformactivitymetadata.ts
  - src/models/components/platformactivityrequest.ts
  - src/models/components/platformactivityresponse.ts
  - src/models/components/platformactivitysubevents.ts
  - src/models/components/platformaddressactivitysubeventtype.ts
  - src/models/components/platformbalancethresholdfilter.ts
  - src/models/components/pricingproviders.ts
  - src/models/components/primarynetworkassetcap.ts
  - src/models/components/primarynetworkassettype.ts
  - src/models/components/primarynetworkblock.ts
  - src/models/components/primarynetworkchaininfo.ts
  - src/models/components/primarynetworkchainname.ts
  - src/models/components/primarynetworkoperationtype.ts
  - src/models/components/primarynetworkoptions.ts
  - src/models/components/primarynetworktxtype.ts
  - src/models/components/primarynetworktype.ts
  - src/models/components/proposerdetails.ts
  - src/models/components/removedvalidatordetails.ts
  - src/models/components/requesttype.ts
  - src/models/components/resourcelink.ts
  - src/models/components/resourcelinktype.ts
  - src/models/components/rewards.ts
  - src/models/components/rewardtype.ts
  - src/models/components/richaddress.ts
  - src/models/components/rollingwindowmetricsapiresponse.ts
  - src/models/components/rpcmetrics.ts
  - src/models/components/rpcusagemetricsgroupbyenum.ts
  - src/models/components/rpcusagemetricsvalueaggregated.ts
  - src/models/components/security.ts
  - src/models/components/sharedsecretsresponse.ts
  - src/models/components/signatureaggregationresponse.ts
  - src/models/components/signatureaggregatorrequest.ts
  - src/models/components/sortbyoption.ts
  - src/models/components/sortorder.ts
  - src/models/components/stakingdistribution.ts
  - src/models/components/subnet.ts
  - src/models/components/subnetownershipinfo.ts
  - src/models/components/subnetrpctimeintervalgranularity.ts
  - src/models/components/subnetrpcusagemetricsresponsedto.ts
  - src/models/components/teleporterchainmetricsapiresponse.ts
  - src/models/components/teleporterdestinationtransaction.ts
  - src/models/components/teleportermessageinfo.ts
  - src/models/components/teleportermetric.ts
  - src/models/components/teleportermetricsvalue.ts
  - src/models/components/teleporterreceipt.ts
  - src/models/components/teleporterrewarddetails.ts
  - src/models/components/teleportersourcetransaction.ts
  - src/models/components/timeintervalgranularity.ts
  - src/models/components/timeintervalgranularityextended.ts
  - src/models/components/timestamprangenftholdersparam.ts
  - src/models/components/tokentype.ts
  - src/models/components/transaction.ts
  - src/models/components/transactiondetails.ts
  - src/models/components/transactiondirectiontype.ts
  - src/models/components/transactionevent.ts
  - src/models/components/transactionexportmetadata.ts
  - src/models/components/transactionmethodtype.ts
  - src/models/components/transactionstatus.ts
  - src/models/components/transactionvertexdetail.ts
  - src/models/components/unknowncontract.ts
  - src/models/components/updatewebhookrequest.ts
  - src/models/components/usagemetricsgroupbyenum.ts
  - src/models/components/usagemetricsresponsedto.ts
  - src/models/components/usagemetricsvaluedto.ts
  - src/models/components/utilityaddresses.ts
  - src/models/components/utxo.ts
  - src/models/components/utxocredential.ts
  - src/models/components/utxotype.ts
  - src/models/components/validationstatustype.ts
  - src/models/components/validatorhealthdetails.ts
  - src/models/components/validatorsdetails.ts
  - src/models/components/vmname.ts
  - src/models/components/webhookaddressactivityresponse.ts
  - src/models/components/webhookstatus.ts
  - src/models/components/webhookstatustype.ts
  - src/models/components/xchainassetdetails.ts
  - src/models/components/xchainbalances.ts
  - src/models/components/xchainid.ts
  - src/models/components/xchainlineartransaction.ts
  - src/models/components/xchainnonlineartransaction.ts
  - src/models/components/xchainsharedassetbalance.ts
  - src/models/components/xchaintransactiontype.ts
  - src/models/components/xchainvertex.ts
  - src/models/errors/avalancheapierror.ts
  - src/models/errors/badgatewayerror.ts
  - src/models/errors/badrequesterror.ts
  - src/models/errors/forbiddenerror.ts
  - src/models/errors/httpclienterrors.ts
  - src/models/errors/index.ts
  - src/models/errors/internalservererror.ts
  - src/models/errors/notfounderror.ts
  - src/models/errors/sdkvalidationerror.ts
  - src/models/errors/serviceunavailableerror.ts
  - src/models/errors/toomanyrequestserror.ts
  - src/models/errors/unauthorizederror.ts
  - src/models/operations/addaddressestowebhook.ts
  - src/models/operations/aggregatesignatures.ts
  - src/models/operations/compositequeryv2.ts
  - src/models/operations/createwebhook.ts
  - src/models/operations/datahealthcheck.ts
  - src/models/operations/deactivatewebhook.ts
  - src/models/operations/generateorrotatesharedsecret.ts
  - src/models/operations/getaddresschains.ts
  - src/models/operations/getaddressesbybalanceovertime.ts
  - src/models/operations/getaddressesbybtcbbridged.ts
  - src/models/operations/getaddressesfromwebhook.ts
  - src/models/operations/getaggregatedsignatures.ts
  - src/models/operations/getapilogs.ts
  - src/models/operations/getapiusagemetrics.ts
  - src/models/operations/getassetdetails.ts
  - src/models/operations/getbalancesbyaddresses.ts
  - src/models/operations/getblock.ts
  - src/models/operations/getblockbyid.ts
  - src/models/operations/getblockchainbyid.ts
  - src/models/operations/getchain.ts
  - src/models/operations/getchainidsforaddresses.ts
  - src/models/operations/getchaininfo.ts
  - src/models/operations/getcontractmetadata.ts
  - src/models/operations/getdeploymenttransaction.ts
  - src/models/operations/getevmchainmetrics.ts
  - src/models/operations/getevmchainrollingwindowmetrics.ts
  - src/models/operations/geticmmessage.ts
  - src/models/operations/getlatestblocks.ts
  - src/models/operations/getnativebalance.ts
  - src/models/operations/getnetworkdetails.ts
  - src/models/operations/getnftholdersbycontractaddress.ts
  - src/models/operations/getoperationresult.ts
  - src/models/operations/getrpcusagemetrics.ts
  - src/models/operations/getsharedsecret.ts
  - src/models/operations/getsinglevalidatordetails.ts
  - src/models/operations/getstakingmetrics.ts
  - src/models/operations/getsubnetbyid.ts
  - src/models/operations/getsubnetrpcusagemetrics.ts
  - src/models/operations/getteleportermessage.ts
  - src/models/operations/getteleportermetricsbychain.ts
  - src/models/operations/gettokendetails.ts
  - src/models/operations/gettransaction.ts
  - src/models/operations/gettransactionsforblock.ts
  - src/models/operations/gettxbyhash.ts
  - src/models/operations/getutxosbyaddresses.ts
  - src/models/operations/getvalidatorsbydaterange.ts
  - src/models/operations/getvertexbyhash.ts
  - src/models/operations/getvertexbyheight.ts
  - src/models/operations/getwebhook.ts
  - src/models/operations/index.ts
  - src/models/operations/listactiveprimarynetworkstakingtransactions.ts
  - src/models/operations/listaddresschains.ts
  - src/models/operations/listalllatestblocks.ts
  - src/models/operations/listalllatesttransactions.ts
  - src/models/operations/listassettransactions.ts
  - src/models/operations/listblockchains.ts
  - src/models/operations/listchains.ts
  - src/models/operations/listcollectiblebalances.ts
  - src/models/operations/listcontractdeployments.ts
  - src/models/operations/listdelegators.ts
  - src/models/operations/listerc1155balances.ts
  - src/models/operations/listerc1155transactions.ts
  - src/models/operations/listerc20balances.ts
  - src/models/operations/listerc20transactions.ts
  - src/models/operations/listerc721balances.ts
  - src/models/operations/listerc721transactions.ts
  - src/models/operations/listhistoricalprimarynetworkrewards.ts
  - src/models/operations/listicmmessages.ts
  - src/models/operations/listicmmessagesbyaddress.ts
  - src/models/operations/listinternaltransactions.ts
  - src/models/operations/listl1validators.ts
  - src/models/operations/listlatestblocksallchains.ts
  - src/models/operations/listlatestprimarynetworkblocks.ts
  - src/models/operations/listlatestprimarynetworktransactions.ts
  - src/models/operations/listlatesttransactions.ts
  - src/models/operations/listlatesttransactionsallchains.ts
  - src/models/operations/listlatestxchainvertices.ts
  - src/models/operations/listnativetransactions.ts
  - src/models/operations/listpendingprimarynetworkrewards.ts
  - src/models/operations/listprimarynetworkblocksbynodeid.ts
  - src/models/operations/listsubnets.ts
  - src/models/operations/listteleportermessages.ts
  - src/models/operations/listteleportermessagesbyaddress.ts
  - src/models/operations/listtokens.ts
  - src/models/operations/listtransactions.ts
  - src/models/operations/listtransfers.ts
  - src/models/operations/listvalidators.ts
  - src/models/operations/listwebhooks.ts
  - src/models/operations/metricshealthcheck.ts
  - src/models/operations/posttransactionexportjob.ts
  - src/models/operations/reindexnft.ts
  - src/models/operations/removeaddressesfromwebhook.ts
  - src/models/operations/supportedchains.ts
  - src/models/operations/updatewebhook.ts
  - src/sdk/address.ts
  - src/sdk/addressbalances.ts
  - src/sdk/addresschains.ts
  - src/sdk/addresscontracts.ts
  - src/sdk/addresses.ts
  - src/sdk/addresstransactions.ts
  - src/sdk/contracts.ts
  - src/sdk/data.ts
  - src/sdk/evm.ts
  - src/sdk/evmblocks.ts
  - src/sdk/evmchains.ts
  - src/sdk/evmtransactions.ts
  - src/sdk/icm.ts
  - src/sdk/index.ts
  - src/sdk/lookingglass.ts
  - src/sdk/metrics.ts
  - src/sdk/metricschains.ts
  - src/sdk/networks.ts
  - src/sdk/nfts.ts
  - src/sdk/operations.ts
  - src/sdk/primarynetwork.ts
  - src/sdk/primarynetworkbalances.ts
  - src/sdk/primarynetworkblocks.ts
  - src/sdk/primarynetworktransactions.ts
  - src/sdk/rewards.ts
  - src/sdk/sdk.ts
  - src/sdk/signatureaggregator.ts
  - src/sdk/subnets.ts
  - src/sdk/teleporter.ts
  - src/sdk/usagemetrics.ts
  - src/sdk/utxos.ts
  - src/sdk/vertices.ts
  - src/sdk/webhooks.ts
  - src/types/async.ts
  - src/types/blobs.ts
  - src/types/constdatetime.ts
  - src/types/enums.ts
  - src/types/fp.ts
  - src/types/index.ts
  - src/types/operations.ts
  - src/types/rfcdate.ts
  - src/types/streams.ts
  - src/types/webhooks.ts
  - tsconfig.json
examples:
  sendAddressActivityWebhook:
    speakeasy-default-send-address-activity-webhook:
      requestBody:
        application/json: {"webhookId": "401da7d9-d6d7-46c8-b431-72ff1e1543f4", "eventType": "address_activity", "messageId": "bc9732db-2430-4296-afc3-c51267beb14a", "event": {"transaction": {"blockHash": "0x2a47bebed93db4a21cc8339980f004cc67f17d0dff4a368001e450e7be2edaa0", "blockNumber": "45396106", "from": "0x737F6b0b8A04e8462d0fC7076451298F0dA9a972", "gas": "80000", "gasPrice": "52000000000", "maxFeePerGas": "52000000000", "maxPriorityFeePerGas": "2000000000", "txHash": "0xfd91150d236ec5c3b1ee325781affad5b0b4d7eb0187c84c220ab115eaa563e8", "txStatus": "1", "input": "0xa9059cbb00000000000000000000000040e832c3df9562dfae5a86a4849f27f687a9b46b00000000000000000000000000000000000000000000000000000000c68b2a69", "nonce": "0", "to": "0x9702230a8ea53601f5cd2dc00fdbc13d4df4a8c7", "transactionIndex": 1, "value": "0", "type": 2, "chainId": "43114", "receiptCumulativeGasUsed": "668508", "receiptGasUsed": "44038", "receiptEffectiveGasPrice": "27000000000", "receiptRoot": "0xe5b018c29a77c8a92c4ea2f2d7e58820283041a52e14a0620d90d13b881e1ee3", "blockTimestamp": 1715621840, "contractAddress": "0x0000000000000000000000000000000000000000", "erc20Transfers": [{"transactionHash": "0xfd91150d236ec5c3b1ee325781affad5b0b4d7eb0187c84c220ab115eaa563e8", "type": "ERC20", "from": "0x737F6b0b8A04e8462d0fC7076451298F0dA9a972", "to": "0x40E832C3Df9562DfaE5A86A4849F27F687A9B46B", "value": "3331009129", "tokenId": "2", "blockTimestamp": 1640995200, "logIndex": 5, "erc20Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}, "erc721Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}, "erc1155Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}}, {"transactionHash": "0xfd91150d236ec5c3b1ee325781affad5b0b4d7eb0187c84c220ab115eaa563e8", "type": "ERC20", "from": "0x737F6b0b8A04e8462d0fC7076451298F0dA9a972", "to": "0x40E832C3Df9562DfaE5A86A4849F27F687A9B46B", "value": "3331009129", "tokenId": "2", "blockTimestamp": 1640995200, "logIndex": 5, "erc20Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}, "erc721Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}, "erc1155Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}}, {"transactionHash": "0xfd91150d236ec5c3b1ee325781affad5b0b4d7eb0187c84c220ab115eaa563e8", "type": "ERC20", "from": "0x737F6b0b8A04e8462d0fC7076451298F0dA9a972", "to": "0x40E832C3Df9562DfaE5A86A4849F27F687A9B46B", "value": "3331009129", "tokenId": "2", "blockTimestamp": 1640995200, "logIndex": 5, "erc20Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}, "erc721Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}, "erc1155Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}}], "erc721Transfers": [{"transactionHash": "0xfd91150d236ec5c3b1ee325781affad5b0b4d7eb0187c84c220ab115eaa563e8", "type": "ERC20", "from": "0x737F6b0b8A04e8462d0fC7076451298F0dA9a972", "to": "0x40E832C3Df9562DfaE5A86A4849F27F687A9B46B", "value": "3331009129", "tokenId": "2", "blockTimestamp": 1640995200, "logIndex": 5, "erc20Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}, "erc721Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}, "erc1155Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}}, {"transactionHash": "0xfd91150d236ec5c3b1ee325781affad5b0b4d7eb0187c84c220ab115eaa563e8", "type": "ERC20", "from": "0x737F6b0b8A04e8462d0fC7076451298F0dA9a972", "to": "0x40E832C3Df9562DfaE5A86A4849F27F687A9B46B", "value": "3331009129", "tokenId": "2", "blockTimestamp": 1640995200, "logIndex": 5, "erc20Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}, "erc721Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}, "erc1155Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}}, {"transactionHash": "0xfd91150d236ec5c3b1ee325781affad5b0b4d7eb0187c84c220ab115eaa563e8", "type": "ERC20", "from": "0x737F6b0b8A04e8462d0fC7076451298F0dA9a972", "to": "0x40E832C3Df9562DfaE5A86A4849F27F687A9B46B", "value": "3331009129", "tokenId": "2", "blockTimestamp": 1640995200, "logIndex": 5, "erc20Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}, "erc721Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}, "erc1155Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}}], "erc1155Transfers": [{"transactionHash": "0xfd91150d236ec5c3b1ee325781affad5b0b4d7eb0187c84c220ab115eaa563e8", "type": "ERC20", "from": "0x737F6b0b8A04e8462d0fC7076451298F0dA9a972", "to": "0x40E832C3Df9562DfaE5A86A4849F27F687A9B46B", "value": "3331009129", "tokenId": "2", "blockTimestamp": 1640995200, "logIndex": 5, "erc20Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}, "erc721Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}, "erc1155Token": {"address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "name": "TetherToken", "symbol": "USDt", "decimals": 6, "valueWithDecimals": "3331.009129"}}], "internalTransactions": [{"from": "0x737F6b0b8A04e8462d0fC7076451298F0dA9a972", "to": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "internalTxType": "call", "value": "50000000000000000", "gasUsed": "44038", "gasLimit": "50000", "transactionHash": "0xfd91150d236ec5c3b1ee325781affad5b0b4d7eb0187c84c220ab115eaa563e8"}, {"from": "0x737F6b0b8A04e8462d0fC7076451298F0dA9a972", "to": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "internalTxType": "call", "value": "50000000000000000", "gasUsed": "44038", "gasLimit": "50000", "transactionHash": "0xfd91150d236ec5c3b1ee325781affad5b0b4d7eb0187c84c220ab115eaa563e8"}], "accessList": [{"accessAddresses": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "storageKeys": []}, {"accessAddresses": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "storageKeys": []}, {"accessAddresses": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "storageKeys": []}], "networkToken": {"tokenName": "TetherToken", "tokenSymbol": "USDt", "tokenDecimals": 6, "valueWithDecimals": "3331.009129"}}, "logs": [{"address": "0x54C800d2331E10467143911aabCa092d68bF4166", "topic0": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925", "topic1": "0x0000000000000000000000000000333883f313ad709f583d0a3d2e18a44ef29b", "topic2": "0x0000000000000000000000000000000000000000000000000000000000000000", "topic3": "0x0000000000000000000000000000000000000000000000000000000000001350", "data": "0x", "transactionIndex": 2, "logIndex": 10, "removed": false}, {"address": "0x54C800d2331E10467143911aabCa092d68bF4166", "topic0": "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925", "topic1": "0x0000000000000000000000000000333883f313ad709f583d0a3d2e18a44ef29b", "topic2": "0x0000000000000000000000000000000000000000000000000000000000000000", "topic3": "0x0000000000000000000000000000000000000000000000000000000000001350", "data": "0x", "transactionIndex": 2, "logIndex": 10, "removed": false}]}}
  metrics-health-check:
    speakeasy-default-metrics-health-check:
      responses:
        "200":
          application/json: {"info": {"database": {"status": "up"}}, "details": {"database": {"status": "up"}}}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listChains:
    "":
      parameters:
        query:
          network: "mainnet"
      responses:
        "200":
          application/json: {"chains": [{"evmChainId": 43114, "chainName": "c_chain", "blockchainId": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5", "subnetId": "11111111111111111111111111111111LpoYY", "network": "testnet"}, {"evmChainId": 43114, "chainName": "c_chain", "blockchainId": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5", "subnetId": "11111111111111111111111111111111LpoYY", "network": "testnet"}, {"evmChainId": 43114, "chainName": "c_chain", "blockchainId": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5", "subnetId": "11111111111111111111111111111111LpoYY", "network": "mainnet"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getChain:
    "":
      parameters:
        path:
          chainId: "43114"
      responses:
        "200":
          application/json: {"evmChainId": 43114, "chainName": "c_chain", "blockchainId": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5", "subnetId": "11111111111111111111111111111111LpoYY", "network": "testnet"}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getEvmChainMetrics:
    "":
      parameters:
        path:
          metric: "activeAddresses"
          chainId: "43114"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          timeInterval: "day"
          pageSize: "10"
      responses:
        "200":
          application/json: {"results": []}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getTeleporterMetricsByChain:
    "":
      parameters:
        path:
          metric: "teleporterSourceTxnCount"
          chainId: "43114"
      responses:
        "200":
          application/json: {"result": {"value": 1516.75}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getEvmChainRollingWindowMetrics:
    "":
      parameters:
        path:
          metric: "txCount"
          chainId: "43114"
      responses:
        "200":
          application/json: {"result": {"lastHour": 6904.71, "lastDay": 3622.78, "lastMonth": 380.57, "lastYear": 613.73, "allTime": 7314.95}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getNftHoldersByContractAddress:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x7a420AEFF902AAa2c85a190D7B91Ce8BEFffFE14"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"addresses": [], "nftCollectionName": ["NFT Project"], "nftSymbol": ["NFTPROJ"], "totalHolders": 10, "totalTokens": 10}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getAddressesByBalanceOverTime:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
        query:
          threshold: "1000000"
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
      responses:
        "200":
          application/json: {"addresses": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getAddressesByBtcbBridged:
    "":
      parameters:
        query:
          threshold: "1000000"
          pageSize: "10"
      responses:
        "200":
          application/json: {"addresses": [{"address": "0x1234567890abcdef1234567890abcdef123456789", "sortKey": "123"}, {"address": "0x1234567890abcdef1234567890abcdef123456789", "sortKey": "123"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getStakingMetrics:
    "":
      parameters:
        path:
          metric: "validatorCount"
          network: "mainnet"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
          subnetId: "11111111111111111111111111111111LpoYY"
      responses:
        "200":
          application/json: {"results": [{"value": 2512.08, "timestamp": 9079.49}, {"value": 5878.55, "timestamp": 471.45}, {"value": 3716.7, "timestamp": 8933.57}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getValidatorsByDateRange:
    "":
      parameters:
        path:
          subnetId: "11111111111111111111111111111111LpoYY"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"addresses": [{"addresses": ["avax1abcdef1234567890abcdef1234567890abcdef"], "sortKey": "123"}, {"addresses": ["avax1abcdef1234567890abcdef1234567890abcdef"], "sortKey": "123"}]}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  compositeQueryV2:
    speakeasy-default-composite-query-v2:
      requestBody:
        application/json: {"pageSize": 1000, "queries": [{"id": "<id>", "type": "AllTimeStarsArenaBalance", "params": {"firstDate": "<value>", "lastDate": "<value>", "minBalance": "<value>", "subjectAddress": "<value>"}}, {"id": "<id>", "type": "AnyTimeStarsArenaBalance", "params": {"firstDate": "<value>", "lastDate": "<value>", "minBalance": "<value>", "subjectAddress": "<value>"}}, {"id": "<id>", "type": "AllTimeStarsArenaBalance", "params": {"firstDate": "<value>", "lastDate": "<value>", "minBalance": "<value>", "subjectAddress": "<value>"}}], "operator": "OR"}
      responses:
        "200":
          application/json: {"subQueryCounts": {"1": 1, "2": 2, "3": 2}, "totalCount": 2, "addresses": ["0x1234567890abcdef1234567890abcdef123456789"]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  data-health-check:
    speakeasy-default-data-health-check:
      responses:
        "200":
          application/json: {"info": {"database": {"status": "up"}}, "details": {"database": {"status": "up"}}}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listAddressChains:
    "":
      parameters:
        path:
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
      responses:
        "200":
          application/json: {"indexedChains": [{"chainId": "<id>", "status": "UNAVAILABLE", "chainName": "<value>", "description": "mmm avalanche jungle unto meanwhile beside tromp worth", "vmName": "EVM", "rpcUrl": "https://blind-spear.net/", "isTestnet": true, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}, {"chainId": "<id>", "status": "UNAVAILABLE", "chainName": "<value>", "description": "when uh-huh madly unless brightly", "vmName": "EVM", "rpcUrl": "https://writhing-hexagon.info", "isTestnet": true, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}, {"chainId": "<id>", "status": "OK", "chainName": "<value>", "description": "commonly softly boo massive sorrowful aw strict behind along energetic", "vmName": "EVM", "rpcUrl": "https://pricey-median.org", "isTestnet": false, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}]}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getNativeBalance:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          blockNumber: "6479329"
          currency: "usd"
      responses:
        "200":
          application/json: {"nativeTokenBalance": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "chainId": "43114", "price": {"currencyCode": "usd", "value": "42.42"}, "balance": "2000000000000000000", "balanceValue": {"currencyCode": "usd", "value": "42.42"}}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listErc20Balances:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          blockNumber: "6479329"
          pageSize: "10"
          filterSpamTokens: true
          contractAddresses: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7, 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB"
          currency: "usd"
      responses:
        "200":
          application/json: {"nativeTokenBalance": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "chainId": "43114", "price": {"currencyCode": "usd", "value": "42.42"}, "balance": "2000000000000000000", "balanceValue": {"currencyCode": "usd", "value": "42.42"}}, "erc20TokenBalances": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listErc721Balances:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          pageSize: "10"
          contractAddress: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
      responses:
        "200":
          application/json: {"nativeTokenBalance": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "chainId": "43114", "price": {"currencyCode": "usd", "value": "42.42"}, "balance": "2000000000000000000", "balanceValue": {"currencyCode": "usd", "value": "42.42"}}, "erc721TokenBalances": []}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listErc1155Balances:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          blockNumber: "6479329"
          pageSize: "10"
          contractAddress: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
      responses:
        "200":
          application/json: {"nativeTokenBalance": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "chainId": "43114", "price": {"currencyCode": "usd", "value": "42.42"}, "balance": "2000000000000000000", "balanceValue": {"currencyCode": "usd", "value": "42.42"}}, "erc1155TokenBalances": [{"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://apt-hose.info", "metadata": {"indexStatus": "MISSING_TOKEN"}, "chainId": "43114", "balance": "2000000000000000000"}, {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://downright-trash.info", "metadata": {"indexStatus": "UNREACHABLE_TOKEN_URI"}, "chainId": "43114", "balance": "2000000000000000000"}]}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listCollectibleBalances:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          pageSize: "10"
          contractAddress: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
      responses:
        "200":
          application/json: {"collectibleBalances": [{"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://subdued-cook.biz/", "metadata": {"indexStatus": "UNKNOWN"}, "chainId": "43114", "balance": "2000000000000000000"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listContractDeployments:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"contracts": []}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listTransactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          pageSize: "10"
          startBlock: "6479329"
          endBlock: "6479330"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"transactions": [{"nativeTransaction": {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CALL", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, "erc20Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 1777.06, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 2297.16, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 1528.37, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}], "erc721Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 6393.87, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://secret-bob.com/", "metadata": {"indexStatus": "INVALID_METADATA"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 5098.83, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://acidic-avalanche.info", "metadata": {"indexStatus": "THROTTLED_TOKEN_URI"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}], "erc1155Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 9311.65, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://ugly-jungle.com", "metadata": {"indexStatus": "INVALID_TOKEN_URI_SCHEME"}}}], "internalTransactions": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "UNKNOWN", "value": "10000000000000000000", "isReverted": false, "gasUsed": "<value>", "gasLimit": "<value>"}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "CREATE", "value": "10000000000000000000", "isReverted": false, "gasUsed": "<value>", "gasLimit": "<value>"}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "CALL", "value": "10000000000000000000", "isReverted": true, "gasUsed": "<value>", "gasLimit": "<value>"}]}, {"nativeTransaction": {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CREATION", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, "erc20Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 4602.76, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}], "erc721Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 4329.3, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://careless-lid.org/", "metadata": {"indexStatus": "UNREACHABLE_TOKEN_URI"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 8634.66, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://imaginative-cap.biz/", "metadata": {"indexStatus": "UNINDEXED"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}], "erc1155Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 6281.06, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://urban-blossom.net", "metadata": {"indexStatus": "METADATA_CONTENT_TOO_LARGE"}}}], "internalTransactions": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "DELEGATECALL", "value": "10000000000000000000", "isReverted": false, "gasUsed": "<value>", "gasLimit": "<value>"}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "UNKNOWN", "value": "10000000000000000000", "isReverted": true, "gasUsed": "<value>", "gasLimit": "<value>"}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "UNKNOWN", "value": "10000000000000000000", "isReverted": false, "gasUsed": "<value>", "gasLimit": "<value>"}]}, {"nativeTransaction": {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CREATION", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, "erc20Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 6640.8, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}], "erc721Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 7814.09, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://biodegradable-bandwidth.biz", "metadata": {"indexStatus": "UNINDEXED"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}], "erc1155Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 2589.45, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://bustling-plastic.info/", "metadata": {"indexStatus": "UNKNOWN"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 8107.7, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://sour-labourer.org", "metadata": {"indexStatus": "INDEXED"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 206.15, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://yellowish-quit.net/", "metadata": {"indexStatus": "UNREACHABLE_TOKEN_URI"}}}], "internalTransactions": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "CALLCODE", "value": "10000000000000000000", "isReverted": false, "gasUsed": "<value>", "gasLimit": "<value>"}]}]}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listNativeTransactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": []}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listErc20Transactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listErc721Transactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": []}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listErc1155Transactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": [{"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 7039.59, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://intrepid-impact.com/", "metadata": {"indexStatus": "UNINDEXED"}}}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 2047.13, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://happy-go-lucky-haircut.net", "metadata": {"indexStatus": "INVALID_METADATA_JSON"}}}]}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listInternalTransactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": [{"from": "0x737F6b0b8A04e8462d0fC7076451298F0dA9a972", "to": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7", "internalTxType": "call", "value": "50000000000000000", "gasUsed": "44038", "gasLimit": "50000", "transactionHash": "0xfd91150d236ec5c3b1ee325781affad5b0b4d7eb0187c84c220ab115eaa563e8"}]}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listLatestTransactionsAllChains:
    "":
      parameters:
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"transactions": [{"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CALL", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getTransaction:
    "":
      parameters:
        path:
          chainId: "43114"
          txHash: "0x8bf584d7b14b92a32a339872a66b134a70ba3ba7c305823f348db6f860253f45"
      responses:
        "200":
          application/json: {"erc20Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 5588.34, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 5442.21, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 5212.35, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}], "erc721Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 4580.49, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://fatal-custom.org/", "metadata": {"indexStatus": "UNREACHABLE_TOKEN_URI"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 8013.73, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://elderly-extent.com/", "metadata": {"indexStatus": "METADATA_CONTENT_TOO_LARGE"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 8058.76, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://similar-nucleotidase.name/", "metadata": {"indexStatus": "INVALID_TOKEN_URI_SCHEME"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}], "erc1155Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 1773.75, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://sparse-edge.net/", "metadata": {"indexStatus": "INVALID_METADATA_JSON"}}}], "internalTransactions": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "STATICCALL", "value": "10000000000000000000", "isReverted": true, "gasUsed": "<value>", "gasLimit": "<value>"}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "UNKNOWN", "value": "10000000000000000000", "isReverted": false, "gasUsed": "<value>", "gasLimit": "<value>"}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "CREATE2", "value": "10000000000000000000", "isReverted": true, "gasUsed": "<value>", "gasLimit": "<value>"}], "networkTokenDetails": {"networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}, "currentPrice": {"currencyCode": "usd", "value": "42.42"}, "historicalPrice": {"currencyCode": "usd", "value": "42.42"}}, "nativeTransaction": {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "NATIVE_TRANSFER", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000", "input": "<value>", "baseFeePerGas": "<value>"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listLatestTransactions:
    "":
      parameters:
        path:
          chainId: "43114"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": [{"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "NATIVE_TRANSFER", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "NATIVE_TRANSFER", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CALL", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listLatestBlocksAllChains:
    "":
      parameters:
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"blocks": [{"chainId": "43114", "blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txCount": 5353.98, "baseFee": "<value>", "gasUsed": "<value>", "gasLimit": "<value>", "gasCost": "<value>", "parentHash": "<value>", "feesSpent": "<value>", "cumulativeTransactions": "<value>"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getLatestBlocks:
    "":
      parameters:
        path:
          chainId: "43114"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"blocks": [{"chainId": "43114", "blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txCount": 1835.83, "baseFee": "<value>", "gasUsed": "<value>", "gasLimit": "<value>", "gasCost": "<value>", "parentHash": "<value>", "feesSpent": "<value>", "cumulativeTransactions": "<value>"}, {"chainId": "43114", "blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txCount": 2625.7, "baseFee": "<value>", "gasUsed": "<value>", "gasLimit": "<value>", "gasCost": "<value>", "parentHash": "<value>", "feesSpent": "<value>", "cumulativeTransactions": "<value>"}, {"chainId": "43114", "blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txCount": 4514.54, "baseFee": "<value>", "gasUsed": "<value>", "gasLimit": "<value>", "gasCost": "<value>", "parentHash": "<value>", "feesSpent": "<value>", "cumulativeTransactions": "<value>"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getBlock:
    "":
      parameters:
        path:
          chainId: "43114"
          blockId: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
      responses:
        "200":
          application/json: {"chainId": "43114", "blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txCount": 7003.47, "baseFee": "<value>", "gasUsed": "<value>", "gasLimit": "<value>", "gasCost": "<value>", "parentHash": "<value>", "feesSpent": "<value>", "cumulativeTransactions": "<value>"}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getTransactionsForBlock:
    "":
      parameters:
        path:
          chainId: "43114"
          blockId: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": [{"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CALL", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "NATIVE_TRANSFER", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}]}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getDeploymentTransaction:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
        query:
          currency: "usd"
      responses:
        "200":
          application/json: {"erc20Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 5089.42, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 7389.4, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}], "erc721Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 7983.11, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://natural-hope.org", "metadata": {"indexStatus": "UNINDEXED"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 4359.82, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://creamy-begonia.org/", "metadata": {"indexStatus": "UNKNOWN"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}], "erc1155Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 4915.47, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://peaceful-final.biz/", "metadata": {"indexStatus": "UNREACHABLE_TOKEN_URI"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 5575.7, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://urban-nerve.info/", "metadata": {"indexStatus": "THROTTLED_TOKEN_URI"}}}], "internalTransactions": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "STATICCALL", "value": "10000000000000000000", "isReverted": false, "gasUsed": "<value>", "gasLimit": "<value>"}], "networkTokenDetails": {"networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}, "currentPrice": {"currencyCode": "usd", "value": "42.42"}, "historicalPrice": {"currencyCode": "usd", "value": "42.42"}}, "nativeTransaction": {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CREATION", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000", "input": "<value>", "baseFeePerGas": "<value>"}}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getContractMetadata:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
      responses:
        "200":
          application/json: {"name": "Wrapped AVAX", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "deploymentDetails": {"txHash": "<value>", "deployerAddress": "<value>"}, "ercType": "UNKNOWN"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listTransfers:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transfers": [{"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 7085.05, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://expensive-daddy.org/", "metadata": {"indexStatus": "INVALID_TOKEN_URI_SCHEME"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 4602.18, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://fixed-devil.biz", "metadata": {"indexStatus": "UNINDEXED"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  supportedChains:
    "":
      parameters:
        query:
          network: "mainnet"
          feature: "nftIndexing"
      responses:
        "200":
          application/json: {"chains": [{"chainId": "<id>", "status": "UNAVAILABLE", "chainName": "<value>", "description": "mmm avalanche jungle unto meanwhile beside tromp worth", "vmName": "EVM", "rpcUrl": "https://blind-spear.net/", "isTestnet": true, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}, {"chainId": "<id>", "status": "UNAVAILABLE", "chainName": "<value>", "description": "when uh-huh madly unless brightly", "vmName": "EVM", "rpcUrl": "https://writhing-hexagon.info", "isTestnet": true, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}, {"chainId": "<id>", "status": "OK", "chainName": "<value>", "description": "commonly softly boo massive sorrowful aw strict behind along energetic", "vmName": "EVM", "rpcUrl": "https://pricey-median.org", "isTestnet": false, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}]}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getChainInfo:
    "":
      parameters:
        path:
          chainId: "43114"
      responses:
        "200":
          application/json: {"chainId": "<id>", "status": "UNAVAILABLE", "chainName": "<value>", "description": "for carefully glorious scrabble ignite aw showboat", "vmName": "BITCOIN", "rpcUrl": "https://oily-nougat.net", "isTestnet": true, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getAddressChains:
    "":
      parameters:
        path:
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
      responses:
        "200":
          application/json: {"indexedChains": [{"chainId": "<id>", "status": "OK", "chainName": "<value>", "description": "fashion anti gracious although gadzooks huzzah settler uselessly reflate", "vmName": "ETHEREUM", "rpcUrl": "https://equatorial-sandbar.com", "isTestnet": false, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}, {"chainId": "<id>", "status": "UNAVAILABLE", "chainName": "<value>", "description": "outside airline consequently lady mostly gosh duh excluding", "vmName": "ETHEREUM", "rpcUrl": "https://whirlwind-co-producer.name", "isTestnet": false, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}, {"chainId": "<id>", "status": "OK", "chainName": "<value>", "description": "yuck quicker excluding", "vmName": "EVM", "rpcUrl": "https://smart-foodstuffs.net/", "isTestnet": false, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listAllLatestTransactions:
    "":
      parameters:
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"transactions": [{"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "NATIVE_TRANSFER", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CREATION", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "NATIVE_TRANSFER", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listAllLatestBlocks:
    "":
      parameters:
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"blocks": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  reindexNft:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
          tokenId: "145"
      responses:
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listTokens:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"tokens": [{"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://definite-deer.com", "metadata": {"indexStatus": "METADATA_CONTENT_TOO_LARGE"}}, {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://secret-bob.com/", "metadata": {"indexStatus": "INVALID_METADATA"}}, {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://acidic-avalanche.info", "metadata": {"indexStatus": "THROTTLED_TOKEN_URI"}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getTokenDetails:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
          tokenId: "145"
      responses:
        "200":
          application/json: {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://necessary-lender.org", "metadata": {"indexStatus": "THROTTLED_TOKEN_URI"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getOperationResult:
    "":
      parameters:
        path:
          operationId: "aa22054a-cb7c-4a4e-9b83-59f2ede74138"
      responses:
        "200":
          application/json: {"operationId": "<id>", "operationType": "TRANSACTION_EXPORT_PRIMARY_NETWORK_STAKING", "operationStatus": "FAILED", "createdAtTimestamp": 1702.82, "updatedAtTimestamp": 1963.29}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  postTransactionExportJob:
    speakeasy-default-post-transaction-export-job:
      requestBody:
        application/json: {"type": "TRANSACTION_EXPORT_EVM", "firstDate": "2023-05-01", "lastDate": "2023-05-02", "options": {"addresses": [], "includeChains": ["43114"]}}
      responses:
        "201":
          application/json: {"operationId": "<id>", "operationType": "TRANSACTION_EXPORT_PRIMARY_NETWORK_SIMPLE", "operationStatus": "COMPLETED_WITH_WARNING", "createdAtTimestamp": 8029.22, "updatedAtTimestamp": 1263.71}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getAssetDetails:
    "":
      parameters:
        path:
          blockchainId: "x-chain"
          network: "mainnet"
          assetId: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
      responses:
        "200":
          application/json: {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "createdAtTimestamp": 1675444720, "cap": "variable"}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getChainIdsForAddresses:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
      responses:
        "200":
          application/json: {"addresses": [{"address": "10994 The Ridings", "blockchainIds": []}, {"address": "3561 Smith Ramp", "blockchainIds": ["2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm", "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5"]}]}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getNetworkDetails:
    "":
      parameters:
        path:
          network: "mainnet"
      responses:
        "200":
          application/json: {"validatorDetails": {"validatorCount": 2213.22, "totalAmountStaked": "<value>", "estimatedAnnualStakingReward": "<value>", "stakingDistributionByVersion": [{"version": "<value>", "amountStaked": "<value>", "validatorCount": 5616.35}, {"version": "<value>", "amountStaked": "<value>", "validatorCount": 2106.35}], "stakingRatio": "<value>"}, "delegatorDetails": {"delegatorCount": 9664.7, "totalAmountStaked": "<value>"}}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listBlockchains:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"blockchains": [{"createBlockTimestamp": 7392.07, "createBlockNumber": "<value>", "blockchainId": "<id>", "vmId": "<id>", "subnetId": "<id>", "blockchainName": "<value>"}, {"createBlockTimestamp": 9745.04, "createBlockNumber": "<value>", "blockchainId": "<id>", "vmId": "<id>", "subnetId": "<id>", "blockchainName": "<value>"}, {"createBlockTimestamp": 2959.85, "createBlockNumber": "<value>", "blockchainId": "<id>", "vmId": "<id>", "subnetId": "<id>", "blockchainName": "<value>"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getBlockchainById:
    "":
      parameters:
        path:
          blockchainId: "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5"
          network: "mainnet"
      responses:
        "200":
          application/json: {"createBlockTimestamp": 8742.71, "createBlockNumber": "<value>", "blockchainId": "<id>", "vmId": "<id>", "subnetId": "<id>", "blockchainName": "<value>"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listSubnets:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"subnets": [{"createBlockTimestamp": 7748.04, "createBlockIndex": "<value>", "subnetId": "<id>", "ownerAddresses": ["<value>"], "threshold": 3220.06, "locktime": 5584.58, "subnetOwnershipInfo": {"locktime": 0, "threshold": 1, "addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"]}, "isL1": true, "blockchains": []}]}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getSubnetById:
    "":
      parameters:
        path:
          network: "mainnet"
          subnetId: "11111111111111111111111111111111LpoYY"
      responses:
        "200":
          application/json: {"createBlockTimestamp": 6811.96, "createBlockIndex": "<value>", "subnetId": "<id>", "ownerAddresses": ["<value>", "<value>", "<value>"], "threshold": 8549.3, "locktime": 8471.28, "subnetOwnershipInfo": {"locktime": 0, "threshold": 1, "addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"]}, "isL1": true, "blockchains": [{"createBlockTimestamp": 933.74, "createBlockNumber": "<value>", "blockchainId": "<id>", "vmId": "<id>", "subnetId": "<id>", "blockchainName": "<value>"}]}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listValidators:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
          sortOrder: "asc"
          validationStatus: "completed"
          minDelegationCapacity: "0"
          maxDelegationCapacity: "720000000000000000"
          minTimeRemaining: 0
          maxTimeRemaining: 2147483647
          minFeePercentage: 2
          maxFeePercentage: 100
          minUptimePerformance: 90
          maxUptimePerformance: 100
          subnetId: "11111111111111111111111111111111LpoYY"
      responses:
        "200":
          application/json: {"validators": [{"txHash": "<value>", "nodeId": "<id>", "subnetId": "<id>", "amountStaked": "<value>", "startTimestamp": 6021.38, "endTimestamp": 7056.56, "removeTxHash": "<value>", "removeTimestamp": 5533.94, "validationStatus": "removed"}, {"txHash": "<value>", "nodeId": "<id>", "subnetId": "<id>", "amountStaked": "<value>", "startTimestamp": 8450.08, "endTimestamp": 6119.19, "delegatorCount": 7703.63, "rewards": {"validationRewardAmount": "<value>", "delegationRewardAmount": "<value>"}, "validationStatus": "completed"}, {"txHash": "<value>", "nodeId": "<id>", "subnetId": "<id>", "amountStaked": "<value>", "startTimestamp": 2663.72, "endTimestamp": 6896.76, "delegatorCount": 6942.01, "rewards": {"validationRewardAmount": "<value>", "delegationRewardAmount": "<value>"}, "validationStatus": "completed"}]}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getSingleValidatorDetails:
    "":
      parameters:
        path:
          network: "mainnet"
          nodeId: "NodeID-111111111111111111116DBWJs"
        query:
          pageSize: "10"
          validationStatus: "completed"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"validators": [{"txHash": "<value>", "nodeId": "<id>", "subnetId": "<id>", "amountStaked": "<value>", "startTimestamp": 4371.44, "endTimestamp": 4032.47, "stakePercentage": 9661.06, "delegatorCount": 9526.46, "uptimePerformance": 5958.44, "potentialRewards": {"validationRewardAmount": "<value>", "delegationRewardAmount": "<value>"}, "validationStatus": "active", "validatorHealth": {"reachabilityPercent": 4970.62, "benchedPChainRequestsPercent": 6983.86, "benchedXChainRequestsPercent": 1405.1, "benchedCChainRequestsPercent": 3053.74}, "geolocation": {"city": "Lake Evan", "country": "Christmas Island", "countryCode": "BN", "latitude": 1941.31, "longitude": 5789.4}}, {"txHash": "<value>", "nodeId": "<id>", "subnetId": "<id>", "amountStaked": "<value>", "startTimestamp": 8562.41, "endTimestamp": 3569.74, "validationStatus": "pending"}]}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listDelegators:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          rewardAddresses: "P-avax1679zrp3z9mf7z4an42ddq47qzj36zv6ga20vwl,P-avax1s7kd0kfndlz6mh3l0etrrcmkg5y366k8e0s6cc"
          sortOrder: "asc"
          delegationStatus: "completed"
          nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
      responses:
        "200":
          application/json: {"delegators": [{"txHash": "<value>", "nodeId": "<id>", "rewardAddresses": ["<value>"], "amountDelegated": "<value>", "delegationFee": "<value>", "startTimestamp": 55.71, "endTimestamp": 8066.64, "estimatedGrossReward": "<value>", "estimatedNetReward": "<value>", "delegationStatus": "pending"}, {"txHash": "<value>", "nodeId": "<id>", "rewardAddresses": ["<value>", "<value>", "<value>"], "amountDelegated": "<value>", "delegationFee": "<value>", "startTimestamp": 7414.91, "endTimestamp": 6169.36, "grossReward": "<value>", "netReward": "<value>", "delegationStatus": "completed"}, {"txHash": "<value>", "nodeId": "<id>", "rewardAddresses": ["<value>", "<value>", "<value>"], "amountDelegated": "<value>", "delegationFee": "<value>", "startTimestamp": 452.13, "endTimestamp": 8219.55, "estimatedGrossReward": "<value>", "estimatedNetReward": "<value>", "delegationStatus": "active"}]}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listL1Validators:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          l1ValidationId: "BsSpTd1SDvdhaoYAuKJvRj1WnoRyu8mAuMZeuz9g7brGj6KhX"
          nodeId: "NodeID-111111111111111111116DBWJs"
          subnetId: "11111111111111111111111111111111LpoYY"
      responses:
        "200":
          application/json: {"validators": [{"validationId": "<id>", "validationIdHex": "<value>", "nodeId": "<id>", "subnetId": "<id>", "weight": 4613.88, "remainingBalance": 241.42, "creationTimestamp": 8967.16, "blsCredentials": {}, "remainingBalanceOwner": {"addresses": ["<value>", "<value>", "<value>"], "threshold": 1448.52}, "deactivationOwner": {"addresses": ["<value>", "<value>"], "threshold": 7781.19}}, {"validationId": "<id>", "validationIdHex": "<value>", "nodeId": "<id>", "subnetId": "<id>", "weight": 9294.85, "remainingBalance": 4685.26, "creationTimestamp": 3021.81, "blsCredentials": {}, "remainingBalanceOwner": {"addresses": ["<value>", "<value>"], "threshold": 5391.48}, "deactivationOwner": {"addresses": ["<value>", "<value>", "<value>"], "threshold": 4292.21}}, {"validationId": "<id>", "validationIdHex": "<value>", "nodeId": "<id>", "subnetId": "<id>", "weight": 3443.46, "remainingBalance": 474.49, "creationTimestamp": 8071.57, "blsCredentials": {}, "remainingBalanceOwner": {"addresses": [], "threshold": 8584.2}, "deactivationOwner": {"addresses": [], "threshold": 7094.65}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getTxByHash:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
          txHash: "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP"
      responses:
        "200":
          application/json: {"txHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "blockHeight": 1005, "blockHash": "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee", "timestamp": 1600762738, "memo": "0x546865204176616c616e6368652050726f6a656374", "amountUnlocked": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}], "amountCreated": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}], "sourceChain": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "destinationChain": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "txType": "ExportTx", "evmInputs": [], "emittedUtxos": [{"addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"], "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}, "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC", "consumingTxTimestamp": 1599696000, "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z", "credentials": [{"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}, {"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}, {"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}], "locktime": 0, "outputIndex": "38", "threshold": 1, "timestamp": 1599696000, "utxoType": "mint"}, {"addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"], "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}, "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC", "consumingTxTimestamp": 1599696000, "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z", "credentials": [{"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}], "locktime": 0, "outputIndex": "38", "threshold": 1, "timestamp": 1599696000, "utxoType": "mint"}, {"addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"], "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}, "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC", "consumingTxTimestamp": 1599696000, "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z", "credentials": [{"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}], "locktime": 0, "outputIndex": "38", "threshold": 1, "timestamp": 1599696000, "utxoType": "mint"}]}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listLatestPrimaryNetworkTransactions:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          txTypes: ["AddValidatorTx"]
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"transactions": [], "chainInfo": {"chainName": "p-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listActivePrimaryNetworkStakingTransactions:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          txTypes: ["AddValidatorTx"]
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"transactions": [{"txHash": "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP", "txType": "AddSubnetValidatorTx", "blockTimestamp": 1648672486, "blockNumber": "<value>", "blockHash": "<value>", "consumedUtxos": [{"addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"], "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}, "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC", "amount": "175.27", "assetId": "<id>", "blockNumber": "<value>", "blockTimestamp": 2150.99, "outputIndex": 7548.01, "txHash": "<value>", "utxoType": "STAKE"}], "emittedUtxos": [{"addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"], "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}, "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC", "amount": "529.77", "assetId": "<id>", "blockNumber": "<value>", "blockTimestamp": 1064.87, "outputIndex": 9095.65, "txHash": "<value>", "utxoType": "TRANSFER"}], "sourceChain": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "destinationChain": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "value": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}], "amountBurned": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}], "amountStaked": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}], "amountL1ValidatorBalanceBurned": [], "subnetOwnershipInfo": {"locktime": 0, "threshold": 1, "addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"]}}], "chainInfo": {"chainName": "x-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listAssetTransactions:
    "":
      parameters:
        path:
          blockchainId: "x-chain"
          network: "mainnet"
          assetId: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
        query:
          txTypes: ["AddValidatorTx"]
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": [], "chainInfo": {"chainName": "x-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listPendingPrimaryNetworkRewards:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          pageSize: "10"
          nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"pendingRewards": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listHistoricalPrimaryNetworkRewards:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          pageSize: "10"
          nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
          sortOrder: "asc"
          currency: "usd"
      responses:
        "200":
          application/json: {"historicalRewards": [{"addresses": ["avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"], "txHash": "<value>", "amountStaked": "<value>", "nodeId": "<id>", "startTimestamp": 4737.56, "endTimestamp": 9520.59, "rewardType": "VALIDATOR_FEE", "utxoId": "<id>", "outputIndex": 4643.33, "reward": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000", "historicalPrice": {"currencyCode": "usd", "value": "42.42"}}, "rewardTxHash": "<value>"}, {"addresses": ["avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"], "txHash": "<value>", "amountStaked": "<value>", "nodeId": "<id>", "startTimestamp": 5461.5, "endTimestamp": 2956.68, "rewardType": "VALIDATOR", "utxoId": "<id>", "outputIndex": 9712.12, "reward": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000", "historicalPrice": {"currencyCode": "usd", "value": "42.42"}}, "rewardTxHash": "<value>"}, {"addresses": ["avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"], "txHash": "<value>", "amountStaked": "<value>", "nodeId": "<id>", "startTimestamp": 8694.27, "endTimestamp": 422.9, "rewardType": "VALIDATOR_FEE", "utxoId": "<id>", "outputIndex": 8976.34, "reward": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000", "historicalPrice": {"currencyCode": "usd", "value": "42.42"}}, "rewardTxHash": "<value>"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getUtxosByAddresses:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"utxos": [{"addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"], "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}, "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC", "consumingTxTimestamp": 1599696000, "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z", "credentials": [{"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}, {"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}, {"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}], "locktime": 0, "outputIndex": "38", "threshold": 1, "timestamp": 1599696000, "utxoType": "mint"}, {"addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"], "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}, "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC", "consumingTxTimestamp": 1599696000, "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z", "credentials": [{"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}], "locktime": 0, "outputIndex": "38", "threshold": 1, "timestamp": 1599696000, "utxoType": "mint"}, {"addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"], "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}, "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC", "consumingTxTimestamp": 1599696000, "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z", "credentials": [{"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}], "locktime": 0, "outputIndex": "38", "threshold": 1, "timestamp": 1599696000, "utxoType": "mint"}], "chainInfo": {"chainName": "x-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getBalancesByAddresses:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          blockTimestamp: "1599696000"
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
      responses:
        "200":
          application/json: {"balances": {"atomicMemoryUnlocked": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000", "utxoCount": 1, "sharedWithChainId": "<id>"}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000", "utxoCount": 1, "sharedWithChainId": "<id>"}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000", "utxoCount": 1, "sharedWithChainId": "<id>"}], "atomicMemoryLocked": []}, "chainInfo": {"chainName": "x-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getBlockById:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
          blockId: "5615di9ytxujackzaXNrVuWQy5y8Yrt8chPCscMr5Ku9YxJ1S"
      responses:
        "200":
          application/json: {"blockNumber": "<value>", "blockHash": "<value>", "parentHash": "<value>", "blockTimestamp": 7003.47, "blockType": "<value>", "txCount": 5588.34, "transactions": ["<value>", "<value>"], "blockSizeBytes": 5212.35}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listPrimaryNetworkBlocksByNodeId:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
          nodeId: "NodeID-111111111111111111116DBWJs"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
      responses:
        "200":
          application/json: {"blocks": [{"blockNumber": "<value>", "blockHash": "<value>", "parentHash": "<value>", "blockTimestamp": 9133.68, "blockType": "<value>", "txCount": 2676.64, "transactions": ["<value>", "<value>", "<value>"], "blockSizeBytes": 7708.07}, {"blockNumber": "<value>", "blockHash": "<value>", "parentHash": "<value>", "blockTimestamp": 7316.78, "blockType": "<value>", "txCount": 1370.01, "transactions": ["<value>"], "blockSizeBytes": 5418.69}], "chainInfo": {"chainName": "p-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listLatestPrimaryNetworkBlocks:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
      responses:
        "200":
          application/json: {"blocks": [{"blockNumber": "<value>", "blockHash": "<value>", "parentHash": "<value>", "blockTimestamp": 1835.83, "blockType": "<value>", "txCount": 2625.7, "transactions": ["<value>"], "blockSizeBytes": 3586.24}, {"blockNumber": "<value>", "blockHash": "<value>", "parentHash": "<value>", "blockTimestamp": 7751.36, "blockType": "<value>", "txCount": 7652.17, "transactions": [], "blockSizeBytes": 1971.97}, {"blockNumber": "<value>", "blockHash": "<value>", "parentHash": "<value>", "blockTimestamp": 6722.45, "blockType": "<value>", "txCount": 1779.79, "transactions": ["<value>"], "blockSizeBytes": 8241.57}], "chainInfo": {"chainName": "p-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listLatestXChainVertices:
    "":
      parameters:
        path:
          blockchainId: "x-chain"
          network: "mainnet"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"vertices": [{"vertexHash": "<value>", "parentHashes": [], "vertexHeight": 2625.7, "vertexIndex": 4514.54, "vertexTimestamp": 3586.24, "txCount": 7751.36, "transactions": ["<value>", "<value>", "<value>"], "vertexSizeBytes": 2082.64}, {"vertexHash": "<value>", "parentHashes": [], "vertexHeight": 6722.45, "vertexIndex": 1779.79, "vertexTimestamp": 3498.08, "txCount": 8241.57, "transactions": [], "vertexSizeBytes": 6757.56}, {"vertexHash": "<value>", "parentHashes": ["<value>"], "vertexHeight": 1336.26, "vertexIndex": 2957.45, "vertexTimestamp": 9417.85, "txCount": 4315.08, "transactions": ["<value>", "<value>", "<value>"], "vertexSizeBytes": 8541.11}], "chainInfo": {"chainName": "x-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getVertexByHash:
    "":
      parameters:
        path:
          vertexHash: "haP1CW56cspZY7aEuqHNrtpvhqCaMTxQaYe6j5u2Mbn4L2Gqr"
          blockchainId: "x-chain"
          network: "mainnet"
      responses:
        "200":
          application/json: {"vertexHash": "<value>", "parentHashes": [], "vertexHeight": 2504.33, "vertexIndex": 1544.78, "vertexTimestamp": 3322.29, "txCount": 9627.86, "transactions": ["<value>", "<value>", "<value>"], "vertexSizeBytes": 3665.63}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getVertexByHeight:
    "":
      parameters:
        path:
          blockchainId: "x-chain"
          network: "mainnet"
        query:
          vertexHeight: 123
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"vertices": [{"vertexHash": "<value>", "parentHashes": ["<value>"], "vertexHeight": 6362.86, "vertexIndex": 8996.91, "vertexTimestamp": 4745.94, "txCount": 3387.45, "transactions": ["<value>"], "vertexSizeBytes": 6692.11}], "chainInfo": {"chainName": "c-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getTeleporterMessage:
    "":
      parameters:
        path:
          messageId: "acf1c8b06f9aec48e9fcbefbbe576ae8a7ca3b327fcae111396e7cc99956674d"
      responses:
        "200":
          application/json: {"messageId": "<id>", "teleporterContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": false, "receipts": [], "receiptDelivered": true, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 2600.32, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered_source_not_indexed"}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listTeleporterMessages:
    "":
      parameters:
        query:
          pageSize: "10"
          sourceBlockchainId: "2D8RG4UpSXbPbvPCAWppNJyqTG2i2CAXSkTgmTBBvs7GKNZjsY"
          destinationBlockchainId: "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp"
          to: "0x664A4Be5Af2cFc824F9C0914CbAc4703396Da2DC"
          from: "0x321eDA69247566D662178feE695C7026c604Cd94"
          network: "mainnet"
      responses:
        "200":
          application/json: {"messages": [{"messageId": "<id>", "teleporterContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": false, "receipts": [], "receiptDelivered": false, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 9951.4, "gasSpent": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 6155.66, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered"}, {"messageId": "<id>", "teleporterContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": true, "receipts": [{"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}, {"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}], "receiptDelivered": false, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 2532.53, "gasSpent": "<value>"}, "status": "pending"}]}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listTeleporterMessagesByAddress:
    "":
      parameters:
        path:
          address: "0x8578AE7723751446B196bD5124e1bF57B40EB7Bc"
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"messages": [{"messageId": "<id>", "teleporterContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": true, "receipts": [{"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}], "receiptDelivered": false, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 4201.1, "gasSpent": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 3622.93, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered"}]}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getIcmMessage:
    "":
      parameters:
        path:
          messageId: "acf1c8b06f9aec48e9fcbefbbe576ae8a7ca3b327fcae111396e7cc99956674d"
      responses:
        "200":
          application/json: {"messageId": "<id>", "icmContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": false, "receipts": [{"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}, {"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}], "receiptDelivered": false, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 9699.61, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered_source_not_indexed"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listIcmMessages:
    "":
      parameters:
        query:
          pageSize: "10"
          sourceBlockchainId: "2D8RG4UpSXbPbvPCAWppNJyqTG2i2CAXSkTgmTBBvs7GKNZjsY"
          destinationBlockchainId: "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp"
          to: "0x664A4Be5Af2cFc824F9C0914CbAc4703396Da2DC"
          from: "0x321eDA69247566D662178feE695C7026c604Cd94"
          network: "mainnet"
      responses:
        "200":
          application/json: {"messages": [{"messageId": "<id>", "icmContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": false, "receipts": [], "receiptDelivered": true, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 1528.37, "gasSpent": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 6355.32, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered"}, {"messageId": "<id>", "icmContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": true, "receipts": [{"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}, {"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}], "receiptDelivered": true, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 685.04, "gasSpent": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 6879.6, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered"}, {"messageId": "<id>", "icmContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": false, "receipts": [], "receiptDelivered": true, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 3677.45, "gasSpent": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 4857.29, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listIcmMessagesByAddress:
    "":
      parameters:
        path:
          address: "0x8578AE7723751446B196bD5124e1bF57B40EB7Bc"
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"messages": [{"messageId": "<id>", "icmContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": false, "receipts": [{"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}, {"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}], "receiptDelivered": true, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 6953.13, "gasSpent": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 3692.52, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered"}, {"messageId": "<id>", "icmContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": true, "receipts": [{"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}, {"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}], "receiptDelivered": false, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 4062.65, "gasSpent": "<value>"}, "status": "pending"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getApiUsageMetrics:
    "":
      parameters:
        query:
          startTimestamp: 1739507200
          endTimestamp: 1739664000
          timeInterval: "daily"
          groupBy: "requestPath"
      responses:
        "200":
          application/json: {"aggregateDuration": "<value>", "orgId": "<id>", "metrics": []}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getApiLogs:
    "":
      parameters:
        query:
          startTimestamp: 1739507200
          endTimestamp: 1739664000
          pageSize: 10
      responses:
        "200":
          application/json: {"orgId": "<id>", "logs": [{"orgId": "<id>", "logId": "<id>", "eventTimestamp": 1164.37, "apiKeyId": "<id>", "apiKeyAlias": "<value>", "hostRegion": "<value>", "requestType": "rpc", "requestPath": "<value>", "apiCreditsConsumed": 4739.74, "requestDurationMsecs": 4837.62, "responseCode": 3245.83, "metadata": {"ipAddress": "0fbf:cac8:efb1:d97a:c849:681a:e551:08ee", "host": "rowdy-taxicab.biz", "userAgent": "<value>"}}, {"orgId": "<id>", "logId": "<id>", "eventTimestamp": 4329.21, "apiKeyId": "<id>", "apiKeyAlias": "<value>", "hostRegion": "<value>", "requestType": "rpc", "requestPath": "<value>", "apiCreditsConsumed": 6126.66, "requestDurationMsecs": 8593.18, "responseCode": 6571.1, "metadata": {"ipAddress": "51.169.169.123", "host": "calculating-soybean.com", "userAgent": "<value>"}}]}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getSubnetRpcUsageMetrics:
    "":
      parameters:
        query:
          timeInterval: "daily"
          startTimestamp: 1739507200
          endTimestamp: 1739664000
          groupBy: "rpcMethod"
      responses:
        "200":
          application/json: {"aggregateDuration": "<value>", "metrics": [{"timestamp": 3279.76, "values": [{"totalRequests": 7661.11, "apiCreditsUsed": 1995.92, "requestsPerSecond": 524.1, "successRatePercent": 9243.43, "medianResponseTimeMsecs": 2165.77, "invalidRequests": 2013.42, "apiCreditsWasted": 3616.11, "groupedBy": "requestPath"}]}, {"timestamp": 4740.72, "values": []}, {"timestamp": 6345.73, "values": [{"totalRequests": 8744.71, "apiCreditsUsed": 3717.82, "requestsPerSecond": 964.41, "successRatePercent": 3687.24, "medianResponseTimeMsecs": 4365.25, "invalidRequests": 3279.62, "apiCreditsWasted": 8776.91, "groupedBy": "userAgent"}, {"totalRequests": 7483.78, "apiCreditsUsed": 1615.37, "requestsPerSecond": 487.14, "successRatePercent": 4881.39, "medianResponseTimeMsecs": 1552.83, "invalidRequests": 5326.4, "apiCreditsWasted": 9650.03, "groupedBy": "rlBypassToken"}]}], "chainId": "<id>"}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getRpcUsageMetrics:
    "":
      parameters:
        query:
          timeInterval: "daily"
          startTimestamp: 1739507200
          endTimestamp: 1739664000
          groupBy: "rpcMethod"
      responses:
        "200":
          application/json: {"aggregateDuration": "<value>", "metrics": [{"timestamp": 507.42, "values": []}], "chainId": "<id>"}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  aggregateSignatures:
    "":
      parameters:
        path:
          network: "mainnet"
      requestBody:
        application/json: {"message": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003cc0000000000059f3be606497285d0ffbb5ac9ba24aa60346a9b1812479ed66cb329f394a4b1c7000003a200000000000100000014253b2784c75e510dd0ff1da844684a1ac0aa5fcf00000380000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001150000000000000000000000008578ae7723751446b196bd5124e1bf57b40eb7bc7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d50000000000000000000000009660ed66aef60dfba5467afe865f612edbfb5c710000000000000000000000000000000000000000000000000000000000014c080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000011a00000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011a20000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011b50000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e80000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e90000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000001c07f66981b45056e5024eb6d51f9f30aa0d28fd00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000", "justification": "0001abcdabcfff", "signingSubnetId": "7WtoAMPhrmh5KosDUsFL9yTcvw7YSxiKHPpdfs4JsgW47oZT5", "quorumPercentage": 50}
      responses:
        "201":
          application/json: {"signedMessage": "0000000000059f3be606497285d0ffbb5ac9ba24aa60346a9b1812479ed66cb329f394a4b1c7000003a200000000000100000014253b2784c75e510dd0ff1da844684a1ac0aa5fcf00000380000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001150000000000000000000000008578ae7723751446b196bd5124e1bf57b40eb7bc7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d50000000000000000000000009660ed66aef60dfba5467afe865f612edbfb5c710000000000000000000000000000000000000000000000000000000000014c080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000011a00000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011a20000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011b50000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e80000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e90000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000001c07f66981b45056e5024eb6d51f9f30aa0d28fd00000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000103807355b21dd497ecc9f560dfbdefc64aeec72b226c70d3793273db01d1a0c0bfd74d095d6a9e0b4db2dc652245fd28ac032c0f1f6b7f761b912ad58c93cde2e337bef4a4e8175af69f226520cd1baedd2dd7db79bb5752cb50a465531e46e8af"}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getAggregatedSignatures:
    "":
      parameters:
        path:
          network: "mainnet"
          txHash: "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP"
      responses:
        "201":
          application/json: {"signedMessage": "0000000000059f3be606497285d0ffbb5ac9ba24aa60346a9b1812479ed66cb329f394a4b1c7000003a200000000000100000014253b2784c75e510dd0ff1da844684a1ac0aa5fcf00000380000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001150000000000000000000000008578ae7723751446b196bd5124e1bf57b40eb7bc7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d50000000000000000000000009660ed66aef60dfba5467afe865f612edbfb5c710000000000000000000000000000000000000000000000000000000000014c080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000011a00000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011a20000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011b50000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e80000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e90000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000001c07f66981b45056e5024eb6d51f9f30aa0d28fd00000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000103807355b21dd497ecc9f560dfbdefc64aeec72b226c70d3793273db01d1a0c0bfd74d095d6a9e0b4db2dc652245fd28ac032c0f1f6b7f761b912ad58c93cde2e337bef4a4e8175af69f226520cd1baedd2dd7db79bb5752cb50a465531e46e8af"}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listWebhooks:
    "":
      parameters:
        query:
          pageSize: "10"
          status: "active"
      responses:
        "200":
          application/json: {"webhooks": [{"id": "<id>", "eventType": "validator_activity", "url": "https://energetic-circumference.name/", "chainId": "<id>", "status": "inactive", "createdAt": 175.77, "name": "<value>", "description": "avalanche jungle unto meanwhile beside tromp worth reluctantly", "metadata": {"keyType": "addresses", "keys": ["<value>", "<value>", "<value>"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}}, {"id": "<id>", "eventType": "address_activity", "url": "https://free-yak.net/", "chainId": "<id>", "status": "active", "createdAt": 3242.06, "name": "<value>", "description": "memorise ruin apparatus", "metadata": {"keyType": "subnetId", "keys": ["<value>"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}}, {"id": "<id>", "eventType": "address_activity", "url": "https://wavy-window.info/", "chainId": "<id>", "status": "active", "createdAt": 4574.42, "name": "<value>", "description": "dead meh yippee stigmatize", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}}]}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  createWebhook:
    speakeasy-default-create-webhook:
      requestBody:
        application/json: {"eventType": "address_activity", "url": "https://inferior-chainstay.com", "chainId": "<id>", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}}
      responses:
        "201":
          application/json: {"id": "<id>", "eventType": "validator_activity", "url": "https://deafening-bonnet.net/", "chainId": "<id>", "status": "inactive", "createdAt": 5862.2, "name": "<value>", "description": "barracks approximate though championship kookily attend alongside aw blend", "metadata": {"keyType": "subnetId", "keys": ["<value>", "<value>", "<value>"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "platform_address_activity", "url": "https://misguided-violin.info", "chainId": "<id>", "status": "active", "createdAt": 2627.95, "name": "<value>", "description": "carefully glorious scrabble ignite", "metadata": {"keyType": "addresses", "keys": [], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  deactivateWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "address_activity", "url": "https://woeful-solvency.biz", "chainId": "<id>", "status": "active", "createdAt": 9442.07, "name": "<value>", "description": "weakly efface whether um geez victorious before", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  updateWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      requestBody:
        application/json: {}
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "platform_address_activity", "url": "https://yearly-order.info/", "chainId": "<id>", "status": "inactive", "createdAt": 540.62, "name": "<value>", "description": "eulogise whereas till mild than during meanwhile disapprove finer ha", "metadata": {"keyType": "subnetId", "keys": [], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  generateOrRotateSharedSecret:
    speakeasy-default-generate-or-rotate-shared-secret:
      responses:
        "201":
          application/json: {"secret": "<value>"}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getSharedSecret:
    speakeasy-default-get-shared-secret:
      responses:
        "200":
          application/json: {"secret": "<value>"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getAddressesFromWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"addresses": ["<value>", "<value>", "<value>"], "totalAddresses": 5472.72}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  removeAddressesFromWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      requestBody:
        application/json: {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"]}
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "validator_activity", "url": "https://jaunty-vicinity.info", "chainId": "<id>", "status": "inactive", "createdAt": 6510.92, "name": "<value>", "description": "including athwart soon plus somber minus", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  addAddressesToWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      requestBody:
        application/json: {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"]}
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "platform_address_activity", "url": "https://super-validity.name", "chainId": "<id>", "status": "inactive", "createdAt": 1724.96, "name": "<value>", "description": "silt goat till acknowledge", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
examplesVersion: 1.0.1
generatedTests: {}
