/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DeliveredTeleporterMessage,
  DeliveredTeleporterMessage$inboundSchema,
  DeliveredTeleporterMessage$Outbound,
  DeliveredTeleporterMessage$outboundSchema,
} from "./deliveredteleportermessage.js";
import {
  PendingTeleporterMessage,
  PendingTeleporterMessage$inboundSchema,
  PendingTeleporterMessage$Outbound,
  PendingTeleporterMessage$outboundSchema,
} from "./pendingteleportermessage.js";

export type ListTeleporterMessagesResponseMessage =
  | (PendingTeleporterMessage & { status: "pending" })
  | (DeliveredTeleporterMessage & { status: "delivered" });

export type ListTeleporterMessagesResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  messages: Array<
    | (PendingTeleporterMessage & { status: "pending" })
    | (DeliveredTeleporterMessage & { status: "delivered" })
  >;
};

/** @internal */
export const ListTeleporterMessagesResponseMessage$inboundSchema: z.ZodType<
  ListTeleporterMessagesResponseMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  PendingTeleporterMessage$inboundSchema.and(
    z.object({ status: z.literal("pending") }).transform((v) => ({
      status: v.status,
    })),
  ),
  DeliveredTeleporterMessage$inboundSchema.and(
    z.object({ status: z.literal("delivered") }).transform((v) => ({
      status: v.status,
    })),
  ),
]);

/** @internal */
export type ListTeleporterMessagesResponseMessage$Outbound =
  | (PendingTeleporterMessage$Outbound & { status: "pending" })
  | (DeliveredTeleporterMessage$Outbound & { status: "delivered" });

/** @internal */
export const ListTeleporterMessagesResponseMessage$outboundSchema: z.ZodType<
  ListTeleporterMessagesResponseMessage$Outbound,
  z.ZodTypeDef,
  ListTeleporterMessagesResponseMessage
> = z.union([
  PendingTeleporterMessage$outboundSchema.and(
    z.object({ status: z.literal("pending") }).transform((v) => ({
      status: v.status,
    })),
  ),
  DeliveredTeleporterMessage$outboundSchema.and(
    z.object({ status: z.literal("delivered") }).transform((v) => ({
      status: v.status,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTeleporterMessagesResponseMessage$ {
  /** @deprecated use `ListTeleporterMessagesResponseMessage$inboundSchema` instead. */
  export const inboundSchema =
    ListTeleporterMessagesResponseMessage$inboundSchema;
  /** @deprecated use `ListTeleporterMessagesResponseMessage$outboundSchema` instead. */
  export const outboundSchema =
    ListTeleporterMessagesResponseMessage$outboundSchema;
  /** @deprecated use `ListTeleporterMessagesResponseMessage$Outbound` instead. */
  export type Outbound = ListTeleporterMessagesResponseMessage$Outbound;
}

export function listTeleporterMessagesResponseMessageToJSON(
  listTeleporterMessagesResponseMessage: ListTeleporterMessagesResponseMessage,
): string {
  return JSON.stringify(
    ListTeleporterMessagesResponseMessage$outboundSchema.parse(
      listTeleporterMessagesResponseMessage,
    ),
  );
}

export function listTeleporterMessagesResponseMessageFromJSON(
  jsonString: string,
): SafeParseResult<ListTeleporterMessagesResponseMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListTeleporterMessagesResponseMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTeleporterMessagesResponseMessage' from JSON`,
  );
}

/** @internal */
export const ListTeleporterMessagesResponse$inboundSchema: z.ZodType<
  ListTeleporterMessagesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  messages: z.array(
    z.union([
      PendingTeleporterMessage$inboundSchema.and(
        z.object({ status: z.literal("pending") }).transform((v) => ({
          status: v.status,
        })),
      ),
      DeliveredTeleporterMessage$inboundSchema.and(
        z.object({ status: z.literal("delivered") }).transform((v) => ({
          status: v.status,
        })),
      ),
    ]),
  ),
});

/** @internal */
export type ListTeleporterMessagesResponse$Outbound = {
  nextPageToken?: string | undefined;
  messages: Array<
    | (PendingTeleporterMessage$Outbound & { status: "pending" })
    | (DeliveredTeleporterMessage$Outbound & { status: "delivered" })
  >;
};

/** @internal */
export const ListTeleporterMessagesResponse$outboundSchema: z.ZodType<
  ListTeleporterMessagesResponse$Outbound,
  z.ZodTypeDef,
  ListTeleporterMessagesResponse
> = z.object({
  nextPageToken: z.string().optional(),
  messages: z.array(
    z.union([
      PendingTeleporterMessage$outboundSchema.and(
        z.object({ status: z.literal("pending") }).transform((v) => ({
          status: v.status,
        })),
      ),
      DeliveredTeleporterMessage$outboundSchema.and(
        z.object({ status: z.literal("delivered") }).transform((v) => ({
          status: v.status,
        })),
      ),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTeleporterMessagesResponse$ {
  /** @deprecated use `ListTeleporterMessagesResponse$inboundSchema` instead. */
  export const inboundSchema = ListTeleporterMessagesResponse$inboundSchema;
  /** @deprecated use `ListTeleporterMessagesResponse$outboundSchema` instead. */
  export const outboundSchema = ListTeleporterMessagesResponse$outboundSchema;
  /** @deprecated use `ListTeleporterMessagesResponse$Outbound` instead. */
  export type Outbound = ListTeleporterMessagesResponse$Outbound;
}

export function listTeleporterMessagesResponseToJSON(
  listTeleporterMessagesResponse: ListTeleporterMessagesResponse,
): string {
  return JSON.stringify(
    ListTeleporterMessagesResponse$outboundSchema.parse(
      listTeleporterMessagesResponse,
    ),
  );
}

export function listTeleporterMessagesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTeleporterMessagesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTeleporterMessagesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTeleporterMessagesResponse' from JSON`,
  );
}
