/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { AvalancheError } from "./avalancheerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * The error message describing the reason for the exception
 */
export type BadRequestMessage = string | Array<string>;

export type BadRequestErrorData = {
  /**
   * The error message describing the reason for the exception
   */
  message: string | Array<string>;
  /**
   * The HTTP status code of the response
   */
  statusCode: number;
  /**
   * The type of error
   */
  error: string;
};

export class BadRequestError extends AvalancheError {
  /**
   * The type of error
   */
  error: string;

  /** The original data that was passed to this error instance. */
  data$: BadRequestErrorData;

  constructor(
    err: BadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "BadRequestError";
  }
}

/** @internal */
export const BadRequestMessage$inboundSchema: z.ZodType<
  BadRequestMessage,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type BadRequestMessage$Outbound = string | Array<string>;

/** @internal */
export const BadRequestMessage$outboundSchema: z.ZodType<
  BadRequestMessage$Outbound,
  z.ZodTypeDef,
  BadRequestMessage
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestMessage$ {
  /** @deprecated use `BadRequestMessage$inboundSchema` instead. */
  export const inboundSchema = BadRequestMessage$inboundSchema;
  /** @deprecated use `BadRequestMessage$outboundSchema` instead. */
  export const outboundSchema = BadRequestMessage$outboundSchema;
  /** @deprecated use `BadRequestMessage$Outbound` instead. */
  export type Outbound = BadRequestMessage$Outbound;
}

export function badRequestMessageToJSON(
  badRequestMessage: BadRequestMessage,
): string {
  return JSON.stringify(
    BadRequestMessage$outboundSchema.parse(badRequestMessage),
  );
}

export function badRequestMessageFromJSON(
  jsonString: string,
): SafeParseResult<BadRequestMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BadRequestMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BadRequestMessage' from JSON`,
  );
}

/** @internal */
export const BadRequestError$inboundSchema: z.ZodType<
  BadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.union([z.string(), z.array(z.string())]),
  statusCode: z.number(),
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new BadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type BadRequestError$Outbound = {
  message: string | Array<string>;
  statusCode: number;
  error: string;
};

/** @internal */
export const BadRequestError$outboundSchema: z.ZodType<
  BadRequestError$Outbound,
  z.ZodTypeDef,
  BadRequestError
> = z.instanceof(BadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.union([z.string(), z.array(z.string())]),
    statusCode: z.number(),
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestError$ {
  /** @deprecated use `BadRequestError$inboundSchema` instead. */
  export const inboundSchema = BadRequestError$inboundSchema;
  /** @deprecated use `BadRequestError$outboundSchema` instead. */
  export const outboundSchema = BadRequestError$outboundSchema;
  /** @deprecated use `BadRequestError$Outbound` instead. */
  export type Outbound = BadRequestError$Outbound;
}
