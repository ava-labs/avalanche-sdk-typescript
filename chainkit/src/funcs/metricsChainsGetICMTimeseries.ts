/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { AvalancheCore } from "../core.js";
import { encodeFormQuery } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import { AvalancheError } from "../models/errors/avalancheerror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { GetICMTimeseriesServerList } from "../models/operations/geticmtimeseries.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Get ICM timeseries metrics
 *
 * @remarks
 * Get historical ICM message counts with flexible grouping.
 *
 * Use filters (`srcBlockchainId`, `destBlockchainId`, `network`)  to select data, and the `groupBy` parameter for aggregation level.
 *
 * ### Examples:
 *
 *   - **Specific pair**:   `?srcBlockchainId=...&destBlockchainId=...`
 *
 *   - **From one source (aggregated)**: `?srcBlockchainId=...`
 *
 *   - **From one source (by destination)**:   `?srcBlockchainId=...&groupBy=destBlockchainId`
 *
 *   - **To one destination (aggregated)**: `?destBlockchainId=...`
 *
 *   - **To one destination (by source)**:   `?destBlockchainId=...&groupBy=srcBlockchainId`
 *
 *   - **Network total**: `?network=mainnet`
 *
 *   - **Network breakdown**:   `?network=mainnet&groupBy=srcBlockchainId,destBlockchainId`.
 */
export function metricsChainsGetICMTimeseries(
  client: AvalancheCore,
  request: operations.GetICMTimeseriesRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    components.ICMMetricsApiResponse,
    | errors.BadRequestError
    | errors.UnauthorizedError
    | errors.ForbiddenError
    | errors.NotFoundError
    | errors.TooManyRequestsError
    | errors.InternalServerError
    | errors.BadGatewayError
    | errors.ServiceUnavailableError
    | AvalancheError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: AvalancheCore,
  request: operations.GetICMTimeseriesRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      components.ICMMetricsApiResponse,
      | errors.BadRequestError
      | errors.UnauthorizedError
      | errors.ForbiddenError
      | errors.NotFoundError
      | errors.TooManyRequestsError
      | errors.InternalServerError
      | errors.BadGatewayError
      | errors.ServiceUnavailableError
      | AvalancheError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => operations.GetICMTimeseriesRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const baseURL = options?.serverURL
    || pathToFunc(GetICMTimeseriesServerList[0], { charEncoding: "percent" })();

  const path = pathToFunc("/v2/icm/timeseries")();

  const query = encodeFormQuery({
    "destBlockchainId": payload.destBlockchainId,
    "endTimestamp": payload.endTimestamp,
    "groupBy": payload.groupBy,
    "network": payload.network,
    "pageSize": payload.pageSize,
    "pageToken": payload.pageToken,
    "srcBlockchainId": payload.srcBlockchainId,
    "startTimestamp": payload.startTimestamp,
    "timeInterval": payload.timeInterval,
  });

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.apiKey);
  const securityInput = secConfig == null ? {} : { apiKey: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: baseURL ?? "",
    operationID: "getICMTimeseries",
    oAuth2Scopes: null,

    resolvedSecurity: requestSecurity,

    securitySource: client._options.apiKey,
    retryConfig: options?.retries
      || client._options.retryConfig
      || {
        strategy: "backoff",
        backoff: {
          initialInterval: 500,
          maxInterval: 60000,
          exponent: 1.5,
          maxElapsedTime: 120000,
        },
        retryConnectionErrors: true,
      }
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["5XX"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: baseURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: [
      "400",
      "401",
      "403",
      "404",
      "429",
      "4XX",
      "500",
      "502",
      "503",
      "5XX",
    ],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    components.ICMMetricsApiResponse,
    | errors.BadRequestError
    | errors.UnauthorizedError
    | errors.ForbiddenError
    | errors.NotFoundError
    | errors.TooManyRequestsError
    | errors.InternalServerError
    | errors.BadGatewayError
    | errors.ServiceUnavailableError
    | AvalancheError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, components.ICMMetricsApiResponse$inboundSchema),
    M.jsonErr(400, errors.BadRequestError$inboundSchema),
    M.jsonErr(401, errors.UnauthorizedError$inboundSchema),
    M.jsonErr(403, errors.ForbiddenError$inboundSchema),
    M.jsonErr(404, errors.NotFoundError$inboundSchema),
    M.jsonErr(429, errors.TooManyRequestsError$inboundSchema),
    M.jsonErr(500, errors.InternalServerError$inboundSchema),
    M.jsonErr(502, errors.BadGatewayError$inboundSchema),
    M.jsonErr(503, errors.ServiceUnavailableError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
