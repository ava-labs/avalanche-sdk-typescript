/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsChainsGetICMSummary } from "../../funcs/metricsChainsGetICMSummary.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetICMSummaryRequest$inboundSchema,
};

export const tool$metricsChainsGetICMSummary: ToolDefinition<typeof args> = {
  name: "metrics-chains-get-ICM-summary",
  description: `Get ICM summary metrics

Get rolling window ICM message counts (last hour, day, month, 90 days, year, all time).

Use filters (\`srcBlockchainId\`, \`destBlockchainId\`, \`network\`)  to select data, and the \`groupBy\` parameter for aggregation level.

### Examples:

  - **Specific pair**:   \`?srcBlockchainId=...&destBlockchainId=...\`

  - **From one source (aggregated)**: \`?srcBlockchainId=...\`

  - **From one source (by destination)**:   \`?srcBlockchainId=...&groupBy=destBlockchainId\`

  - **To one destination (aggregated)**: \`?destBlockchainId=...\`

  - **To one destination (by source)**:   \`?destBlockchainId=...&groupBy=srcBlockchainId\`

  - **Network total**: \`?network=mainnet\`

  - **Network breakdown**:   \`?network=mainnet&groupBy=srcBlockchainId,destBlockchainId\`.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await metricsChainsGetICMSummary(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
