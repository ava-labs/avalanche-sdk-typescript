/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetWebhookServerList = [
  "https://glacier-api.avax.network",
] as const;

export type GetWebhookRequest = {
  /**
   * The webhook identifier.
   */
  id: string;
};

/**
 * Successful response
 */
export type GetWebhookResponse =
  | components.EVMAddressActivityResponse
  | components.PrimaryNetworkAddressActivityResponse
  | components.ValidatorActivityResponse;

/** @internal */
export const GetWebhookRequest$inboundSchema: z.ZodType<
  GetWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetWebhookRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetWebhookRequest$outboundSchema: z.ZodType<
  GetWebhookRequest$Outbound,
  z.ZodTypeDef,
  GetWebhookRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookRequest$ {
  /** @deprecated use `GetWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = GetWebhookRequest$inboundSchema;
  /** @deprecated use `GetWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = GetWebhookRequest$outboundSchema;
  /** @deprecated use `GetWebhookRequest$Outbound` instead. */
  export type Outbound = GetWebhookRequest$Outbound;
}

export function getWebhookRequestToJSON(
  getWebhookRequest: GetWebhookRequest,
): string {
  return JSON.stringify(
    GetWebhookRequest$outboundSchema.parse(getWebhookRequest),
  );
}

export function getWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookRequest' from JSON`,
  );
}

/** @internal */
export const GetWebhookResponse$inboundSchema: z.ZodType<
  GetWebhookResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.EVMAddressActivityResponse$inboundSchema,
  components.PrimaryNetworkAddressActivityResponse$inboundSchema,
  components.ValidatorActivityResponse$inboundSchema,
]);

/** @internal */
export type GetWebhookResponse$Outbound =
  | components.EVMAddressActivityResponse$Outbound
  | components.PrimaryNetworkAddressActivityResponse$Outbound
  | components.ValidatorActivityResponse$Outbound;

/** @internal */
export const GetWebhookResponse$outboundSchema: z.ZodType<
  GetWebhookResponse$Outbound,
  z.ZodTypeDef,
  GetWebhookResponse
> = z.union([
  components.EVMAddressActivityResponse$outboundSchema,
  components.PrimaryNetworkAddressActivityResponse$outboundSchema,
  components.ValidatorActivityResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookResponse$ {
  /** @deprecated use `GetWebhookResponse$inboundSchema` instead. */
  export const inboundSchema = GetWebhookResponse$inboundSchema;
  /** @deprecated use `GetWebhookResponse$outboundSchema` instead. */
  export const outboundSchema = GetWebhookResponse$outboundSchema;
  /** @deprecated use `GetWebhookResponse$Outbound` instead. */
  export type Outbound = GetWebhookResponse$Outbound;
}

export function getWebhookResponseToJSON(
  getWebhookResponse: GetWebhookResponse,
): string {
  return JSON.stringify(
    GetWebhookResponse$outboundSchema.parse(getWebhookResponse),
  );
}

export function getWebhookResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetWebhookResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWebhookResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWebhookResponse' from JSON`,
  );
}
