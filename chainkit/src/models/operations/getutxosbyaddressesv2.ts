/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetUtxosByAddressesV2ServerList = [
  "https://glacier-api.avax.network",
] as const;

export type GetUtxosByAddressesV2Globals = {
  /**
   * A supported network type mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
};

export type GetUtxosByAddressesV2Request = {
  /**
   * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
   */
  pageToken?: string | undefined;
  /**
   * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 1024.
   */
  pageSize?: number | undefined;
  /**
   * A primary network blockchain id or alias.
   */
  blockchainId: components.BlockchainId;
  /**
   * Either mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
  /**
   * Asset ID for any asset (only applicable X-Chain)
   */
  assetId?: string | undefined;
  /**
   * Boolean filter to include spent UTXOs.
   */
  includeSpent?: boolean | undefined;
  /**
   * Which property to sort by, in conjunction with sortOrder.
   */
  sortBy?: components.UtxosSortByOption | undefined;
  /**
   * The order by which to sort results. Use "asc" for ascending order, "desc" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.
   */
  sortOrder?: components.SortOrder | undefined;
  primaryNetworkAddressesBodyDto: components.PrimaryNetworkAddressesBodyDto;
};

/**
 * Successful response
 */
export type GetUtxosByAddressesV2ResponseBody =
  | components.ListPChainUtxosResponse
  | components.ListUtxosResponse;

export type GetUtxosByAddressesV2Response = {
  result: components.ListPChainUtxosResponse | components.ListUtxosResponse;
};

/** @internal */
export const GetUtxosByAddressesV2Globals$inboundSchema: z.ZodType<
  GetUtxosByAddressesV2Globals,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: components.GlobalParamNetwork$inboundSchema.optional(),
});

/** @internal */
export type GetUtxosByAddressesV2Globals$Outbound = {
  network?: string | undefined;
};

/** @internal */
export const GetUtxosByAddressesV2Globals$outboundSchema: z.ZodType<
  GetUtxosByAddressesV2Globals$Outbound,
  z.ZodTypeDef,
  GetUtxosByAddressesV2Globals
> = z.object({
  network: components.GlobalParamNetwork$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUtxosByAddressesV2Globals$ {
  /** @deprecated use `GetUtxosByAddressesV2Globals$inboundSchema` instead. */
  export const inboundSchema = GetUtxosByAddressesV2Globals$inboundSchema;
  /** @deprecated use `GetUtxosByAddressesV2Globals$outboundSchema` instead. */
  export const outboundSchema = GetUtxosByAddressesV2Globals$outboundSchema;
  /** @deprecated use `GetUtxosByAddressesV2Globals$Outbound` instead. */
  export type Outbound = GetUtxosByAddressesV2Globals$Outbound;
}

export function getUtxosByAddressesV2GlobalsToJSON(
  getUtxosByAddressesV2Globals: GetUtxosByAddressesV2Globals,
): string {
  return JSON.stringify(
    GetUtxosByAddressesV2Globals$outboundSchema.parse(
      getUtxosByAddressesV2Globals,
    ),
  );
}

export function getUtxosByAddressesV2GlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetUtxosByAddressesV2Globals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUtxosByAddressesV2Globals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUtxosByAddressesV2Globals' from JSON`,
  );
}

/** @internal */
export const GetUtxosByAddressesV2Request$inboundSchema: z.ZodType<
  GetUtxosByAddressesV2Request,
  z.ZodTypeDef,
  unknown
> = z.object({
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  blockchainId: components.BlockchainId$inboundSchema,
  network: components.GlobalParamNetwork$inboundSchema.optional(),
  assetId: z.string().optional(),
  includeSpent: z.boolean().optional(),
  sortBy: components.UtxosSortByOption$inboundSchema.optional(),
  sortOrder: components.SortOrder$inboundSchema.optional(),
  PrimaryNetworkAddressesBodyDto:
    components.PrimaryNetworkAddressesBodyDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "PrimaryNetworkAddressesBodyDto": "primaryNetworkAddressesBodyDto",
  });
});

/** @internal */
export type GetUtxosByAddressesV2Request$Outbound = {
  pageToken?: string | undefined;
  pageSize: number;
  blockchainId: string;
  network?: string | undefined;
  assetId?: string | undefined;
  includeSpent?: boolean | undefined;
  sortBy?: string | undefined;
  sortOrder?: string | undefined;
  PrimaryNetworkAddressesBodyDto:
    components.PrimaryNetworkAddressesBodyDto$Outbound;
};

/** @internal */
export const GetUtxosByAddressesV2Request$outboundSchema: z.ZodType<
  GetUtxosByAddressesV2Request$Outbound,
  z.ZodTypeDef,
  GetUtxosByAddressesV2Request
> = z.object({
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  blockchainId: components.BlockchainId$outboundSchema,
  network: components.GlobalParamNetwork$outboundSchema.optional(),
  assetId: z.string().optional(),
  includeSpent: z.boolean().optional(),
  sortBy: components.UtxosSortByOption$outboundSchema.optional(),
  sortOrder: components.SortOrder$outboundSchema.optional(),
  primaryNetworkAddressesBodyDto:
    components.PrimaryNetworkAddressesBodyDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    primaryNetworkAddressesBodyDto: "PrimaryNetworkAddressesBodyDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUtxosByAddressesV2Request$ {
  /** @deprecated use `GetUtxosByAddressesV2Request$inboundSchema` instead. */
  export const inboundSchema = GetUtxosByAddressesV2Request$inboundSchema;
  /** @deprecated use `GetUtxosByAddressesV2Request$outboundSchema` instead. */
  export const outboundSchema = GetUtxosByAddressesV2Request$outboundSchema;
  /** @deprecated use `GetUtxosByAddressesV2Request$Outbound` instead. */
  export type Outbound = GetUtxosByAddressesV2Request$Outbound;
}

export function getUtxosByAddressesV2RequestToJSON(
  getUtxosByAddressesV2Request: GetUtxosByAddressesV2Request,
): string {
  return JSON.stringify(
    GetUtxosByAddressesV2Request$outboundSchema.parse(
      getUtxosByAddressesV2Request,
    ),
  );
}

export function getUtxosByAddressesV2RequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUtxosByAddressesV2Request, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUtxosByAddressesV2Request$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUtxosByAddressesV2Request' from JSON`,
  );
}

/** @internal */
export const GetUtxosByAddressesV2ResponseBody$inboundSchema: z.ZodType<
  GetUtxosByAddressesV2ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ListPChainUtxosResponse$inboundSchema,
  components.ListUtxosResponse$inboundSchema,
]);

/** @internal */
export type GetUtxosByAddressesV2ResponseBody$Outbound =
  | components.ListPChainUtxosResponse$Outbound
  | components.ListUtxosResponse$Outbound;

/** @internal */
export const GetUtxosByAddressesV2ResponseBody$outboundSchema: z.ZodType<
  GetUtxosByAddressesV2ResponseBody$Outbound,
  z.ZodTypeDef,
  GetUtxosByAddressesV2ResponseBody
> = z.union([
  components.ListPChainUtxosResponse$outboundSchema,
  components.ListUtxosResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUtxosByAddressesV2ResponseBody$ {
  /** @deprecated use `GetUtxosByAddressesV2ResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetUtxosByAddressesV2ResponseBody$inboundSchema;
  /** @deprecated use `GetUtxosByAddressesV2ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetUtxosByAddressesV2ResponseBody$outboundSchema;
  /** @deprecated use `GetUtxosByAddressesV2ResponseBody$Outbound` instead. */
  export type Outbound = GetUtxosByAddressesV2ResponseBody$Outbound;
}

export function getUtxosByAddressesV2ResponseBodyToJSON(
  getUtxosByAddressesV2ResponseBody: GetUtxosByAddressesV2ResponseBody,
): string {
  return JSON.stringify(
    GetUtxosByAddressesV2ResponseBody$outboundSchema.parse(
      getUtxosByAddressesV2ResponseBody,
    ),
  );
}

export function getUtxosByAddressesV2ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetUtxosByAddressesV2ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUtxosByAddressesV2ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUtxosByAddressesV2ResponseBody' from JSON`,
  );
}

/** @internal */
export const GetUtxosByAddressesV2Response$inboundSchema: z.ZodType<
  GetUtxosByAddressesV2Response,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.union([
    components.ListPChainUtxosResponse$inboundSchema,
    components.ListUtxosResponse$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetUtxosByAddressesV2Response$Outbound = {
  Result:
    | components.ListPChainUtxosResponse$Outbound
    | components.ListUtxosResponse$Outbound;
};

/** @internal */
export const GetUtxosByAddressesV2Response$outboundSchema: z.ZodType<
  GetUtxosByAddressesV2Response$Outbound,
  z.ZodTypeDef,
  GetUtxosByAddressesV2Response
> = z.object({
  result: z.union([
    components.ListPChainUtxosResponse$outboundSchema,
    components.ListUtxosResponse$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUtxosByAddressesV2Response$ {
  /** @deprecated use `GetUtxosByAddressesV2Response$inboundSchema` instead. */
  export const inboundSchema = GetUtxosByAddressesV2Response$inboundSchema;
  /** @deprecated use `GetUtxosByAddressesV2Response$outboundSchema` instead. */
  export const outboundSchema = GetUtxosByAddressesV2Response$outboundSchema;
  /** @deprecated use `GetUtxosByAddressesV2Response$Outbound` instead. */
  export type Outbound = GetUtxosByAddressesV2Response$Outbound;
}

export function getUtxosByAddressesV2ResponseToJSON(
  getUtxosByAddressesV2Response: GetUtxosByAddressesV2Response,
): string {
  return JSON.stringify(
    GetUtxosByAddressesV2Response$outboundSchema.parse(
      getUtxosByAddressesV2Response,
    ),
  );
}

export function getUtxosByAddressesV2ResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetUtxosByAddressesV2Response, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUtxosByAddressesV2Response$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUtxosByAddressesV2Response' from JSON`,
  );
}
