/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetICMSummaryServerList = [
  "https://metrics.avax.network",
] as const;

/**
 * Group results by srcBlockchainId, destBlockchainId, or both (comma-separated)
 */
export const GetICMSummaryGroupBy = {
  SrcBlockchainId: "srcBlockchainId",
  DestBlockchainId: "destBlockchainId",
  SrcBlockchainIdDestBlockchainId: "srcBlockchainId,destBlockchainId",
} as const;
/**
 * Group results by srcBlockchainId, destBlockchainId, or both (comma-separated)
 */
export type GetICMSummaryGroupBy = ClosedEnum<typeof GetICMSummaryGroupBy>;

export type GetICMSummaryRequest = {
  /**
   * Query param for retrieving items for a specific source (initiating) blockchain id.
   */
  srcBlockchainId?: string | undefined;
  /**
   * Query param for retrieving items for a specific destination (receiving) blockchain id.
   */
  destBlockchainId?: string | undefined;
  /**
   * Group results by srcBlockchainId, destBlockchainId, or both (comma-separated)
   */
  groupBy?: GetICMSummaryGroupBy | undefined;
  /**
   * Either mainnet or testnet/fuji.
   */
  network?: components.Network | undefined;
};

/** @internal */
export const GetICMSummaryGroupBy$inboundSchema: z.ZodNativeEnum<
  typeof GetICMSummaryGroupBy
> = z.nativeEnum(GetICMSummaryGroupBy);

/** @internal */
export const GetICMSummaryGroupBy$outboundSchema: z.ZodNativeEnum<
  typeof GetICMSummaryGroupBy
> = GetICMSummaryGroupBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetICMSummaryGroupBy$ {
  /** @deprecated use `GetICMSummaryGroupBy$inboundSchema` instead. */
  export const inboundSchema = GetICMSummaryGroupBy$inboundSchema;
  /** @deprecated use `GetICMSummaryGroupBy$outboundSchema` instead. */
  export const outboundSchema = GetICMSummaryGroupBy$outboundSchema;
}

/** @internal */
export const GetICMSummaryRequest$inboundSchema: z.ZodType<
  GetICMSummaryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  srcBlockchainId: z.string().optional(),
  destBlockchainId: z.string().optional(),
  groupBy: GetICMSummaryGroupBy$inboundSchema.optional(),
  network: components.Network$inboundSchema.optional(),
});

/** @internal */
export type GetICMSummaryRequest$Outbound = {
  srcBlockchainId?: string | undefined;
  destBlockchainId?: string | undefined;
  groupBy?: string | undefined;
  network?: string | undefined;
};

/** @internal */
export const GetICMSummaryRequest$outboundSchema: z.ZodType<
  GetICMSummaryRequest$Outbound,
  z.ZodTypeDef,
  GetICMSummaryRequest
> = z.object({
  srcBlockchainId: z.string().optional(),
  destBlockchainId: z.string().optional(),
  groupBy: GetICMSummaryGroupBy$outboundSchema.optional(),
  network: components.Network$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetICMSummaryRequest$ {
  /** @deprecated use `GetICMSummaryRequest$inboundSchema` instead. */
  export const inboundSchema = GetICMSummaryRequest$inboundSchema;
  /** @deprecated use `GetICMSummaryRequest$outboundSchema` instead. */
  export const outboundSchema = GetICMSummaryRequest$outboundSchema;
  /** @deprecated use `GetICMSummaryRequest$Outbound` instead. */
  export type Outbound = GetICMSummaryRequest$Outbound;
}

export function getICMSummaryRequestToJSON(
  getICMSummaryRequest: GetICMSummaryRequest,
): string {
  return JSON.stringify(
    GetICMSummaryRequest$outboundSchema.parse(getICMSummaryRequest),
  );
}

export function getICMSummaryRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetICMSummaryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetICMSummaryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetICMSummaryRequest' from JSON`,
  );
}
