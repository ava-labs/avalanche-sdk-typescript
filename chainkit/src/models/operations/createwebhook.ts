/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateWebhookServerList = [
  "https://glacier-api.avax.network",
] as const;

export type CreateWebhookRequest =
  | components.PrimaryNetworkAddressActivityRequest
  | components.EVMAddressActivityRequest
  | components.ValidatorActivityRequest;

/**
 * Successful response
 */
export type CreateWebhookResponse =
  | components.EVMAddressActivityResponse
  | components.PrimaryNetworkAddressActivityResponse
  | components.ValidatorActivityResponse;

/** @internal */
export const CreateWebhookRequest$inboundSchema: z.ZodType<
  CreateWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.PrimaryNetworkAddressActivityRequest$inboundSchema,
  components.EVMAddressActivityRequest$inboundSchema,
  components.ValidatorActivityRequest$inboundSchema,
]);

/** @internal */
export type CreateWebhookRequest$Outbound =
  | components.PrimaryNetworkAddressActivityRequest$Outbound
  | components.EVMAddressActivityRequest$Outbound
  | components.ValidatorActivityRequest$Outbound;

/** @internal */
export const CreateWebhookRequest$outboundSchema: z.ZodType<
  CreateWebhookRequest$Outbound,
  z.ZodTypeDef,
  CreateWebhookRequest
> = z.union([
  components.PrimaryNetworkAddressActivityRequest$outboundSchema,
  components.EVMAddressActivityRequest$outboundSchema,
  components.ValidatorActivityRequest$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookRequest$ {
  /** @deprecated use `CreateWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookRequest$inboundSchema;
  /** @deprecated use `CreateWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookRequest$outboundSchema;
  /** @deprecated use `CreateWebhookRequest$Outbound` instead. */
  export type Outbound = CreateWebhookRequest$Outbound;
}

export function createWebhookRequestToJSON(
  createWebhookRequest: CreateWebhookRequest,
): string {
  return JSON.stringify(
    CreateWebhookRequest$outboundSchema.parse(createWebhookRequest),
  );
}

export function createWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookRequest' from JSON`,
  );
}

/** @internal */
export const CreateWebhookResponse$inboundSchema: z.ZodType<
  CreateWebhookResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.EVMAddressActivityResponse$inboundSchema,
  components.PrimaryNetworkAddressActivityResponse$inboundSchema,
  components.ValidatorActivityResponse$inboundSchema,
]);

/** @internal */
export type CreateWebhookResponse$Outbound =
  | components.EVMAddressActivityResponse$Outbound
  | components.PrimaryNetworkAddressActivityResponse$Outbound
  | components.ValidatorActivityResponse$Outbound;

/** @internal */
export const CreateWebhookResponse$outboundSchema: z.ZodType<
  CreateWebhookResponse$Outbound,
  z.ZodTypeDef,
  CreateWebhookResponse
> = z.union([
  components.EVMAddressActivityResponse$outboundSchema,
  components.PrimaryNetworkAddressActivityResponse$outboundSchema,
  components.ValidatorActivityResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookResponse$ {
  /** @deprecated use `CreateWebhookResponse$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookResponse$inboundSchema;
  /** @deprecated use `CreateWebhookResponse$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookResponse$outboundSchema;
  /** @deprecated use `CreateWebhookResponse$Outbound` instead. */
  export type Outbound = CreateWebhookResponse$Outbound;
}

export function createWebhookResponseToJSON(
  createWebhookResponse: CreateWebhookResponse,
): string {
  return JSON.stringify(
    CreateWebhookResponse$outboundSchema.parse(createWebhookResponse),
  );
}

export function createWebhookResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhookResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookResponse' from JSON`,
  );
}
