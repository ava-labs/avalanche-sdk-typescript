/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetIcmMessageServerList = [
  "https://glacier-api.avax.network",
] as const;

export type GetIcmMessageRequest = {
  /**
   * The teleporter message ID of the ICM message.
   */
  messageId: string;
};

/**
 * Successful response
 */
export type GetIcmMessageResponse =
  | (components.DeliveredIcmMessage & { status: "delivered" })
  | (components.PendingIcmMessage & { status: "pending" })
  | (components.DeliveredSourceNotIndexedIcmMessage & {
    status: "delivered_source_not_indexed";
  });

/** @internal */
export const GetIcmMessageRequest$inboundSchema: z.ZodType<
  GetIcmMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  messageId: z.string(),
});

/** @internal */
export type GetIcmMessageRequest$Outbound = {
  messageId: string;
};

/** @internal */
export const GetIcmMessageRequest$outboundSchema: z.ZodType<
  GetIcmMessageRequest$Outbound,
  z.ZodTypeDef,
  GetIcmMessageRequest
> = z.object({
  messageId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIcmMessageRequest$ {
  /** @deprecated use `GetIcmMessageRequest$inboundSchema` instead. */
  export const inboundSchema = GetIcmMessageRequest$inboundSchema;
  /** @deprecated use `GetIcmMessageRequest$outboundSchema` instead. */
  export const outboundSchema = GetIcmMessageRequest$outboundSchema;
  /** @deprecated use `GetIcmMessageRequest$Outbound` instead. */
  export type Outbound = GetIcmMessageRequest$Outbound;
}

export function getIcmMessageRequestToJSON(
  getIcmMessageRequest: GetIcmMessageRequest,
): string {
  return JSON.stringify(
    GetIcmMessageRequest$outboundSchema.parse(getIcmMessageRequest),
  );
}

export function getIcmMessageRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetIcmMessageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIcmMessageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIcmMessageRequest' from JSON`,
  );
}

/** @internal */
export const GetIcmMessageResponse$inboundSchema: z.ZodType<
  GetIcmMessageResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.DeliveredIcmMessage$inboundSchema.and(
    z.object({ status: z.literal("delivered") }).transform((v) => ({
      status: v.status,
    })),
  ),
  components.PendingIcmMessage$inboundSchema.and(
    z.object({ status: z.literal("pending") }).transform((v) => ({
      status: v.status,
    })),
  ),
  components.DeliveredSourceNotIndexedIcmMessage$inboundSchema.and(
    z.object({ status: z.literal("delivered_source_not_indexed") }).transform((
      v,
    ) => ({ status: v.status })),
  ),
]);

/** @internal */
export type GetIcmMessageResponse$Outbound =
  | (components.DeliveredIcmMessage$Outbound & { status: "delivered" })
  | (components.PendingIcmMessage$Outbound & { status: "pending" })
  | (components.DeliveredSourceNotIndexedIcmMessage$Outbound & {
    status: "delivered_source_not_indexed";
  });

/** @internal */
export const GetIcmMessageResponse$outboundSchema: z.ZodType<
  GetIcmMessageResponse$Outbound,
  z.ZodTypeDef,
  GetIcmMessageResponse
> = z.union([
  components.DeliveredIcmMessage$outboundSchema.and(
    z.object({ status: z.literal("delivered") }).transform((v) => ({
      status: v.status,
    })),
  ),
  components.PendingIcmMessage$outboundSchema.and(
    z.object({ status: z.literal("pending") }).transform((v) => ({
      status: v.status,
    })),
  ),
  components.DeliveredSourceNotIndexedIcmMessage$outboundSchema.and(
    z.object({ status: z.literal("delivered_source_not_indexed") }).transform((
      v,
    ) => ({ status: v.status })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIcmMessageResponse$ {
  /** @deprecated use `GetIcmMessageResponse$inboundSchema` instead. */
  export const inboundSchema = GetIcmMessageResponse$inboundSchema;
  /** @deprecated use `GetIcmMessageResponse$outboundSchema` instead. */
  export const outboundSchema = GetIcmMessageResponse$outboundSchema;
  /** @deprecated use `GetIcmMessageResponse$Outbound` instead. */
  export type Outbound = GetIcmMessageResponse$Outbound;
}

export function getIcmMessageResponseToJSON(
  getIcmMessageResponse: GetIcmMessageResponse,
): string {
  return JSON.stringify(
    GetIcmMessageResponse$outboundSchema.parse(getIcmMessageResponse),
  );
}

export function getIcmMessageResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetIcmMessageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIcmMessageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIcmMessageResponse' from JSON`,
  );
}
