/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetApiUsageMetricsServerList = [
  "https://glacier-api.avax.network",
] as const;

/**
 * Filter data by request type.
 */
export const GetApiUsageMetricsRequestType = {
  Data: "data",
  Rpc: "rpc",
} as const;
/**
 * Filter data by request type.
 */
export type GetApiUsageMetricsRequestType = ClosedEnum<
  typeof GetApiUsageMetricsRequestType
>;

export type GetApiUsageMetricsRequest = {
  /**
   * Organization ID to fetch usage metrics for
   */
  orgId?: string | undefined;
  /**
   * The start time of the range as a UNIX timestamp. The requested start time  will be rounded down to 0:00 UTC of the day.
   */
  startTimestamp?: number | undefined;
  /**
   * The end time of the range as a UNIX timestamp. The requested end time will be rounded down to 0:00 UTC of the day.
   */
  endTimestamp?: number | undefined;
  /**
   * Time interval granularity for data aggregation
   */
  timeInterval?: components.TimeIntervalGranularityExtended | undefined;
  /**
   * Query param for the criterion used for grouping metrics
   */
  groupBy?: components.UsageMetricsGroupByEnum | undefined;
  /**
   * Filter data by chain ID.
   */
  chainId?: string | undefined;
  /**
   * Filter data by response status code.
   */
  responseCode?: string | undefined;
  /**
   * Filter data by request type.
   */
  requestType?: GetApiUsageMetricsRequestType | undefined;
  /**
   * Filter data by API key ID.
   */
  apiKeyId?: string | undefined;
  /**
   * Filter data by request path.
   */
  requestPath?: string | undefined;
};

/** @internal */
export const GetApiUsageMetricsRequestType$inboundSchema: z.ZodNativeEnum<
  typeof GetApiUsageMetricsRequestType
> = z.nativeEnum(GetApiUsageMetricsRequestType);

/** @internal */
export const GetApiUsageMetricsRequestType$outboundSchema: z.ZodNativeEnum<
  typeof GetApiUsageMetricsRequestType
> = GetApiUsageMetricsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUsageMetricsRequestType$ {
  /** @deprecated use `GetApiUsageMetricsRequestType$inboundSchema` instead. */
  export const inboundSchema = GetApiUsageMetricsRequestType$inboundSchema;
  /** @deprecated use `GetApiUsageMetricsRequestType$outboundSchema` instead. */
  export const outboundSchema = GetApiUsageMetricsRequestType$outboundSchema;
}

/** @internal */
export const GetApiUsageMetricsRequest$inboundSchema: z.ZodType<
  GetApiUsageMetricsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  orgId: z.string().optional(),
  startTimestamp: z.number().int().optional(),
  endTimestamp: z.number().int().optional(),
  timeInterval: components.TimeIntervalGranularityExtended$inboundSchema
    .optional(),
  groupBy: components.UsageMetricsGroupByEnum$inboundSchema.optional(),
  chainId: z.string().optional(),
  responseCode: z.string().optional(),
  requestType: GetApiUsageMetricsRequestType$inboundSchema.optional(),
  apiKeyId: z.string().optional(),
  requestPath: z.string().optional(),
});

/** @internal */
export type GetApiUsageMetricsRequest$Outbound = {
  orgId?: string | undefined;
  startTimestamp?: number | undefined;
  endTimestamp?: number | undefined;
  timeInterval?: string | undefined;
  groupBy?: string | undefined;
  chainId?: string | undefined;
  responseCode?: string | undefined;
  requestType?: string | undefined;
  apiKeyId?: string | undefined;
  requestPath?: string | undefined;
};

/** @internal */
export const GetApiUsageMetricsRequest$outboundSchema: z.ZodType<
  GetApiUsageMetricsRequest$Outbound,
  z.ZodTypeDef,
  GetApiUsageMetricsRequest
> = z.object({
  orgId: z.string().optional(),
  startTimestamp: z.number().int().optional(),
  endTimestamp: z.number().int().optional(),
  timeInterval: components.TimeIntervalGranularityExtended$outboundSchema
    .optional(),
  groupBy: components.UsageMetricsGroupByEnum$outboundSchema.optional(),
  chainId: z.string().optional(),
  responseCode: z.string().optional(),
  requestType: GetApiUsageMetricsRequestType$outboundSchema.optional(),
  apiKeyId: z.string().optional(),
  requestPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUsageMetricsRequest$ {
  /** @deprecated use `GetApiUsageMetricsRequest$inboundSchema` instead. */
  export const inboundSchema = GetApiUsageMetricsRequest$inboundSchema;
  /** @deprecated use `GetApiUsageMetricsRequest$outboundSchema` instead. */
  export const outboundSchema = GetApiUsageMetricsRequest$outboundSchema;
  /** @deprecated use `GetApiUsageMetricsRequest$Outbound` instead. */
  export type Outbound = GetApiUsageMetricsRequest$Outbound;
}

export function getApiUsageMetricsRequestToJSON(
  getApiUsageMetricsRequest: GetApiUsageMetricsRequest,
): string {
  return JSON.stringify(
    GetApiUsageMetricsRequest$outboundSchema.parse(getApiUsageMetricsRequest),
  );
}

export function getApiUsageMetricsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetApiUsageMetricsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetApiUsageMetricsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetApiUsageMetricsRequest' from JSON`,
  );
}
