/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetMetricsByValidationIdServerList = [
  "https://metrics.avax.network",
] as const;

/**
 * Which metric to fetch for given L1 validation ID.
 */
export const GetMetricsByValidationIdMetric = {
  ValidationCumulativeFeesDaily: "validationCumulativeFeesDaily",
  ValidationFeesDaily: "validationFeesDaily",
} as const;
/**
 * Which metric to fetch for given L1 validation ID.
 */
export type GetMetricsByValidationIdMetric = ClosedEnum<
  typeof GetMetricsByValidationIdMetric
>;

export type GetMetricsByValidationIdRequest = {
  /**
   * The L1 Validator's validation ID to filter by
   */
  l1ValidationId: string;
  /**
   * Which metric to fetch for given L1 validation ID.
   */
  metric: GetMetricsByValidationIdMetric;
  /**
   * Query param for retrieving items after a specific timestamp.
   */
  startTimestamp?: number | undefined;
  /**
   * Query param for retrieving items before a specific timestamp.
   */
  endTimestamp?: number | undefined;
};

/** @internal */
export const GetMetricsByValidationIdMetric$inboundSchema: z.ZodNativeEnum<
  typeof GetMetricsByValidationIdMetric
> = z.nativeEnum(GetMetricsByValidationIdMetric);

/** @internal */
export const GetMetricsByValidationIdMetric$outboundSchema: z.ZodNativeEnum<
  typeof GetMetricsByValidationIdMetric
> = GetMetricsByValidationIdMetric$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetricsByValidationIdMetric$ {
  /** @deprecated use `GetMetricsByValidationIdMetric$inboundSchema` instead. */
  export const inboundSchema = GetMetricsByValidationIdMetric$inboundSchema;
  /** @deprecated use `GetMetricsByValidationIdMetric$outboundSchema` instead. */
  export const outboundSchema = GetMetricsByValidationIdMetric$outboundSchema;
}

/** @internal */
export const GetMetricsByValidationIdRequest$inboundSchema: z.ZodType<
  GetMetricsByValidationIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  l1ValidationId: z.string(),
  metric: GetMetricsByValidationIdMetric$inboundSchema,
  startTimestamp: z.number().int().optional(),
  endTimestamp: z.number().int().optional(),
});

/** @internal */
export type GetMetricsByValidationIdRequest$Outbound = {
  l1ValidationId: string;
  metric: string;
  startTimestamp?: number | undefined;
  endTimestamp?: number | undefined;
};

/** @internal */
export const GetMetricsByValidationIdRequest$outboundSchema: z.ZodType<
  GetMetricsByValidationIdRequest$Outbound,
  z.ZodTypeDef,
  GetMetricsByValidationIdRequest
> = z.object({
  l1ValidationId: z.string(),
  metric: GetMetricsByValidationIdMetric$outboundSchema,
  startTimestamp: z.number().int().optional(),
  endTimestamp: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetricsByValidationIdRequest$ {
  /** @deprecated use `GetMetricsByValidationIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetMetricsByValidationIdRequest$inboundSchema;
  /** @deprecated use `GetMetricsByValidationIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetMetricsByValidationIdRequest$outboundSchema;
  /** @deprecated use `GetMetricsByValidationIdRequest$Outbound` instead. */
  export type Outbound = GetMetricsByValidationIdRequest$Outbound;
}

export function getMetricsByValidationIdRequestToJSON(
  getMetricsByValidationIdRequest: GetMetricsByValidationIdRequest,
): string {
  return JSON.stringify(
    GetMetricsByValidationIdRequest$outboundSchema.parse(
      getMetricsByValidationIdRequest,
    ),
  );
}

export function getMetricsByValidationIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMetricsByValidationIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMetricsByValidationIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMetricsByValidationIdRequest' from JSON`,
  );
}
