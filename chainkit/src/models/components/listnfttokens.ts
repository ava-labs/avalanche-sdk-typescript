/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Erc1155Token,
  Erc1155Token$inboundSchema,
  Erc1155Token$Outbound,
  Erc1155Token$outboundSchema,
} from "./erc1155token.js";
import {
  Erc721Token,
  Erc721Token$inboundSchema,
  Erc721Token$Outbound,
  Erc721Token$outboundSchema,
} from "./erc721token.js";

export type Token = Erc721Token | Erc1155Token;

export type ListNftTokens = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  tokens: Array<Erc721Token | Erc1155Token>;
};

/** @internal */
export const Token$inboundSchema: z.ZodType<Token, z.ZodTypeDef, unknown> = z
  .union([Erc721Token$inboundSchema, Erc1155Token$inboundSchema]);

/** @internal */
export type Token$Outbound = Erc721Token$Outbound | Erc1155Token$Outbound;

/** @internal */
export const Token$outboundSchema: z.ZodType<
  Token$Outbound,
  z.ZodTypeDef,
  Token
> = z.union([Erc721Token$outboundSchema, Erc1155Token$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Token$ {
  /** @deprecated use `Token$inboundSchema` instead. */
  export const inboundSchema = Token$inboundSchema;
  /** @deprecated use `Token$outboundSchema` instead. */
  export const outboundSchema = Token$outboundSchema;
  /** @deprecated use `Token$Outbound` instead. */
  export type Outbound = Token$Outbound;
}

export function tokenToJSON(token: Token): string {
  return JSON.stringify(Token$outboundSchema.parse(token));
}

export function tokenFromJSON(
  jsonString: string,
): SafeParseResult<Token, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Token$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Token' from JSON`,
  );
}

/** @internal */
export const ListNftTokens$inboundSchema: z.ZodType<
  ListNftTokens,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  tokens: z.array(
    z.union([Erc721Token$inboundSchema, Erc1155Token$inboundSchema]),
  ),
});

/** @internal */
export type ListNftTokens$Outbound = {
  nextPageToken?: string | undefined;
  tokens: Array<Erc721Token$Outbound | Erc1155Token$Outbound>;
};

/** @internal */
export const ListNftTokens$outboundSchema: z.ZodType<
  ListNftTokens$Outbound,
  z.ZodTypeDef,
  ListNftTokens
> = z.object({
  nextPageToken: z.string().optional(),
  tokens: z.array(
    z.union([Erc721Token$outboundSchema, Erc1155Token$outboundSchema]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListNftTokens$ {
  /** @deprecated use `ListNftTokens$inboundSchema` instead. */
  export const inboundSchema = ListNftTokens$inboundSchema;
  /** @deprecated use `ListNftTokens$outboundSchema` instead. */
  export const outboundSchema = ListNftTokens$outboundSchema;
  /** @deprecated use `ListNftTokens$Outbound` instead. */
  export type Outbound = ListNftTokens$Outbound;
}

export function listNftTokensToJSON(listNftTokens: ListNftTokens): string {
  return JSON.stringify(ListNftTokens$outboundSchema.parse(listNftTokens));
}

export function listNftTokensFromJSON(
  jsonString: string,
): SafeParseResult<ListNftTokens, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListNftTokens$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListNftTokens' from JSON`,
  );
}
