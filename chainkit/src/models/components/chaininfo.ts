/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChainStatus,
  ChainStatus$inboundSchema,
  ChainStatus$outboundSchema,
} from "./chainstatus.js";
import {
  NetworkToken,
  NetworkToken$inboundSchema,
  NetworkToken$Outbound,
  NetworkToken$outboundSchema,
} from "./networktoken.js";
import {
  UtilityAddresses,
  UtilityAddresses$inboundSchema,
  UtilityAddresses$Outbound,
  UtilityAddresses$outboundSchema,
} from "./utilityaddresses.js";
import {
  VmName,
  VmName$inboundSchema,
  VmName$outboundSchema,
} from "./vmname.js";

export const ChainInfoEnabledFeature = {
  NftIndexing: "nftIndexing",
  Webhooks: "webhooks",
  Teleporter: "teleporter",
} as const;
export type ChainInfoEnabledFeature = ClosedEnum<
  typeof ChainInfoEnabledFeature
>;

export type ChainInfo = {
  chainId: string;
  /**
   * Status of chain nodes. Chain nodes can become temporarily `UNAVAILABLE` for several reasons, such as validator stake falling below threshold. If chain nodes are `UNAVAILABLE`, requests that rely on data from the chain nodes may return 503 errors.
   */
  status: ChainStatus;
  chainName: string;
  description: string;
  platformChainId?: string | undefined;
  subnetId?: string | undefined;
  vmId?: string | undefined;
  vmName: VmName;
  explorerUrl?: string | undefined;
  rpcUrl: string;
  wsUrl?: string | undefined;
  isTestnet: boolean;
  utilityAddresses?: UtilityAddresses | undefined;
  networkToken: NetworkToken;
  chainLogoUri?: string | undefined;
  private?: boolean | undefined;
  enabledFeatures?: Array<ChainInfoEnabledFeature> | undefined;
};

/** @internal */
export const ChainInfoEnabledFeature$inboundSchema: z.ZodNativeEnum<
  typeof ChainInfoEnabledFeature
> = z.nativeEnum(ChainInfoEnabledFeature);

/** @internal */
export const ChainInfoEnabledFeature$outboundSchema: z.ZodNativeEnum<
  typeof ChainInfoEnabledFeature
> = ChainInfoEnabledFeature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChainInfoEnabledFeature$ {
  /** @deprecated use `ChainInfoEnabledFeature$inboundSchema` instead. */
  export const inboundSchema = ChainInfoEnabledFeature$inboundSchema;
  /** @deprecated use `ChainInfoEnabledFeature$outboundSchema` instead. */
  export const outboundSchema = ChainInfoEnabledFeature$outboundSchema;
}

/** @internal */
export const ChainInfo$inboundSchema: z.ZodType<
  ChainInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.string(),
  status: ChainStatus$inboundSchema,
  chainName: z.string(),
  description: z.string(),
  platformChainId: z.string().optional(),
  subnetId: z.string().optional(),
  vmId: z.string().optional(),
  vmName: VmName$inboundSchema,
  explorerUrl: z.string().optional(),
  rpcUrl: z.string(),
  wsUrl: z.string().optional(),
  isTestnet: z.boolean(),
  utilityAddresses: UtilityAddresses$inboundSchema.optional(),
  networkToken: NetworkToken$inboundSchema,
  chainLogoUri: z.string().optional(),
  private: z.boolean().optional(),
  enabledFeatures: z.array(ChainInfoEnabledFeature$inboundSchema).optional(),
});

/** @internal */
export type ChainInfo$Outbound = {
  chainId: string;
  status: string;
  chainName: string;
  description: string;
  platformChainId?: string | undefined;
  subnetId?: string | undefined;
  vmId?: string | undefined;
  vmName: string;
  explorerUrl?: string | undefined;
  rpcUrl: string;
  wsUrl?: string | undefined;
  isTestnet: boolean;
  utilityAddresses?: UtilityAddresses$Outbound | undefined;
  networkToken: NetworkToken$Outbound;
  chainLogoUri?: string | undefined;
  private?: boolean | undefined;
  enabledFeatures?: Array<string> | undefined;
};

/** @internal */
export const ChainInfo$outboundSchema: z.ZodType<
  ChainInfo$Outbound,
  z.ZodTypeDef,
  ChainInfo
> = z.object({
  chainId: z.string(),
  status: ChainStatus$outboundSchema,
  chainName: z.string(),
  description: z.string(),
  platformChainId: z.string().optional(),
  subnetId: z.string().optional(),
  vmId: z.string().optional(),
  vmName: VmName$outboundSchema,
  explorerUrl: z.string().optional(),
  rpcUrl: z.string(),
  wsUrl: z.string().optional(),
  isTestnet: z.boolean(),
  utilityAddresses: UtilityAddresses$outboundSchema.optional(),
  networkToken: NetworkToken$outboundSchema,
  chainLogoUri: z.string().optional(),
  private: z.boolean().optional(),
  enabledFeatures: z.array(ChainInfoEnabledFeature$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChainInfo$ {
  /** @deprecated use `ChainInfo$inboundSchema` instead. */
  export const inboundSchema = ChainInfo$inboundSchema;
  /** @deprecated use `ChainInfo$outboundSchema` instead. */
  export const outboundSchema = ChainInfo$outboundSchema;
  /** @deprecated use `ChainInfo$Outbound` instead. */
  export type Outbound = ChainInfo$Outbound;
}

export function chainInfoToJSON(chainInfo: ChainInfo): string {
  return JSON.stringify(ChainInfo$outboundSchema.parse(chainInfo));
}

export function chainInfoFromJSON(
  jsonString: string,
): SafeParseResult<ChainInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChainInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChainInfo' from JSON`,
  );
}
