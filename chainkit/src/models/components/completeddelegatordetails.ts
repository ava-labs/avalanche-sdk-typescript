/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CompletedDelegatorDetailsDelegationStatus = {
  Completed: "completed",
} as const;
export type CompletedDelegatorDetailsDelegationStatus = ClosedEnum<
  typeof CompletedDelegatorDetailsDelegationStatus
>;

export type CompletedDelegatorDetails = {
  txHash: string;
  nodeId: string;
  rewardAddresses: Array<string>;
  amountDelegated: string;
  delegationFee: string;
  startTimestamp: number;
  endTimestamp: number;
  /**
   * Total rewards distributed for the successful delegation.
   */
  grossReward: string;
  /**
   * Net rewards distributed to the delegator after deducting delegation fee from the gross reward for the successful delegation.
   */
  netReward: string;
  delegationStatus: CompletedDelegatorDetailsDelegationStatus;
};

/** @internal */
export const CompletedDelegatorDetailsDelegationStatus$inboundSchema:
  z.ZodNativeEnum<typeof CompletedDelegatorDetailsDelegationStatus> = z
    .nativeEnum(CompletedDelegatorDetailsDelegationStatus);

/** @internal */
export const CompletedDelegatorDetailsDelegationStatus$outboundSchema:
  z.ZodNativeEnum<typeof CompletedDelegatorDetailsDelegationStatus> =
    CompletedDelegatorDetailsDelegationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletedDelegatorDetailsDelegationStatus$ {
  /** @deprecated use `CompletedDelegatorDetailsDelegationStatus$inboundSchema` instead. */
  export const inboundSchema =
    CompletedDelegatorDetailsDelegationStatus$inboundSchema;
  /** @deprecated use `CompletedDelegatorDetailsDelegationStatus$outboundSchema` instead. */
  export const outboundSchema =
    CompletedDelegatorDetailsDelegationStatus$outboundSchema;
}

/** @internal */
export const CompletedDelegatorDetails$inboundSchema: z.ZodType<
  CompletedDelegatorDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  txHash: z.string(),
  nodeId: z.string(),
  rewardAddresses: z.array(z.string()),
  amountDelegated: z.string(),
  delegationFee: z.string(),
  startTimestamp: z.number(),
  endTimestamp: z.number(),
  grossReward: z.string(),
  netReward: z.string(),
  delegationStatus: CompletedDelegatorDetailsDelegationStatus$inboundSchema,
});

/** @internal */
export type CompletedDelegatorDetails$Outbound = {
  txHash: string;
  nodeId: string;
  rewardAddresses: Array<string>;
  amountDelegated: string;
  delegationFee: string;
  startTimestamp: number;
  endTimestamp: number;
  grossReward: string;
  netReward: string;
  delegationStatus: string;
};

/** @internal */
export const CompletedDelegatorDetails$outboundSchema: z.ZodType<
  CompletedDelegatorDetails$Outbound,
  z.ZodTypeDef,
  CompletedDelegatorDetails
> = z.object({
  txHash: z.string(),
  nodeId: z.string(),
  rewardAddresses: z.array(z.string()),
  amountDelegated: z.string(),
  delegationFee: z.string(),
  startTimestamp: z.number(),
  endTimestamp: z.number(),
  grossReward: z.string(),
  netReward: z.string(),
  delegationStatus: CompletedDelegatorDetailsDelegationStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletedDelegatorDetails$ {
  /** @deprecated use `CompletedDelegatorDetails$inboundSchema` instead. */
  export const inboundSchema = CompletedDelegatorDetails$inboundSchema;
  /** @deprecated use `CompletedDelegatorDetails$outboundSchema` instead. */
  export const outboundSchema = CompletedDelegatorDetails$outboundSchema;
  /** @deprecated use `CompletedDelegatorDetails$Outbound` instead. */
  export type Outbound = CompletedDelegatorDetails$Outbound;
}

export function completedDelegatorDetailsToJSON(
  completedDelegatorDetails: CompletedDelegatorDetails,
): string {
  return JSON.stringify(
    CompletedDelegatorDetails$outboundSchema.parse(completedDelegatorDetails),
  );
}

export function completedDelegatorDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CompletedDelegatorDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletedDelegatorDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletedDelegatorDetails' from JSON`,
  );
}
