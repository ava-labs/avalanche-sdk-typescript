/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SignatureAggregatorRequest = {
  /**
   * Either Message or Justification must be provided. Hex-encoded message, optionally prefixed with "0x"
   */
  message?: string | undefined;
  /**
   * Either Justification or Message must be provided. Hex-encoded justification, optionally prefixed with "0x"
   */
  justification?: string | undefined;
  /**
   * Optional hex or cb58 encoded signing subnet ID. If omitted will default to the subnetID of the source blockchain.
   */
  signingSubnetId?: string | undefined;
  /**
   * Optional. Integer from 0 to 100 representing the percentage of the weight of the signing Subnet that is required to sign the message. Defaults to 67 if omitted.
   */
  quorumPercentage?: number | undefined;
  /**
   * Optional. Integer from 0 to 100 representing the additional percentage of weight of the signing Subnet that will be attempted to add to the signature. QuorumPercentage+QuorumPercentageBuffer must be less than or equal to 100. Obtaining signatures from more validators can take a longer time, but signatures representing	a large percentage of the Subnet weight are less prone to become invalid due to validator weight changes. Defaults to 0 if omitted.
   */
  quorumPercentageBuffer?: number | undefined;
  /**
   * Optional P-Chain height for validator set selection. If 0 (default), validators at proposed height will be used. If non-zero, validators at the specified P-Chain height will be used for signature aggregation.
   */
  pChainHeight?: number | undefined;
};

/** @internal */
export const SignatureAggregatorRequest$inboundSchema: z.ZodType<
  SignatureAggregatorRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  justification: z.string().optional(),
  signingSubnetId: z.string().optional(),
  quorumPercentage: z.number().optional(),
  quorumPercentageBuffer: z.number().optional(),
  pChainHeight: z.number().optional(),
});

/** @internal */
export type SignatureAggregatorRequest$Outbound = {
  message?: string | undefined;
  justification?: string | undefined;
  signingSubnetId?: string | undefined;
  quorumPercentage?: number | undefined;
  quorumPercentageBuffer?: number | undefined;
  pChainHeight?: number | undefined;
};

/** @internal */
export const SignatureAggregatorRequest$outboundSchema: z.ZodType<
  SignatureAggregatorRequest$Outbound,
  z.ZodTypeDef,
  SignatureAggregatorRequest
> = z.object({
  message: z.string().optional(),
  justification: z.string().optional(),
  signingSubnetId: z.string().optional(),
  quorumPercentage: z.number().optional(),
  quorumPercentageBuffer: z.number().optional(),
  pChainHeight: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignatureAggregatorRequest$ {
  /** @deprecated use `SignatureAggregatorRequest$inboundSchema` instead. */
  export const inboundSchema = SignatureAggregatorRequest$inboundSchema;
  /** @deprecated use `SignatureAggregatorRequest$outboundSchema` instead. */
  export const outboundSchema = SignatureAggregatorRequest$outboundSchema;
  /** @deprecated use `SignatureAggregatorRequest$Outbound` instead. */
  export type Outbound = SignatureAggregatorRequest$Outbound;
}

export function signatureAggregatorRequestToJSON(
  signatureAggregatorRequest: SignatureAggregatorRequest,
): string {
  return JSON.stringify(
    SignatureAggregatorRequest$outboundSchema.parse(signatureAggregatorRequest),
  );
}

export function signatureAggregatorRequestFromJSON(
  jsonString: string,
): SafeParseResult<SignatureAggregatorRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignatureAggregatorRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignatureAggregatorRequest' from JSON`,
  );
}
