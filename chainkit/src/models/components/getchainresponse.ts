/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChainStatus,
  ChainStatus$inboundSchema,
  ChainStatus$outboundSchema,
} from "./chainstatus.js";
import {
  NetworkToken,
  NetworkToken$inboundSchema,
  NetworkToken$Outbound,
  NetworkToken$outboundSchema,
} from "./networktoken.js";
import {
  UtilityAddresses,
  UtilityAddresses$inboundSchema,
  UtilityAddresses$Outbound,
  UtilityAddresses$outboundSchema,
} from "./utilityaddresses.js";
import {
  VmName,
  VmName$inboundSchema,
  VmName$outboundSchema,
} from "./vmname.js";

export const GetChainResponseEnabledFeature = {
  NftIndexing: "nftIndexing",
  Webhooks: "webhooks",
  Teleporter: "teleporter",
} as const;
export type GetChainResponseEnabledFeature = ClosedEnum<
  typeof GetChainResponseEnabledFeature
>;

export type GetChainResponse = {
  chainId: string;
  /**
   * Status of chain nodes. Chain nodes can become temporarily `UNAVAILABLE` for several reasons, such as validator stake falling below threshold. If chain nodes are `UNAVAILABLE`, requests that rely on data from the chain nodes may return 503 errors.
   */
  status: ChainStatus;
  chainName: string;
  description: string;
  platformChainId?: string | undefined;
  subnetId?: string | undefined;
  vmId?: string | undefined;
  vmName: VmName;
  explorerUrl?: string | undefined;
  rpcUrl: string;
  wsUrl?: string | undefined;
  isTestnet: boolean;
  utilityAddresses?: UtilityAddresses | undefined;
  networkToken: NetworkToken;
  chainLogoUri?: string | undefined;
  private?: boolean | undefined;
  enabledFeatures?: Array<GetChainResponseEnabledFeature> | undefined;
};

/** @internal */
export const GetChainResponseEnabledFeature$inboundSchema: z.ZodNativeEnum<
  typeof GetChainResponseEnabledFeature
> = z.nativeEnum(GetChainResponseEnabledFeature);

/** @internal */
export const GetChainResponseEnabledFeature$outboundSchema: z.ZodNativeEnum<
  typeof GetChainResponseEnabledFeature
> = GetChainResponseEnabledFeature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChainResponseEnabledFeature$ {
  /** @deprecated use `GetChainResponseEnabledFeature$inboundSchema` instead. */
  export const inboundSchema = GetChainResponseEnabledFeature$inboundSchema;
  /** @deprecated use `GetChainResponseEnabledFeature$outboundSchema` instead. */
  export const outboundSchema = GetChainResponseEnabledFeature$outboundSchema;
}

/** @internal */
export const GetChainResponse$inboundSchema: z.ZodType<
  GetChainResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.string(),
  status: ChainStatus$inboundSchema,
  chainName: z.string(),
  description: z.string(),
  platformChainId: z.string().optional(),
  subnetId: z.string().optional(),
  vmId: z.string().optional(),
  vmName: VmName$inboundSchema,
  explorerUrl: z.string().optional(),
  rpcUrl: z.string(),
  wsUrl: z.string().optional(),
  isTestnet: z.boolean(),
  utilityAddresses: UtilityAddresses$inboundSchema.optional(),
  networkToken: NetworkToken$inboundSchema,
  chainLogoUri: z.string().optional(),
  private: z.boolean().optional(),
  enabledFeatures: z.array(GetChainResponseEnabledFeature$inboundSchema)
    .optional(),
});

/** @internal */
export type GetChainResponse$Outbound = {
  chainId: string;
  status: string;
  chainName: string;
  description: string;
  platformChainId?: string | undefined;
  subnetId?: string | undefined;
  vmId?: string | undefined;
  vmName: string;
  explorerUrl?: string | undefined;
  rpcUrl: string;
  wsUrl?: string | undefined;
  isTestnet: boolean;
  utilityAddresses?: UtilityAddresses$Outbound | undefined;
  networkToken: NetworkToken$Outbound;
  chainLogoUri?: string | undefined;
  private?: boolean | undefined;
  enabledFeatures?: Array<string> | undefined;
};

/** @internal */
export const GetChainResponse$outboundSchema: z.ZodType<
  GetChainResponse$Outbound,
  z.ZodTypeDef,
  GetChainResponse
> = z.object({
  chainId: z.string(),
  status: ChainStatus$outboundSchema,
  chainName: z.string(),
  description: z.string(),
  platformChainId: z.string().optional(),
  subnetId: z.string().optional(),
  vmId: z.string().optional(),
  vmName: VmName$outboundSchema,
  explorerUrl: z.string().optional(),
  rpcUrl: z.string(),
  wsUrl: z.string().optional(),
  isTestnet: z.boolean(),
  utilityAddresses: UtilityAddresses$outboundSchema.optional(),
  networkToken: NetworkToken$outboundSchema,
  chainLogoUri: z.string().optional(),
  private: z.boolean().optional(),
  enabledFeatures: z.array(GetChainResponseEnabledFeature$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetChainResponse$ {
  /** @deprecated use `GetChainResponse$inboundSchema` instead. */
  export const inboundSchema = GetChainResponse$inboundSchema;
  /** @deprecated use `GetChainResponse$outboundSchema` instead. */
  export const outboundSchema = GetChainResponse$outboundSchema;
  /** @deprecated use `GetChainResponse$Outbound` instead. */
  export type Outbound = GetChainResponse$Outbound;
}

export function getChainResponseToJSON(
  getChainResponse: GetChainResponse,
): string {
  return JSON.stringify(
    GetChainResponse$outboundSchema.parse(getChainResponse),
  );
}

export function getChainResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetChainResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetChainResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetChainResponse' from JSON`,
  );
}
