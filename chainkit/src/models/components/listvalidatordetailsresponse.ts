/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ActiveValidatorDetails,
  ActiveValidatorDetails$inboundSchema,
  ActiveValidatorDetails$Outbound,
  ActiveValidatorDetails$outboundSchema,
} from "./activevalidatordetails.js";
import {
  CompletedValidatorDetails,
  CompletedValidatorDetails$inboundSchema,
  CompletedValidatorDetails$Outbound,
  CompletedValidatorDetails$outboundSchema,
} from "./completedvalidatordetails.js";
import {
  PendingValidatorDetails,
  PendingValidatorDetails$inboundSchema,
  PendingValidatorDetails$Outbound,
  PendingValidatorDetails$outboundSchema,
} from "./pendingvalidatordetails.js";
import {
  RemovedValidatorDetails,
  RemovedValidatorDetails$inboundSchema,
  RemovedValidatorDetails$Outbound,
  RemovedValidatorDetails$outboundSchema,
} from "./removedvalidatordetails.js";

export type Validator =
  | (ActiveValidatorDetails & { validationStatus: "active" })
  | (CompletedValidatorDetails & { validationStatus: "completed" })
  | (RemovedValidatorDetails & { validationStatus: "removed" })
  | (PendingValidatorDetails & { validationStatus: "pending" });

export type ListValidatorDetailsResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  /**
   * The list of validator Details.
   */
  validators: Array<
    | (ActiveValidatorDetails & { validationStatus: "active" })
    | (CompletedValidatorDetails & { validationStatus: "completed" })
    | (RemovedValidatorDetails & { validationStatus: "removed" })
    | (PendingValidatorDetails & { validationStatus: "pending" })
  >;
};

/** @internal */
export const Validator$inboundSchema: z.ZodType<
  Validator,
  z.ZodTypeDef,
  unknown
> = z.union([
  ActiveValidatorDetails$inboundSchema.and(
    z.object({ validationStatus: z.literal("active") }).transform((v) => ({
      validationStatus: v.validationStatus,
    })),
  ),
  CompletedValidatorDetails$inboundSchema.and(
    z.object({ validationStatus: z.literal("completed") }).transform((v) => ({
      validationStatus: v.validationStatus,
    })),
  ),
  RemovedValidatorDetails$inboundSchema.and(
    z.object({ validationStatus: z.literal("removed") }).transform((v) => ({
      validationStatus: v.validationStatus,
    })),
  ),
  PendingValidatorDetails$inboundSchema.and(
    z.object({ validationStatus: z.literal("pending") }).transform((v) => ({
      validationStatus: v.validationStatus,
    })),
  ),
]);

/** @internal */
export type Validator$Outbound =
  | (ActiveValidatorDetails$Outbound & { validationStatus: "active" })
  | (CompletedValidatorDetails$Outbound & { validationStatus: "completed" })
  | (RemovedValidatorDetails$Outbound & { validationStatus: "removed" })
  | (PendingValidatorDetails$Outbound & { validationStatus: "pending" });

/** @internal */
export const Validator$outboundSchema: z.ZodType<
  Validator$Outbound,
  z.ZodTypeDef,
  Validator
> = z.union([
  ActiveValidatorDetails$outboundSchema.and(
    z.object({ validationStatus: z.literal("active") }).transform((v) => ({
      validationStatus: v.validationStatus,
    })),
  ),
  CompletedValidatorDetails$outboundSchema.and(
    z.object({ validationStatus: z.literal("completed") }).transform((v) => ({
      validationStatus: v.validationStatus,
    })),
  ),
  RemovedValidatorDetails$outboundSchema.and(
    z.object({ validationStatus: z.literal("removed") }).transform((v) => ({
      validationStatus: v.validationStatus,
    })),
  ),
  PendingValidatorDetails$outboundSchema.and(
    z.object({ validationStatus: z.literal("pending") }).transform((v) => ({
      validationStatus: v.validationStatus,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Validator$ {
  /** @deprecated use `Validator$inboundSchema` instead. */
  export const inboundSchema = Validator$inboundSchema;
  /** @deprecated use `Validator$outboundSchema` instead. */
  export const outboundSchema = Validator$outboundSchema;
  /** @deprecated use `Validator$Outbound` instead. */
  export type Outbound = Validator$Outbound;
}

export function validatorToJSON(validator: Validator): string {
  return JSON.stringify(Validator$outboundSchema.parse(validator));
}

export function validatorFromJSON(
  jsonString: string,
): SafeParseResult<Validator, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Validator$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Validator' from JSON`,
  );
}

/** @internal */
export const ListValidatorDetailsResponse$inboundSchema: z.ZodType<
  ListValidatorDetailsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  validators: z.array(
    z.union([
      ActiveValidatorDetails$inboundSchema.and(
        z.object({ validationStatus: z.literal("active") }).transform((v) => ({
          validationStatus: v.validationStatus,
        })),
      ),
      CompletedValidatorDetails$inboundSchema.and(
        z.object({ validationStatus: z.literal("completed") }).transform((
          v,
        ) => ({ validationStatus: v.validationStatus })),
      ),
      RemovedValidatorDetails$inboundSchema.and(
        z.object({ validationStatus: z.literal("removed") }).transform((v) => ({
          validationStatus: v.validationStatus,
        })),
      ),
      PendingValidatorDetails$inboundSchema.and(
        z.object({ validationStatus: z.literal("pending") }).transform((v) => ({
          validationStatus: v.validationStatus,
        })),
      ),
    ]),
  ),
});

/** @internal */
export type ListValidatorDetailsResponse$Outbound = {
  nextPageToken?: string | undefined;
  validators: Array<
    | (ActiveValidatorDetails$Outbound & { validationStatus: "active" })
    | (CompletedValidatorDetails$Outbound & { validationStatus: "completed" })
    | (RemovedValidatorDetails$Outbound & { validationStatus: "removed" })
    | (PendingValidatorDetails$Outbound & { validationStatus: "pending" })
  >;
};

/** @internal */
export const ListValidatorDetailsResponse$outboundSchema: z.ZodType<
  ListValidatorDetailsResponse$Outbound,
  z.ZodTypeDef,
  ListValidatorDetailsResponse
> = z.object({
  nextPageToken: z.string().optional(),
  validators: z.array(
    z.union([
      ActiveValidatorDetails$outboundSchema.and(
        z.object({ validationStatus: z.literal("active") }).transform((v) => ({
          validationStatus: v.validationStatus,
        })),
      ),
      CompletedValidatorDetails$outboundSchema.and(
        z.object({ validationStatus: z.literal("completed") }).transform((
          v,
        ) => ({ validationStatus: v.validationStatus })),
      ),
      RemovedValidatorDetails$outboundSchema.and(
        z.object({ validationStatus: z.literal("removed") }).transform((v) => ({
          validationStatus: v.validationStatus,
        })),
      ),
      PendingValidatorDetails$outboundSchema.and(
        z.object({ validationStatus: z.literal("pending") }).transform((v) => ({
          validationStatus: v.validationStatus,
        })),
      ),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListValidatorDetailsResponse$ {
  /** @deprecated use `ListValidatorDetailsResponse$inboundSchema` instead. */
  export const inboundSchema = ListValidatorDetailsResponse$inboundSchema;
  /** @deprecated use `ListValidatorDetailsResponse$outboundSchema` instead. */
  export const outboundSchema = ListValidatorDetailsResponse$outboundSchema;
  /** @deprecated use `ListValidatorDetailsResponse$Outbound` instead. */
  export type Outbound = ListValidatorDetailsResponse$Outbound;
}

export function listValidatorDetailsResponseToJSON(
  listValidatorDetailsResponse: ListValidatorDetailsResponse,
): string {
  return JSON.stringify(
    ListValidatorDetailsResponse$outboundSchema.parse(
      listValidatorDetailsResponse,
    ),
  );
}

export function listValidatorDetailsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListValidatorDetailsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListValidatorDetailsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListValidatorDetailsResponse' from JSON`,
  );
}
