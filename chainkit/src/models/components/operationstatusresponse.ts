/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OperationStatus,
  OperationStatus$inboundSchema,
  OperationStatus$outboundSchema,
} from "./operationstatus.js";
import {
  OperationType,
  OperationType$inboundSchema,
  OperationType$outboundSchema,
} from "./operationtype.js";
import {
  TransactionExportMetadata,
  TransactionExportMetadata$inboundSchema,
  TransactionExportMetadata$Outbound,
  TransactionExportMetadata$outboundSchema,
} from "./transactionexportmetadata.js";

export type OperationStatusResponseMetadata = TransactionExportMetadata;

export type OperationStatusResponse = {
  operationId: string;
  operationType: OperationType;
  operationStatus: OperationStatus;
  message?: string | undefined;
  metadata?: TransactionExportMetadata | undefined;
  createdAtTimestamp: number;
  updatedAtTimestamp: number;
};

/** @internal */
export const OperationStatusResponseMetadata$inboundSchema: z.ZodType<
  OperationStatusResponseMetadata,
  z.ZodTypeDef,
  unknown
> = TransactionExportMetadata$inboundSchema;

/** @internal */
export type OperationStatusResponseMetadata$Outbound =
  TransactionExportMetadata$Outbound;

/** @internal */
export const OperationStatusResponseMetadata$outboundSchema: z.ZodType<
  OperationStatusResponseMetadata$Outbound,
  z.ZodTypeDef,
  OperationStatusResponseMetadata
> = TransactionExportMetadata$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OperationStatusResponseMetadata$ {
  /** @deprecated use `OperationStatusResponseMetadata$inboundSchema` instead. */
  export const inboundSchema = OperationStatusResponseMetadata$inboundSchema;
  /** @deprecated use `OperationStatusResponseMetadata$outboundSchema` instead. */
  export const outboundSchema = OperationStatusResponseMetadata$outboundSchema;
  /** @deprecated use `OperationStatusResponseMetadata$Outbound` instead. */
  export type Outbound = OperationStatusResponseMetadata$Outbound;
}

export function operationStatusResponseMetadataToJSON(
  operationStatusResponseMetadata: OperationStatusResponseMetadata,
): string {
  return JSON.stringify(
    OperationStatusResponseMetadata$outboundSchema.parse(
      operationStatusResponseMetadata,
    ),
  );
}

export function operationStatusResponseMetadataFromJSON(
  jsonString: string,
): SafeParseResult<OperationStatusResponseMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OperationStatusResponseMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OperationStatusResponseMetadata' from JSON`,
  );
}

/** @internal */
export const OperationStatusResponse$inboundSchema: z.ZodType<
  OperationStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  operationId: z.string(),
  operationType: OperationType$inboundSchema,
  operationStatus: OperationStatus$inboundSchema,
  message: z.string().optional(),
  metadata: TransactionExportMetadata$inboundSchema.optional(),
  createdAtTimestamp: z.number(),
  updatedAtTimestamp: z.number(),
});

/** @internal */
export type OperationStatusResponse$Outbound = {
  operationId: string;
  operationType: string;
  operationStatus: string;
  message?: string | undefined;
  metadata?: TransactionExportMetadata$Outbound | undefined;
  createdAtTimestamp: number;
  updatedAtTimestamp: number;
};

/** @internal */
export const OperationStatusResponse$outboundSchema: z.ZodType<
  OperationStatusResponse$Outbound,
  z.ZodTypeDef,
  OperationStatusResponse
> = z.object({
  operationId: z.string(),
  operationType: OperationType$outboundSchema,
  operationStatus: OperationStatus$outboundSchema,
  message: z.string().optional(),
  metadata: TransactionExportMetadata$outboundSchema.optional(),
  createdAtTimestamp: z.number(),
  updatedAtTimestamp: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OperationStatusResponse$ {
  /** @deprecated use `OperationStatusResponse$inboundSchema` instead. */
  export const inboundSchema = OperationStatusResponse$inboundSchema;
  /** @deprecated use `OperationStatusResponse$outboundSchema` instead. */
  export const outboundSchema = OperationStatusResponse$outboundSchema;
  /** @deprecated use `OperationStatusResponse$Outbound` instead. */
  export type Outbound = OperationStatusResponse$Outbound;
}

export function operationStatusResponseToJSON(
  operationStatusResponse: OperationStatusResponse,
): string {
  return JSON.stringify(
    OperationStatusResponse$outboundSchema.parse(operationStatusResponse),
  );
}

export function operationStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<OperationStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OperationStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OperationStatusResponse' from JSON`,
  );
}
