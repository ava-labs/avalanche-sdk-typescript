/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { notificationsAccess } from "../funcs/notificationsAccess.js";
import { notificationsSubscribe } from "../funcs/notificationsSubscribe.js";
import { notificationsSubscriptions } from "../funcs/notificationsSubscriptions.js";
import { notificationsUnsubscribe } from "../funcs/notificationsUnsubscribe.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Notifications extends ClientSDK {
  /**
   * Access Notifications
   *
   * @remarks
   * Access notifications.
   */
  async access(
    request: components.AccessRequest,
    options?: RequestOptions,
  ): Promise<components.NotificationsResponse> {
    return unwrapAsync(notificationsAccess(
      this,
      request,
      options,
    ));
  }

  /**
   * Subscribe to Notifications
   *
   * @remarks
   * Subscribe to receive notifications.
   */
  async subscribe(
    request: components.SubscribeRequest,
    options?: RequestOptions,
  ): Promise<components.NotificationsResponse> {
    return unwrapAsync(notificationsSubscribe(
      this,
      request,
      options,
    ));
  }

  /**
   * Unsubscribe from Notifications
   *
   * @remarks
   * Unsubscribe from receiving notifications.
   */
  async unsubscribe(
    request: components.UnsubscribeRequest,
    options?: RequestOptions,
  ): Promise<components.NotificationsResponse> {
    return unwrapAsync(notificationsUnsubscribe(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Subscriptions
   *
   * @remarks
   * Get subscriptions.
   */
  async subscriptions(
    request: components.SubscriptionsRequest,
    options?: RequestOptions,
  ): Promise<components.SubscriptionsResponse> {
    return unwrapAsync(notificationsSubscriptions(
      this,
      request,
      options,
    ));
  }
}
