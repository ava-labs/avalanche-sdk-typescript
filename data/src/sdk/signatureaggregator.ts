/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dataSignatureAggregatorAggregateSignatures } from "../funcs/dataSignatureAggregatorAggregateSignatures.js";
import { dataSignatureAggregatorGetAggregatedSignatures } from "../funcs/dataSignatureAggregatorGetAggregatedSignatures.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class SignatureAggregator extends ClientSDK {
  /**
   * Aggregate Signatures
   *
   * @remarks
   * Aggregates Signatures for a Warp message from Subnet validators.
   */
  async aggregateSignatures(
    request: operations.AggregateSignaturesRequest,
    options?: RequestOptions,
  ): Promise<components.SignatureAggregationResponse> {
    return unwrapAsync(dataSignatureAggregatorAggregateSignatures(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Aggregated Signatures
   *
   * @remarks
   * Get Aggregated Signatures for a P-Chain L1 related Warp Message.
   */
  async getAggregatedSignatures(
    request: operations.GetAggregatedSignaturesRequest,
    options?: RequestOptions,
  ): Promise<components.SignatureAggregationResponse> {
    return unwrapAsync(dataSignatureAggregatorGetAggregatedSignatures(
      this,
      request,
      options,
    ));
  }
}
