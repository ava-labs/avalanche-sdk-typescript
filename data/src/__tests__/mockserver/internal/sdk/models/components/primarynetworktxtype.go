// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type PrimaryNetworkTxType string

const (
	PrimaryNetworkTxTypeAddValidatorTx               PrimaryNetworkTxType = "AddValidatorTx"
	PrimaryNetworkTxTypeAddSubnetValidatorTx         PrimaryNetworkTxType = "AddSubnetValidatorTx"
	PrimaryNetworkTxTypeAddDelegatorTx               PrimaryNetworkTxType = "AddDelegatorTx"
	PrimaryNetworkTxTypeCreateChainTx                PrimaryNetworkTxType = "CreateChainTx"
	PrimaryNetworkTxTypeCreateSubnetTx               PrimaryNetworkTxType = "CreateSubnetTx"
	PrimaryNetworkTxTypeImportTx                     PrimaryNetworkTxType = "ImportTx"
	PrimaryNetworkTxTypeExportTx                     PrimaryNetworkTxType = "ExportTx"
	PrimaryNetworkTxTypeAdvanceTimeTx                PrimaryNetworkTxType = "AdvanceTimeTx"
	PrimaryNetworkTxTypeRewardValidatorTx            PrimaryNetworkTxType = "RewardValidatorTx"
	PrimaryNetworkTxTypeRemoveSubnetValidatorTx      PrimaryNetworkTxType = "RemoveSubnetValidatorTx"
	PrimaryNetworkTxTypeTransformSubnetTx            PrimaryNetworkTxType = "TransformSubnetTx"
	PrimaryNetworkTxTypeAddPermissionlessValidatorTx PrimaryNetworkTxType = "AddPermissionlessValidatorTx"
	PrimaryNetworkTxTypeAddPermissionlessDelegatorTx PrimaryNetworkTxType = "AddPermissionlessDelegatorTx"
	PrimaryNetworkTxTypeBaseTx                       PrimaryNetworkTxType = "BaseTx"
	PrimaryNetworkTxTypeTransferSubnetOwnershipTx    PrimaryNetworkTxType = "TransferSubnetOwnershipTx"
	PrimaryNetworkTxTypeConvertSubnetToL1Tx          PrimaryNetworkTxType = "ConvertSubnetToL1Tx"
	PrimaryNetworkTxTypeRegisterL1ValidatorTx        PrimaryNetworkTxType = "RegisterL1ValidatorTx"
	PrimaryNetworkTxTypeSetL1ValidatorWeightTx       PrimaryNetworkTxType = "SetL1ValidatorWeightTx"
	PrimaryNetworkTxTypeDisableL1ValidatorTx         PrimaryNetworkTxType = "DisableL1ValidatorTx"
	PrimaryNetworkTxTypeIncreaseL1ValidatorBalanceTx PrimaryNetworkTxType = "IncreaseL1ValidatorBalanceTx"
	PrimaryNetworkTxTypeUnknown                      PrimaryNetworkTxType = "UNKNOWN"
	PrimaryNetworkTxTypeCreateAssetTx                PrimaryNetworkTxType = "CreateAssetTx"
	PrimaryNetworkTxTypeOperationTx                  PrimaryNetworkTxType = "OperationTx"
)

func (e PrimaryNetworkTxType) ToPointer() *PrimaryNetworkTxType {
	return &e
}
func (e *PrimaryNetworkTxType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AddValidatorTx":
		fallthrough
	case "AddSubnetValidatorTx":
		fallthrough
	case "AddDelegatorTx":
		fallthrough
	case "CreateChainTx":
		fallthrough
	case "CreateSubnetTx":
		fallthrough
	case "ImportTx":
		fallthrough
	case "ExportTx":
		fallthrough
	case "AdvanceTimeTx":
		fallthrough
	case "RewardValidatorTx":
		fallthrough
	case "RemoveSubnetValidatorTx":
		fallthrough
	case "TransformSubnetTx":
		fallthrough
	case "AddPermissionlessValidatorTx":
		fallthrough
	case "AddPermissionlessDelegatorTx":
		fallthrough
	case "BaseTx":
		fallthrough
	case "TransferSubnetOwnershipTx":
		fallthrough
	case "ConvertSubnetToL1Tx":
		fallthrough
	case "RegisterL1ValidatorTx":
		fallthrough
	case "SetL1ValidatorWeightTx":
		fallthrough
	case "DisableL1ValidatorTx":
		fallthrough
	case "IncreaseL1ValidatorBalanceTx":
		fallthrough
	case "UNKNOWN":
		fallthrough
	case "CreateAssetTx":
		fallthrough
	case "OperationTx":
		*e = PrimaryNetworkTxType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PrimaryNetworkTxType: %v", v)
	}
}
