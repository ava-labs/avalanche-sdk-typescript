// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type IcmRewardDetailsErcType string

const (
	IcmRewardDetailsErcTypeErc20 IcmRewardDetailsErcType = "ERC-20"
)

func (e IcmRewardDetailsErcType) ToPointer() *IcmRewardDetailsErcType {
	return &e
}
func (e *IcmRewardDetailsErcType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ERC-20":
		*e = IcmRewardDetailsErcType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IcmRewardDetailsErcType: %v", v)
	}
}

type IcmRewardDetails struct {
	// A wallet or contract address in mixed-case checksum encoding.
	Address string `json:"address"`
	// The contract name.
	Name string `json:"name"`
	// The contract symbol.
	Symbol string `json:"symbol"`
	// The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation.
	Decimals float64 `json:"decimals"`
	// The logo uri for the address.
	LogoURI *string                 `json:"logoUri,omitempty"`
	ErcType IcmRewardDetailsErcType `json:"ercType"`
	// The token price, if available.
	Price *Money `json:"price,omitempty"`
	Value string `json:"value"`
}

func (o *IcmRewardDetails) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *IcmRewardDetails) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *IcmRewardDetails) GetSymbol() string {
	if o == nil {
		return ""
	}
	return o.Symbol
}

func (o *IcmRewardDetails) GetDecimals() float64 {
	if o == nil {
		return 0.0
	}
	return o.Decimals
}

func (o *IcmRewardDetails) GetLogoURI() *string {
	if o == nil {
		return nil
	}
	return o.LogoURI
}

func (o *IcmRewardDetails) GetErcType() IcmRewardDetailsErcType {
	if o == nil {
		return IcmRewardDetailsErcType("")
	}
	return o.ErcType
}

func (o *IcmRewardDetails) GetPrice() *Money {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *IcmRewardDetails) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}
