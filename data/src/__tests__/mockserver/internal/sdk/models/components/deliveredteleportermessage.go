// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type DeliveredTeleporterMessageStatus string

const (
	DeliveredTeleporterMessageStatusDelivered DeliveredTeleporterMessageStatus = "delivered"
)

func (e DeliveredTeleporterMessageStatus) ToPointer() *DeliveredTeleporterMessageStatus {
	return &e
}
func (e *DeliveredTeleporterMessageStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delivered":
		*e = DeliveredTeleporterMessageStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeliveredTeleporterMessageStatus: %v", v)
	}
}

type DeliveredTeleporterMessage struct {
	MessageID                 string                           `json:"messageId"`
	TeleporterContractAddress string                           `json:"teleporterContractAddress"`
	SourceBlockchainID        string                           `json:"sourceBlockchainId"`
	DestinationBlockchainID   string                           `json:"destinationBlockchainId"`
	SourceEvmChainID          string                           `json:"sourceEvmChainId"`
	DestinationEvmChainID     string                           `json:"destinationEvmChainId"`
	MessageNonce              string                           `json:"messageNonce"`
	From                      string                           `json:"from"`
	To                        string                           `json:"to"`
	Data                      *string                          `json:"data,omitempty"`
	MessageExecuted           bool                             `json:"messageExecuted"`
	Receipts                  []TeleporterReceipt              `json:"receipts"`
	ReceiptDelivered          bool                             `json:"receiptDelivered"`
	RewardDetails             TeleporterRewardDetails          `json:"rewardDetails"`
	SourceTransaction         TeleporterSourceTransaction      `json:"sourceTransaction"`
	DestinationTransaction    TeleporterDestinationTransaction `json:"destinationTransaction"`
	Status                    DeliveredTeleporterMessageStatus `json:"status"`
}

func (o *DeliveredTeleporterMessage) GetMessageID() string {
	if o == nil {
		return ""
	}
	return o.MessageID
}

func (o *DeliveredTeleporterMessage) GetTeleporterContractAddress() string {
	if o == nil {
		return ""
	}
	return o.TeleporterContractAddress
}

func (o *DeliveredTeleporterMessage) GetSourceBlockchainID() string {
	if o == nil {
		return ""
	}
	return o.SourceBlockchainID
}

func (o *DeliveredTeleporterMessage) GetDestinationBlockchainID() string {
	if o == nil {
		return ""
	}
	return o.DestinationBlockchainID
}

func (o *DeliveredTeleporterMessage) GetSourceEvmChainID() string {
	if o == nil {
		return ""
	}
	return o.SourceEvmChainID
}

func (o *DeliveredTeleporterMessage) GetDestinationEvmChainID() string {
	if o == nil {
		return ""
	}
	return o.DestinationEvmChainID
}

func (o *DeliveredTeleporterMessage) GetMessageNonce() string {
	if o == nil {
		return ""
	}
	return o.MessageNonce
}

func (o *DeliveredTeleporterMessage) GetFrom() string {
	if o == nil {
		return ""
	}
	return o.From
}

func (o *DeliveredTeleporterMessage) GetTo() string {
	if o == nil {
		return ""
	}
	return o.To
}

func (o *DeliveredTeleporterMessage) GetData() *string {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *DeliveredTeleporterMessage) GetMessageExecuted() bool {
	if o == nil {
		return false
	}
	return o.MessageExecuted
}

func (o *DeliveredTeleporterMessage) GetReceipts() []TeleporterReceipt {
	if o == nil {
		return []TeleporterReceipt{}
	}
	return o.Receipts
}

func (o *DeliveredTeleporterMessage) GetReceiptDelivered() bool {
	if o == nil {
		return false
	}
	return o.ReceiptDelivered
}

func (o *DeliveredTeleporterMessage) GetRewardDetails() TeleporterRewardDetails {
	if o == nil {
		return TeleporterRewardDetails{}
	}
	return o.RewardDetails
}

func (o *DeliveredTeleporterMessage) GetSourceTransaction() TeleporterSourceTransaction {
	if o == nil {
		return TeleporterSourceTransaction{}
	}
	return o.SourceTransaction
}

func (o *DeliveredTeleporterMessage) GetDestinationTransaction() TeleporterDestinationTransaction {
	if o == nil {
		return TeleporterDestinationTransaction{}
	}
	return o.DestinationTransaction
}

func (o *DeliveredTeleporterMessage) GetStatus() DeliveredTeleporterMessageStatus {
	if o == nil {
		return DeliveredTeleporterMessageStatus("")
	}
	return o.Status
}
