// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type PChainTransaction struct {
	// A P-Chain transaction hash.
	TxHash string                `json:"txHash"`
	TxType PChainTransactionType `json:"txType"`
	// The block finality timestamp.
	BlockTimestamp float64 `json:"blockTimestamp"`
	// The height of the block in which the transaction was included
	BlockNumber string `json:"blockNumber"`
	BlockHash   string `json:"blockHash"`
	// The consumed UTXOs of the transaction
	ConsumedUtxos []PChainUtxo `json:"consumedUtxos"`
	// The newly created UTXOs of the transaction
	EmittedUtxos []PChainUtxo `json:"emittedUtxos"`
	// Source chain for an atomic transaction.
	SourceChain *string `json:"sourceChain,omitempty"`
	// Destination chain for an atomic transaction.
	DestinationChain *string `json:"destinationChain,omitempty"`
	// A list of objects containing P-chain Asset basic info and the amount of that Asset ID. The amount of nAVAX present in the newly created UTXOs of the transaction
	Value []AssetAmount `json:"value"`
	// A list of objects containing P-chain Asset basic info and the amount of that Asset ID. The nAVAX amount burned in a transaction, partially or fully contributing to the transaction fee
	AmountBurned []AssetAmount `json:"amountBurned"`
	// A list of objects containing P-chain Asset basic info and the amount of that Asset ID. Present for AddValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx
	AmountStaked []AssetAmount `json:"amountStaked"`
	// A list of objects containing P-chain Asset basic info and the amount of that Asset ID. The amount of nAVAX locked for pay-as-you-go continuous fees to sustain L1 validation.
	AmountL1ValidatorBalanceBurned []AssetAmount `json:"amountL1ValidatorBalanceBurned"`
	// Present for AddValidatorTx, AddSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx
	StartTimestamp *float64 `json:"startTimestamp,omitempty"`
	// Present for AddValidatorTx, AddSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx
	EndTimestamp *float64 `json:"endTimestamp,omitempty"`
	// The percentage of total estimated delegator rewards allocated to validator nodes for supporting delegations. Present for AddValidatorTx, AddPermissionlessValidatorTx
	DelegationFeePercent *string `json:"delegationFeePercent,omitempty"`
	// The NodeID of the validator node linked to the stake transaction. Present for AddValidatorTx, AddSubnetValidatorTx, RemoveSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx
	NodeID *string `json:"nodeId,omitempty"`
	// Present for AddValidatorTx, AddSubnetValidatorTx, RemoveSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx, CreateChainTx, CreateSubnetTx
	SubnetID *string `json:"subnetId,omitempty"`
	// Details of the L1's validator manager contract and blockchain. Present for the ConvertSubnetToL1Tx which transforms a subnet into L1
	L1ValidatorManagerDetails *L1ValidatorManagerDetails `json:"l1ValidatorManagerDetails,omitempty"`
	// Details of L1 validators registered or changed in the current transaction. The details reflect the state at the time of the transaction, not in real-time
	L1ValidatorDetails []L1ValidatorDetailsTransaction `json:"l1ValidatorDetails,omitempty"`
	// Estimated reward from the staking transaction, if successful. Present for AddValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx
	EstimatedReward *string `json:"estimatedReward,omitempty"`
	// Reward transaction hash for the completed validations or delegations
	RewardTxHash    *string  `json:"rewardTxHash,omitempty"`
	RewardAddresses []string `json:"rewardAddresses,omitempty"`
	Memo            *string  `json:"memo,omitempty"`
	// Staking transaction corresponding to the RewardValidatorTx
	StakingTxHash *string `json:"stakingTxHash,omitempty"`
	// Subnet owner details for the CreateSubnetTx or TransferSubnetOwnershipTx
	SubnetOwnershipInfo *SubnetOwnershipInfo `json:"subnetOwnershipInfo,omitempty"`
	// Public Key and PoP of new validator registrations. Present for AddPermissionlessValidatorTx
	BlsCredentials *BlsCredentials `json:"blsCredentials,omitempty"`
	// Details of the blockchain that was created in the CreateChainTx
	BlockchainInfo *BlockchainInfo `json:"blockchainInfo,omitempty"`
}

func (o *PChainTransaction) GetTxHash() string {
	if o == nil {
		return ""
	}
	return o.TxHash
}

func (o *PChainTransaction) GetTxType() PChainTransactionType {
	if o == nil {
		return PChainTransactionType("")
	}
	return o.TxType
}

func (o *PChainTransaction) GetBlockTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.BlockTimestamp
}

func (o *PChainTransaction) GetBlockNumber() string {
	if o == nil {
		return ""
	}
	return o.BlockNumber
}

func (o *PChainTransaction) GetBlockHash() string {
	if o == nil {
		return ""
	}
	return o.BlockHash
}

func (o *PChainTransaction) GetConsumedUtxos() []PChainUtxo {
	if o == nil {
		return []PChainUtxo{}
	}
	return o.ConsumedUtxos
}

func (o *PChainTransaction) GetEmittedUtxos() []PChainUtxo {
	if o == nil {
		return []PChainUtxo{}
	}
	return o.EmittedUtxos
}

func (o *PChainTransaction) GetSourceChain() *string {
	if o == nil {
		return nil
	}
	return o.SourceChain
}

func (o *PChainTransaction) GetDestinationChain() *string {
	if o == nil {
		return nil
	}
	return o.DestinationChain
}

func (o *PChainTransaction) GetValue() []AssetAmount {
	if o == nil {
		return []AssetAmount{}
	}
	return o.Value
}

func (o *PChainTransaction) GetAmountBurned() []AssetAmount {
	if o == nil {
		return []AssetAmount{}
	}
	return o.AmountBurned
}

func (o *PChainTransaction) GetAmountStaked() []AssetAmount {
	if o == nil {
		return []AssetAmount{}
	}
	return o.AmountStaked
}

func (o *PChainTransaction) GetAmountL1ValidatorBalanceBurned() []AssetAmount {
	if o == nil {
		return []AssetAmount{}
	}
	return o.AmountL1ValidatorBalanceBurned
}

func (o *PChainTransaction) GetStartTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.StartTimestamp
}

func (o *PChainTransaction) GetEndTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.EndTimestamp
}

func (o *PChainTransaction) GetDelegationFeePercent() *string {
	if o == nil {
		return nil
	}
	return o.DelegationFeePercent
}

func (o *PChainTransaction) GetNodeID() *string {
	if o == nil {
		return nil
	}
	return o.NodeID
}

func (o *PChainTransaction) GetSubnetID() *string {
	if o == nil {
		return nil
	}
	return o.SubnetID
}

func (o *PChainTransaction) GetL1ValidatorManagerDetails() *L1ValidatorManagerDetails {
	if o == nil {
		return nil
	}
	return o.L1ValidatorManagerDetails
}

func (o *PChainTransaction) GetL1ValidatorDetails() []L1ValidatorDetailsTransaction {
	if o == nil {
		return nil
	}
	return o.L1ValidatorDetails
}

func (o *PChainTransaction) GetEstimatedReward() *string {
	if o == nil {
		return nil
	}
	return o.EstimatedReward
}

func (o *PChainTransaction) GetRewardTxHash() *string {
	if o == nil {
		return nil
	}
	return o.RewardTxHash
}

func (o *PChainTransaction) GetRewardAddresses() []string {
	if o == nil {
		return nil
	}
	return o.RewardAddresses
}

func (o *PChainTransaction) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *PChainTransaction) GetStakingTxHash() *string {
	if o == nil {
		return nil
	}
	return o.StakingTxHash
}

func (o *PChainTransaction) GetSubnetOwnershipInfo() *SubnetOwnershipInfo {
	if o == nil {
		return nil
	}
	return o.SubnetOwnershipInfo
}

func (o *PChainTransaction) GetBlsCredentials() *BlsCredentials {
	if o == nil {
		return nil
	}
	return o.BlsCredentials
}

func (o *PChainTransaction) GetBlockchainInfo() *BlockchainInfo {
	if o == nil {
		return nil
	}
	return o.BlockchainInfo
}
