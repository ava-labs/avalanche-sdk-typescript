// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type PendingDelegatorDetailsDelegationStatus string

const (
	PendingDelegatorDetailsDelegationStatusPending PendingDelegatorDetailsDelegationStatus = "pending"
)

func (e PendingDelegatorDetailsDelegationStatus) ToPointer() *PendingDelegatorDetailsDelegationStatus {
	return &e
}
func (e *PendingDelegatorDetailsDelegationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		*e = PendingDelegatorDetailsDelegationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingDelegatorDetailsDelegationStatus: %v", v)
	}
}

type PendingDelegatorDetails struct {
	TxHash          string   `json:"txHash"`
	NodeID          string   `json:"nodeId"`
	RewardAddresses []string `json:"rewardAddresses"`
	AmountDelegated string   `json:"amountDelegated"`
	DelegationFee   string   `json:"delegationFee"`
	StartTimestamp  float64  `json:"startTimestamp"`
	EndTimestamp    float64  `json:"endTimestamp"`
	// Estimated total rewards that will be distributed for the successful delegation.
	EstimatedGrossReward string `json:"estimatedGrossReward"`
	// Estimated net rewards that will be distributed to the delegator after deducting delegation fee from the gross reward for the successful delegation.
	EstimatedNetReward string                                  `json:"estimatedNetReward"`
	DelegationStatus   PendingDelegatorDetailsDelegationStatus `json:"delegationStatus"`
}

func (o *PendingDelegatorDetails) GetTxHash() string {
	if o == nil {
		return ""
	}
	return o.TxHash
}

func (o *PendingDelegatorDetails) GetNodeID() string {
	if o == nil {
		return ""
	}
	return o.NodeID
}

func (o *PendingDelegatorDetails) GetRewardAddresses() []string {
	if o == nil {
		return []string{}
	}
	return o.RewardAddresses
}

func (o *PendingDelegatorDetails) GetAmountDelegated() string {
	if o == nil {
		return ""
	}
	return o.AmountDelegated
}

func (o *PendingDelegatorDetails) GetDelegationFee() string {
	if o == nil {
		return ""
	}
	return o.DelegationFee
}

func (o *PendingDelegatorDetails) GetStartTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartTimestamp
}

func (o *PendingDelegatorDetails) GetEndTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.EndTimestamp
}

func (o *PendingDelegatorDetails) GetEstimatedGrossReward() string {
	if o == nil {
		return ""
	}
	return o.EstimatedGrossReward
}

func (o *PendingDelegatorDetails) GetEstimatedNetReward() string {
	if o == nil {
		return ""
	}
	return o.EstimatedNetReward
}

func (o *PendingDelegatorDetails) GetDelegationStatus() PendingDelegatorDetailsDelegationStatus {
	if o == nil {
		return PendingDelegatorDetailsDelegationStatus("")
	}
	return o.DelegationStatus
}
