// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type GetChainResponseEnabledFeature string

const (
	GetChainResponseEnabledFeatureNftIndexing GetChainResponseEnabledFeature = "nftIndexing"
	GetChainResponseEnabledFeatureWebhooks    GetChainResponseEnabledFeature = "webhooks"
	GetChainResponseEnabledFeatureTeleporter  GetChainResponseEnabledFeature = "teleporter"
)

func (e GetChainResponseEnabledFeature) ToPointer() *GetChainResponseEnabledFeature {
	return &e
}
func (e *GetChainResponseEnabledFeature) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "nftIndexing":
		fallthrough
	case "webhooks":
		fallthrough
	case "teleporter":
		*e = GetChainResponseEnabledFeature(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetChainResponseEnabledFeature: %v", v)
	}
}

type GetChainResponse struct {
	ChainID string `json:"chainId"`
	// Status of chain nodes. Chain nodes can become temporarily `UNAVAILABLE` for several reasons, such as validator stake falling below threshold. If chain nodes are `UNAVAILABLE`, requests that rely on data from the chain nodes may return 503 errors.
	Status           ChainStatus                      `json:"status"`
	ChainName        string                           `json:"chainName"`
	Description      string                           `json:"description"`
	PlatformChainID  *string                          `json:"platformChainId,omitempty"`
	SubnetID         *string                          `json:"subnetId,omitempty"`
	VMID             *string                          `json:"vmId,omitempty"`
	VMName           VMName                           `json:"vmName"`
	ExplorerURL      *string                          `json:"explorerUrl,omitempty"`
	RPCURL           string                           `json:"rpcUrl"`
	WsURL            *string                          `json:"wsUrl,omitempty"`
	IsTestnet        bool                             `json:"isTestnet"`
	UtilityAddresses *UtilityAddresses                `json:"utilityAddresses,omitempty"`
	NetworkToken     NetworkToken                     `json:"networkToken"`
	ChainLogoURI     *string                          `json:"chainLogoUri,omitempty"`
	Private          *bool                            `json:"private,omitempty"`
	EnabledFeatures  []GetChainResponseEnabledFeature `json:"enabledFeatures,omitempty"`
}

func (o *GetChainResponse) GetChainID() string {
	if o == nil {
		return ""
	}
	return o.ChainID
}

func (o *GetChainResponse) GetStatus() ChainStatus {
	if o == nil {
		return ChainStatus("")
	}
	return o.Status
}

func (o *GetChainResponse) GetChainName() string {
	if o == nil {
		return ""
	}
	return o.ChainName
}

func (o *GetChainResponse) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetChainResponse) GetPlatformChainID() *string {
	if o == nil {
		return nil
	}
	return o.PlatformChainID
}

func (o *GetChainResponse) GetSubnetID() *string {
	if o == nil {
		return nil
	}
	return o.SubnetID
}

func (o *GetChainResponse) GetVMID() *string {
	if o == nil {
		return nil
	}
	return o.VMID
}

func (o *GetChainResponse) GetVMName() VMName {
	if o == nil {
		return VMName("")
	}
	return o.VMName
}

func (o *GetChainResponse) GetExplorerURL() *string {
	if o == nil {
		return nil
	}
	return o.ExplorerURL
}

func (o *GetChainResponse) GetRPCURL() string {
	if o == nil {
		return ""
	}
	return o.RPCURL
}

func (o *GetChainResponse) GetWsURL() *string {
	if o == nil {
		return nil
	}
	return o.WsURL
}

func (o *GetChainResponse) GetIsTestnet() bool {
	if o == nil {
		return false
	}
	return o.IsTestnet
}

func (o *GetChainResponse) GetUtilityAddresses() *UtilityAddresses {
	if o == nil {
		return nil
	}
	return o.UtilityAddresses
}

func (o *GetChainResponse) GetNetworkToken() NetworkToken {
	if o == nil {
		return NetworkToken{}
	}
	return o.NetworkToken
}

func (o *GetChainResponse) GetChainLogoURI() *string {
	if o == nil {
		return nil
	}
	return o.ChainLogoURI
}

func (o *GetChainResponse) GetPrivate() *bool {
	if o == nil {
		return nil
	}
	return o.Private
}

func (o *GetChainResponse) GetEnabledFeatures() []GetChainResponseEnabledFeature {
	if o == nil {
		return nil
	}
	return o.EnabledFeatures
}
