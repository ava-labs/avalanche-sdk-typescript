// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type HealthCheckResultDtoStatus string

const (
	HealthCheckResultDtoStatusError        HealthCheckResultDtoStatus = "error"
	HealthCheckResultDtoStatusOk           HealthCheckResultDtoStatus = "ok"
	HealthCheckResultDtoStatusShuttingDown HealthCheckResultDtoStatus = "shutting_down"
)

func (e HealthCheckResultDtoStatus) ToPointer() *HealthCheckResultDtoStatus {
	return &e
}
func (e *HealthCheckResultDtoStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "ok":
		fallthrough
	case "shutting_down":
		*e = HealthCheckResultDtoStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HealthCheckResultDtoStatus: %v", v)
	}
}

type HealthCheckResultDto struct {
	Status  *HealthCheckResultDtoStatus         `json:"status,omitempty"`
	Info    map[string]HealthIndicatorResultDto `json:"info,omitempty"`
	Error   map[string]HealthIndicatorResultDto `json:"error,omitempty"`
	Details map[string]HealthIndicatorResultDto `json:"details,omitempty"`
}

func (o *HealthCheckResultDto) GetStatus() *HealthCheckResultDtoStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *HealthCheckResultDto) GetInfo() map[string]HealthIndicatorResultDto {
	if o == nil {
		return nil
	}
	return o.Info
}

func (o *HealthCheckResultDto) GetError() map[string]HealthIndicatorResultDto {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *HealthCheckResultDto) GetDetails() map[string]HealthIndicatorResultDto {
	if o == nil {
		return nil
	}
	return o.Details
}
