// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type TransferType string

const (
	TransferTypeErc20Transfer   TransferType = "Erc20Transfer"
	TransferTypeErc721Transfer  TransferType = "Erc721Transfer"
	TransferTypeErc1155Transfer TransferType = "Erc1155Transfer"
)

type Transfer struct {
	Erc20Transfer   *Erc20Transfer   `queryParam:"inline"`
	Erc721Transfer  *Erc721Transfer  `queryParam:"inline"`
	Erc1155Transfer *Erc1155Transfer `queryParam:"inline"`

	Type TransferType
}

func CreateTransferErc20Transfer(erc20Transfer Erc20Transfer) Transfer {
	typ := TransferTypeErc20Transfer

	return Transfer{
		Erc20Transfer: &erc20Transfer,
		Type:          typ,
	}
}

func CreateTransferErc721Transfer(erc721Transfer Erc721Transfer) Transfer {
	typ := TransferTypeErc721Transfer

	return Transfer{
		Erc721Transfer: &erc721Transfer,
		Type:           typ,
	}
}

func CreateTransferErc1155Transfer(erc1155Transfer Erc1155Transfer) Transfer {
	typ := TransferTypeErc1155Transfer

	return Transfer{
		Erc1155Transfer: &erc1155Transfer,
		Type:            typ,
	}
}

func (u *Transfer) UnmarshalJSON(data []byte) error {

	var erc721Transfer Erc721Transfer = Erc721Transfer{}
	if err := utils.UnmarshalJSON(data, &erc721Transfer, "", true, true); err == nil {
		u.Erc721Transfer = &erc721Transfer
		u.Type = TransferTypeErc721Transfer
		return nil
	}

	var erc20Transfer Erc20Transfer = Erc20Transfer{}
	if err := utils.UnmarshalJSON(data, &erc20Transfer, "", true, true); err == nil {
		u.Erc20Transfer = &erc20Transfer
		u.Type = TransferTypeErc20Transfer
		return nil
	}

	var erc1155Transfer Erc1155Transfer = Erc1155Transfer{}
	if err := utils.UnmarshalJSON(data, &erc1155Transfer, "", true, true); err == nil {
		u.Erc1155Transfer = &erc1155Transfer
		u.Type = TransferTypeErc1155Transfer
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Transfer", string(data))
}

func (u Transfer) MarshalJSON() ([]byte, error) {
	if u.Erc20Transfer != nil {
		return utils.MarshalJSON(u.Erc20Transfer, "", true)
	}

	if u.Erc721Transfer != nil {
		return utils.MarshalJSON(u.Erc721Transfer, "", true)
	}

	if u.Erc1155Transfer != nil {
		return utils.MarshalJSON(u.Erc1155Transfer, "", true)
	}

	return nil, errors.New("could not marshal union type Transfer: all fields are null")
}

type ListTransfersResponse struct {
	// A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
	NextPageToken *string    `json:"nextPageToken,omitempty"`
	Transfers     []Transfer `json:"transfers"`
}

func (o *ListTransfersResponse) GetNextPageToken() *string {
	if o == nil {
		return nil
	}
	return o.NextPageToken
}

func (o *ListTransfersResponse) GetTransfers() []Transfer {
	if o == nil {
		return []Transfer{}
	}
	return o.Transfers
}
