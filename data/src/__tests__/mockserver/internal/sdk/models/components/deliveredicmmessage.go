// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type DeliveredIcmMessageStatus string

const (
	DeliveredIcmMessageStatusDelivered DeliveredIcmMessageStatus = "delivered"
)

func (e DeliveredIcmMessageStatus) ToPointer() *DeliveredIcmMessageStatus {
	return &e
}
func (e *DeliveredIcmMessageStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delivered":
		*e = DeliveredIcmMessageStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeliveredIcmMessageStatus: %v", v)
	}
}

type DeliveredIcmMessage struct {
	MessageID               string                    `json:"messageId"`
	IcmContractAddress      string                    `json:"icmContractAddress"`
	SourceBlockchainID      string                    `json:"sourceBlockchainId"`
	DestinationBlockchainID string                    `json:"destinationBlockchainId"`
	SourceEvmChainID        string                    `json:"sourceEvmChainId"`
	DestinationEvmChainID   string                    `json:"destinationEvmChainId"`
	MessageNonce            string                    `json:"messageNonce"`
	From                    string                    `json:"from"`
	To                      string                    `json:"to"`
	Data                    *string                   `json:"data,omitempty"`
	MessageExecuted         bool                      `json:"messageExecuted"`
	Receipts                []IcmReceipt              `json:"receipts"`
	ReceiptDelivered        bool                      `json:"receiptDelivered"`
	RewardDetails           IcmRewardDetails          `json:"rewardDetails"`
	SourceTransaction       IcmSourceTransaction      `json:"sourceTransaction"`
	DestinationTransaction  IcmDestinationTransaction `json:"destinationTransaction"`
	Status                  DeliveredIcmMessageStatus `json:"status"`
}

func (o *DeliveredIcmMessage) GetMessageID() string {
	if o == nil {
		return ""
	}
	return o.MessageID
}

func (o *DeliveredIcmMessage) GetIcmContractAddress() string {
	if o == nil {
		return ""
	}
	return o.IcmContractAddress
}

func (o *DeliveredIcmMessage) GetSourceBlockchainID() string {
	if o == nil {
		return ""
	}
	return o.SourceBlockchainID
}

func (o *DeliveredIcmMessage) GetDestinationBlockchainID() string {
	if o == nil {
		return ""
	}
	return o.DestinationBlockchainID
}

func (o *DeliveredIcmMessage) GetSourceEvmChainID() string {
	if o == nil {
		return ""
	}
	return o.SourceEvmChainID
}

func (o *DeliveredIcmMessage) GetDestinationEvmChainID() string {
	if o == nil {
		return ""
	}
	return o.DestinationEvmChainID
}

func (o *DeliveredIcmMessage) GetMessageNonce() string {
	if o == nil {
		return ""
	}
	return o.MessageNonce
}

func (o *DeliveredIcmMessage) GetFrom() string {
	if o == nil {
		return ""
	}
	return o.From
}

func (o *DeliveredIcmMessage) GetTo() string {
	if o == nil {
		return ""
	}
	return o.To
}

func (o *DeliveredIcmMessage) GetData() *string {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *DeliveredIcmMessage) GetMessageExecuted() bool {
	if o == nil {
		return false
	}
	return o.MessageExecuted
}

func (o *DeliveredIcmMessage) GetReceipts() []IcmReceipt {
	if o == nil {
		return []IcmReceipt{}
	}
	return o.Receipts
}

func (o *DeliveredIcmMessage) GetReceiptDelivered() bool {
	if o == nil {
		return false
	}
	return o.ReceiptDelivered
}

func (o *DeliveredIcmMessage) GetRewardDetails() IcmRewardDetails {
	if o == nil {
		return IcmRewardDetails{}
	}
	return o.RewardDetails
}

func (o *DeliveredIcmMessage) GetSourceTransaction() IcmSourceTransaction {
	if o == nil {
		return IcmSourceTransaction{}
	}
	return o.SourceTransaction
}

func (o *DeliveredIcmMessage) GetDestinationTransaction() IcmDestinationTransaction {
	if o == nil {
		return IcmDestinationTransaction{}
	}
	return o.DestinationTransaction
}

func (o *DeliveredIcmMessage) GetStatus() DeliveredIcmMessageStatus {
	if o == nil {
		return DeliveredIcmMessageStatus("")
	}
	return o.Status
}
