// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type PendingTeleporterMessageStatus string

const (
	PendingTeleporterMessageStatusPending PendingTeleporterMessageStatus = "pending"
)

func (e PendingTeleporterMessageStatus) ToPointer() *PendingTeleporterMessageStatus {
	return &e
}
func (e *PendingTeleporterMessageStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		*e = PendingTeleporterMessageStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PendingTeleporterMessageStatus: %v", v)
	}
}

type PendingTeleporterMessage struct {
	MessageID                 string                         `json:"messageId"`
	TeleporterContractAddress string                         `json:"teleporterContractAddress"`
	SourceBlockchainID        string                         `json:"sourceBlockchainId"`
	DestinationBlockchainID   string                         `json:"destinationBlockchainId"`
	SourceEvmChainID          string                         `json:"sourceEvmChainId"`
	DestinationEvmChainID     string                         `json:"destinationEvmChainId"`
	MessageNonce              string                         `json:"messageNonce"`
	From                      string                         `json:"from"`
	To                        string                         `json:"to"`
	Data                      *string                        `json:"data,omitempty"`
	MessageExecuted           bool                           `json:"messageExecuted"`
	Receipts                  []TeleporterReceipt            `json:"receipts"`
	ReceiptDelivered          bool                           `json:"receiptDelivered"`
	RewardDetails             TeleporterRewardDetails        `json:"rewardDetails"`
	SourceTransaction         TeleporterSourceTransaction    `json:"sourceTransaction"`
	Status                    PendingTeleporterMessageStatus `json:"status"`
}

func (o *PendingTeleporterMessage) GetMessageID() string {
	if o == nil {
		return ""
	}
	return o.MessageID
}

func (o *PendingTeleporterMessage) GetTeleporterContractAddress() string {
	if o == nil {
		return ""
	}
	return o.TeleporterContractAddress
}

func (o *PendingTeleporterMessage) GetSourceBlockchainID() string {
	if o == nil {
		return ""
	}
	return o.SourceBlockchainID
}

func (o *PendingTeleporterMessage) GetDestinationBlockchainID() string {
	if o == nil {
		return ""
	}
	return o.DestinationBlockchainID
}

func (o *PendingTeleporterMessage) GetSourceEvmChainID() string {
	if o == nil {
		return ""
	}
	return o.SourceEvmChainID
}

func (o *PendingTeleporterMessage) GetDestinationEvmChainID() string {
	if o == nil {
		return ""
	}
	return o.DestinationEvmChainID
}

func (o *PendingTeleporterMessage) GetMessageNonce() string {
	if o == nil {
		return ""
	}
	return o.MessageNonce
}

func (o *PendingTeleporterMessage) GetFrom() string {
	if o == nil {
		return ""
	}
	return o.From
}

func (o *PendingTeleporterMessage) GetTo() string {
	if o == nil {
		return ""
	}
	return o.To
}

func (o *PendingTeleporterMessage) GetData() *string {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *PendingTeleporterMessage) GetMessageExecuted() bool {
	if o == nil {
		return false
	}
	return o.MessageExecuted
}

func (o *PendingTeleporterMessage) GetReceipts() []TeleporterReceipt {
	if o == nil {
		return []TeleporterReceipt{}
	}
	return o.Receipts
}

func (o *PendingTeleporterMessage) GetReceiptDelivered() bool {
	if o == nil {
		return false
	}
	return o.ReceiptDelivered
}

func (o *PendingTeleporterMessage) GetRewardDetails() TeleporterRewardDetails {
	if o == nil {
		return TeleporterRewardDetails{}
	}
	return o.RewardDetails
}

func (o *PendingTeleporterMessage) GetSourceTransaction() TeleporterSourceTransaction {
	if o == nil {
		return TeleporterSourceTransaction{}
	}
	return o.SourceTransaction
}

func (o *PendingTeleporterMessage) GetStatus() PendingTeleporterMessageStatus {
	if o == nil {
		return PendingTeleporterMessageStatus("")
	}
	return o.Status
}
