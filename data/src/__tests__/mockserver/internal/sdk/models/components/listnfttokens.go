// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type TokenType string

const (
	TokenTypeErc721Token  TokenType = "Erc721Token"
	TokenTypeErc1155Token TokenType = "Erc1155Token"
)

type Token struct {
	Erc721Token  *Erc721Token  `queryParam:"inline"`
	Erc1155Token *Erc1155Token `queryParam:"inline"`

	Type TokenType
}

func CreateTokenErc721Token(erc721Token Erc721Token) Token {
	typ := TokenTypeErc721Token

	return Token{
		Erc721Token: &erc721Token,
		Type:        typ,
	}
}

func CreateTokenErc1155Token(erc1155Token Erc1155Token) Token {
	typ := TokenTypeErc1155Token

	return Token{
		Erc1155Token: &erc1155Token,
		Type:         typ,
	}
}

func (u *Token) UnmarshalJSON(data []byte) error {

	var erc1155Token Erc1155Token = Erc1155Token{}
	if err := utils.UnmarshalJSON(data, &erc1155Token, "", true, true); err == nil {
		u.Erc1155Token = &erc1155Token
		u.Type = TokenTypeErc1155Token
		return nil
	}

	var erc721Token Erc721Token = Erc721Token{}
	if err := utils.UnmarshalJSON(data, &erc721Token, "", true, true); err == nil {
		u.Erc721Token = &erc721Token
		u.Type = TokenTypeErc721Token
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Token", string(data))
}

func (u Token) MarshalJSON() ([]byte, error) {
	if u.Erc721Token != nil {
		return utils.MarshalJSON(u.Erc721Token, "", true)
	}

	if u.Erc1155Token != nil {
		return utils.MarshalJSON(u.Erc1155Token, "", true)
	}

	return nil, errors.New("could not marshal union type Token: all fields are null")
}

type ListNftTokens struct {
	// A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`
	Tokens        []Token `json:"tokens"`
}

func (o *ListNftTokens) GetNextPageToken() *string {
	if o == nil {
		return nil
	}
	return o.NextPageToken
}

func (o *ListNftTokens) GetTokens() []Token {
	if o == nil {
		return []Token{}
	}
	return o.Tokens
}
