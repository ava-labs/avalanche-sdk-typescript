// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

// UsageMetricsValueDTOGroupedBy - Column name used for data aggregation
type UsageMetricsValueDTOGroupedBy string

const (
	UsageMetricsValueDTOGroupedByRequestPath  UsageMetricsValueDTOGroupedBy = "requestPath"
	UsageMetricsValueDTOGroupedByResponseCode UsageMetricsValueDTOGroupedBy = "responseCode"
	UsageMetricsValueDTOGroupedByChainID      UsageMetricsValueDTOGroupedBy = "chainId"
	UsageMetricsValueDTOGroupedByAPIKeyID     UsageMetricsValueDTOGroupedBy = "apiKeyId"
	UsageMetricsValueDTOGroupedByRequestType  UsageMetricsValueDTOGroupedBy = "requestType"
	UsageMetricsValueDTOGroupedByNone         UsageMetricsValueDTOGroupedBy = "None"
)

func (e UsageMetricsValueDTOGroupedBy) ToPointer() *UsageMetricsValueDTOGroupedBy {
	return &e
}
func (e *UsageMetricsValueDTOGroupedBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requestPath":
		fallthrough
	case "responseCode":
		fallthrough
	case "chainId":
		fallthrough
	case "apiKeyId":
		fallthrough
	case "requestType":
		fallthrough
	case "None":
		*e = UsageMetricsValueDTOGroupedBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UsageMetricsValueDTOGroupedBy: %v", v)
	}
}

type UsageMetricsValueDTOGroupValueType string

const (
	UsageMetricsValueDTOGroupValueTypeStr    UsageMetricsValueDTOGroupValueType = "str"
	UsageMetricsValueDTOGroupValueTypeNumber UsageMetricsValueDTOGroupValueType = "number"
)

// UsageMetricsValueDTOGroupValue - The value of the column used for data aggregation
type UsageMetricsValueDTOGroupValue struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type UsageMetricsValueDTOGroupValueType
}

func CreateUsageMetricsValueDTOGroupValueStr(str string) UsageMetricsValueDTOGroupValue {
	typ := UsageMetricsValueDTOGroupValueTypeStr

	return UsageMetricsValueDTOGroupValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateUsageMetricsValueDTOGroupValueNumber(number float64) UsageMetricsValueDTOGroupValue {
	typ := UsageMetricsValueDTOGroupValueTypeNumber

	return UsageMetricsValueDTOGroupValue{
		Number: &number,
		Type:   typ,
	}
}

func (u *UsageMetricsValueDTOGroupValue) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UsageMetricsValueDTOGroupValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UsageMetricsValueDTOGroupValueTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UsageMetricsValueDTOGroupValue", string(data))
}

func (u UsageMetricsValueDTOGroupValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type UsageMetricsValueDTOGroupValue: all fields are null")
}

type UsageMetricsValueDTO struct {
	// Column name used for data aggregation
	GroupedBy UsageMetricsValueDTOGroupedBy `json:"groupedBy"`
	// The value of the column used for data aggregation
	GroupValue *UsageMetricsValueDTOGroupValue `json:"groupValue,omitempty"`
	// The total number of requests
	TotalRequests float64 `json:"totalRequests"`
	// The number of requests per second
	RequestsPerSecond float64 `json:"requestsPerSecond"`
	// The success rate percentage
	SuccessRatePercent float64 `json:"successRatePercent"`
	// The median response time in milliseconds
	MedianResponseTimeMsecs float64 `json:"medianResponseTimeMsecs"`
	// The number of invalid requests
	InvalidRequests float64 `json:"invalidRequests"`
	// The number of API credits used
	APICreditsUsed float64 `json:"apiCreditsUsed"`
	// The number of API credits wasted on invalid requests
	APICreditsWasted float64 `json:"apiCreditsWasted"`
}

func (o *UsageMetricsValueDTO) GetGroupedBy() UsageMetricsValueDTOGroupedBy {
	if o == nil {
		return UsageMetricsValueDTOGroupedBy("")
	}
	return o.GroupedBy
}

func (o *UsageMetricsValueDTO) GetGroupValue() *UsageMetricsValueDTOGroupValue {
	if o == nil {
		return nil
	}
	return o.GroupValue
}

func (o *UsageMetricsValueDTO) GetTotalRequests() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalRequests
}

func (o *UsageMetricsValueDTO) GetRequestsPerSecond() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestsPerSecond
}

func (o *UsageMetricsValueDTO) GetSuccessRatePercent() float64 {
	if o == nil {
		return 0.0
	}
	return o.SuccessRatePercent
}

func (o *UsageMetricsValueDTO) GetMedianResponseTimeMsecs() float64 {
	if o == nil {
		return 0.0
	}
	return o.MedianResponseTimeMsecs
}

func (o *UsageMetricsValueDTO) GetInvalidRequests() float64 {
	if o == nil {
		return 0.0
	}
	return o.InvalidRequests
}

func (o *UsageMetricsValueDTO) GetAPICreditsUsed() float64 {
	if o == nil {
		return 0.0
	}
	return o.APICreditsUsed
}

func (o *UsageMetricsValueDTO) GetAPICreditsWasted() float64 {
	if o == nil {
		return 0.0
	}
	return o.APICreditsWasted
}
