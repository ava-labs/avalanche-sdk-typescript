// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type DelegatorType string

const (
	DelegatorTypeActive    DelegatorType = "active"
	DelegatorTypePending   DelegatorType = "pending"
	DelegatorTypeCompleted DelegatorType = "completed"
)

type Delegator struct {
	CompletedDelegatorDetails *CompletedDelegatorDetails `queryParam:"inline"`
	ActiveDelegatorDetails    *ActiveDelegatorDetails    `queryParam:"inline"`
	PendingDelegatorDetails   *PendingDelegatorDetails   `queryParam:"inline"`

	Type DelegatorType
}

func CreateDelegatorActive(active ActiveDelegatorDetails) Delegator {
	typ := DelegatorTypeActive

	typStr := ActiveDelegatorDetailsDelegationStatus(typ)
	active.DelegationStatus = typStr

	return Delegator{
		ActiveDelegatorDetails: &active,
		Type:                   typ,
	}
}

func CreateDelegatorPending(pending PendingDelegatorDetails) Delegator {
	typ := DelegatorTypePending

	typStr := PendingDelegatorDetailsDelegationStatus(typ)
	pending.DelegationStatus = typStr

	return Delegator{
		PendingDelegatorDetails: &pending,
		Type:                    typ,
	}
}

func CreateDelegatorCompleted(completed CompletedDelegatorDetails) Delegator {
	typ := DelegatorTypeCompleted

	typStr := CompletedDelegatorDetailsDelegationStatus(typ)
	completed.DelegationStatus = typStr

	return Delegator{
		CompletedDelegatorDetails: &completed,
		Type:                      typ,
	}
}

func (u *Delegator) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		DelegationStatus string `json:"delegationStatus"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.DelegationStatus {
	case "active":
		activeDelegatorDetails := new(ActiveDelegatorDetails)
		if err := utils.UnmarshalJSON(data, &activeDelegatorDetails, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (DelegationStatus == active) type ActiveDelegatorDetails within Delegator: %w", string(data), err)
		}

		u.ActiveDelegatorDetails = activeDelegatorDetails
		u.Type = DelegatorTypeActive
		return nil
	case "pending":
		pendingDelegatorDetails := new(PendingDelegatorDetails)
		if err := utils.UnmarshalJSON(data, &pendingDelegatorDetails, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (DelegationStatus == pending) type PendingDelegatorDetails within Delegator: %w", string(data), err)
		}

		u.PendingDelegatorDetails = pendingDelegatorDetails
		u.Type = DelegatorTypePending
		return nil
	case "completed":
		completedDelegatorDetails := new(CompletedDelegatorDetails)
		if err := utils.UnmarshalJSON(data, &completedDelegatorDetails, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (DelegationStatus == completed) type CompletedDelegatorDetails within Delegator: %w", string(data), err)
		}

		u.CompletedDelegatorDetails = completedDelegatorDetails
		u.Type = DelegatorTypeCompleted
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Delegator", string(data))
}

func (u Delegator) MarshalJSON() ([]byte, error) {
	if u.CompletedDelegatorDetails != nil {
		return utils.MarshalJSON(u.CompletedDelegatorDetails, "", true)
	}

	if u.ActiveDelegatorDetails != nil {
		return utils.MarshalJSON(u.ActiveDelegatorDetails, "", true)
	}

	if u.PendingDelegatorDetails != nil {
		return utils.MarshalJSON(u.PendingDelegatorDetails, "", true)
	}

	return nil, errors.New("could not marshal union type Delegator: all fields are null")
}

type ListDelegatorDetailsResponse struct {
	// A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`
	// The list of Delegator Details.
	Delegators []Delegator `json:"delegators"`
}

func (o *ListDelegatorDetailsResponse) GetNextPageToken() *string {
	if o == nil {
		return nil
	}
	return o.NextPageToken
}

func (o *ListDelegatorDetailsResponse) GetDelegators() []Delegator {
	if o == nil {
		return []Delegator{}
	}
	return o.Delegators
}
