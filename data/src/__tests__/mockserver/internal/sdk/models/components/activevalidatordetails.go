// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ActiveValidatorDetailsValidationStatus string

const (
	ActiveValidatorDetailsValidationStatusActive ActiveValidatorDetailsValidationStatus = "active"
)

func (e ActiveValidatorDetailsValidationStatus) ToPointer() *ActiveValidatorDetailsValidationStatus {
	return &e
}
func (e *ActiveValidatorDetailsValidationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		*e = ActiveValidatorDetailsValidationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveValidatorDetailsValidationStatus: %v", v)
	}
}

// Geolocation - The geographical location of the validator node, if available.
type Geolocation struct {
	// The name of the validator node.
	City string `json:"city"`
	// The city of the validator node.
	Country string `json:"country"`
	// The country code of the validator node.
	CountryCode string `json:"countryCode"`
	// The latitude of the validator node.
	Latitude float64 `json:"latitude"`
	// The longitude of the validator node.
	Longitude float64 `json:"longitude"`
}

func (o *Geolocation) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *Geolocation) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *Geolocation) GetCountryCode() string {
	if o == nil {
		return ""
	}
	return o.CountryCode
}

func (o *Geolocation) GetLatitude() float64 {
	if o == nil {
		return 0.0
	}
	return o.Latitude
}

func (o *Geolocation) GetLongitude() float64 {
	if o == nil {
		return 0.0
	}
	return o.Longitude
}

type ActiveValidatorDetails struct {
	TxHash       string `json:"txHash"`
	NodeID       string `json:"nodeId"`
	SubnetID     string `json:"subnetId"`
	AmountStaked string `json:"amountStaked"`
	// The percentage of total estimated delegator rewards allocated to validator nodes for supporting delegations.
	DelegationFee  *string `json:"delegationFee,omitempty"`
	StartTimestamp float64 `json:"startTimestamp"`
	EndTimestamp   float64 `json:"endTimestamp"`
	// Present for AddPermissionlessValidatorTx
	BlsCredentials *BlsCredentials `json:"blsCredentials,omitempty"`
	// The percentage of this validator's stake amount to the total active stake.
	StakePercentage float64 `json:"stakePercentage"`
	// The number of delegators linked to the validator.
	DelegatorCount float64 `json:"delegatorCount"`
	// The total amount in nAVAX delegated to the validator.
	AmountDelegated *string `json:"amountDelegated,omitempty"`
	// The validator's uptime percentage, as observed by our internal node and measured over time.
	UptimePerformance  float64 `json:"uptimePerformance"`
	AvalancheGoVersion *string `json:"avalancheGoVersion,omitempty"`
	// The amount of stake in nAVAX that can be delegated to this validator.
	DelegationCapacity *string `json:"delegationCapacity,omitempty"`
	// Estimated rewards for the validator if the validation is successful.
	PotentialRewards Rewards                                `json:"potentialRewards"`
	ValidationStatus ActiveValidatorDetailsValidationStatus `json:"validationStatus"`
	ValidatorHealth  ValidatorHealthDetails                 `json:"validatorHealth"`
	// The geographical location of the validator node, if available.
	Geolocation *Geolocation `json:"geolocation"`
}

func (o *ActiveValidatorDetails) GetTxHash() string {
	if o == nil {
		return ""
	}
	return o.TxHash
}

func (o *ActiveValidatorDetails) GetNodeID() string {
	if o == nil {
		return ""
	}
	return o.NodeID
}

func (o *ActiveValidatorDetails) GetSubnetID() string {
	if o == nil {
		return ""
	}
	return o.SubnetID
}

func (o *ActiveValidatorDetails) GetAmountStaked() string {
	if o == nil {
		return ""
	}
	return o.AmountStaked
}

func (o *ActiveValidatorDetails) GetDelegationFee() *string {
	if o == nil {
		return nil
	}
	return o.DelegationFee
}

func (o *ActiveValidatorDetails) GetStartTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartTimestamp
}

func (o *ActiveValidatorDetails) GetEndTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.EndTimestamp
}

func (o *ActiveValidatorDetails) GetBlsCredentials() *BlsCredentials {
	if o == nil {
		return nil
	}
	return o.BlsCredentials
}

func (o *ActiveValidatorDetails) GetStakePercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.StakePercentage
}

func (o *ActiveValidatorDetails) GetDelegatorCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.DelegatorCount
}

func (o *ActiveValidatorDetails) GetAmountDelegated() *string {
	if o == nil {
		return nil
	}
	return o.AmountDelegated
}

func (o *ActiveValidatorDetails) GetUptimePerformance() float64 {
	if o == nil {
		return 0.0
	}
	return o.UptimePerformance
}

func (o *ActiveValidatorDetails) GetAvalancheGoVersion() *string {
	if o == nil {
		return nil
	}
	return o.AvalancheGoVersion
}

func (o *ActiveValidatorDetails) GetDelegationCapacity() *string {
	if o == nil {
		return nil
	}
	return o.DelegationCapacity
}

func (o *ActiveValidatorDetails) GetPotentialRewards() Rewards {
	if o == nil {
		return Rewards{}
	}
	return o.PotentialRewards
}

func (o *ActiveValidatorDetails) GetValidationStatus() ActiveValidatorDetailsValidationStatus {
	if o == nil {
		return ActiveValidatorDetailsValidationStatus("")
	}
	return o.ValidationStatus
}

func (o *ActiveValidatorDetails) GetValidatorHealth() ValidatorHealthDetails {
	if o == nil {
		return ValidatorHealthDetails{}
	}
	return o.ValidatorHealth
}

func (o *ActiveValidatorDetails) GetGeolocation() *Geolocation {
	if o == nil {
		return nil
	}
	return o.Geolocation
}
