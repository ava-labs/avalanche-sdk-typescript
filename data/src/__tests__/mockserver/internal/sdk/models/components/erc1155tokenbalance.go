// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Erc1155TokenBalanceErcType string

const (
	Erc1155TokenBalanceErcTypeErc1155 Erc1155TokenBalanceErcType = "ERC-1155"
)

func (e Erc1155TokenBalanceErcType) ToPointer() *Erc1155TokenBalanceErcType {
	return &e
}
func (e *Erc1155TokenBalanceErcType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ERC-1155":
		*e = Erc1155TokenBalanceErcType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Erc1155TokenBalanceErcType: %v", v)
	}
}

type Erc1155TokenBalance struct {
	// A wallet or contract address in mixed-case checksum encoding.
	Address  string                     `json:"address"`
	ErcType  Erc1155TokenBalanceErcType `json:"ercType"`
	TokenID  string                     `json:"tokenId"`
	TokenURI string                     `json:"tokenUri"`
	Metadata Erc1155TokenMetadata       `json:"metadata"`
	// The evm chain id.
	ChainID string `json:"chainId"`
	// The address balance for the token, in units specified by the `decimals` value for the contract.
	Balance string `json:"balance"`
}

func (o *Erc1155TokenBalance) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *Erc1155TokenBalance) GetErcType() Erc1155TokenBalanceErcType {
	if o == nil {
		return Erc1155TokenBalanceErcType("")
	}
	return o.ErcType
}

func (o *Erc1155TokenBalance) GetTokenID() string {
	if o == nil {
		return ""
	}
	return o.TokenID
}

func (o *Erc1155TokenBalance) GetTokenURI() string {
	if o == nil {
		return ""
	}
	return o.TokenURI
}

func (o *Erc1155TokenBalance) GetMetadata() Erc1155TokenMetadata {
	if o == nil {
		return Erc1155TokenMetadata{}
	}
	return o.Metadata
}

func (o *Erc1155TokenBalance) GetChainID() string {
	if o == nil {
		return ""
	}
	return o.ChainID
}

func (o *Erc1155TokenBalance) GetBalance() string {
	if o == nil {
		return ""
	}
	return o.Balance
}
