// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Erc721TokenErcType string

const (
	Erc721TokenErcTypeErc721 Erc721TokenErcType = "ERC-721"
)

func (e Erc721TokenErcType) ToPointer() *Erc721TokenErcType {
	return &e
}
func (e *Erc721TokenErcType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ERC-721":
		*e = Erc721TokenErcType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Erc721TokenErcType: %v", v)
	}
}

type Erc721Token struct {
	// A wallet or contract address in mixed-case checksum encoding.
	Address string `json:"address"`
	// The contract name.
	Name string `json:"name"`
	// The contract symbol.
	Symbol   string              `json:"symbol"`
	ErcType  Erc721TokenErcType  `json:"ercType"`
	TokenID  string              `json:"tokenId"`
	TokenURI string              `json:"tokenUri"`
	Metadata Erc721TokenMetadata `json:"metadata"`
	// A wallet or contract address in mixed-case checksum encoding.
	OwnerAddress *string `json:"ownerAddress,omitempty"`
}

func (o *Erc721Token) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *Erc721Token) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Erc721Token) GetSymbol() string {
	if o == nil {
		return ""
	}
	return o.Symbol
}

func (o *Erc721Token) GetErcType() Erc721TokenErcType {
	if o == nil {
		return Erc721TokenErcType("")
	}
	return o.ErcType
}

func (o *Erc721Token) GetTokenID() string {
	if o == nil {
		return ""
	}
	return o.TokenID
}

func (o *Erc721Token) GetTokenURI() string {
	if o == nil {
		return ""
	}
	return o.TokenURI
}

func (o *Erc721Token) GetMetadata() Erc721TokenMetadata {
	if o == nil {
		return Erc721TokenMetadata{}
	}
	return o.Metadata
}

func (o *Erc721Token) GetOwnerAddress() *string {
	if o == nil {
		return nil
	}
	return o.OwnerAddress
}
