// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type UsageMetricsGroupByEnum string

const (
	UsageMetricsGroupByEnumRequestPath  UsageMetricsGroupByEnum = "requestPath"
	UsageMetricsGroupByEnumResponseCode UsageMetricsGroupByEnum = "responseCode"
	UsageMetricsGroupByEnumChainID      UsageMetricsGroupByEnum = "chainId"
	UsageMetricsGroupByEnumAPIKeyID     UsageMetricsGroupByEnum = "apiKeyId"
	UsageMetricsGroupByEnumRequestType  UsageMetricsGroupByEnum = "requestType"
)

func (e UsageMetricsGroupByEnum) ToPointer() *UsageMetricsGroupByEnum {
	return &e
}
func (e *UsageMetricsGroupByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requestPath":
		fallthrough
	case "responseCode":
		fallthrough
	case "chainId":
		fallthrough
	case "apiKeyId":
		fallthrough
	case "requestType":
		*e = UsageMetricsGroupByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UsageMetricsGroupByEnum: %v", v)
	}
}
