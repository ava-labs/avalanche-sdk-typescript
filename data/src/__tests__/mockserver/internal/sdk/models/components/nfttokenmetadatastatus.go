// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// NftTokenMetadataStatus - The metadata indexing status of the nft.
type NftTokenMetadataStatus string

const (
	NftTokenMetadataStatusUnknown                 NftTokenMetadataStatus = "UNKNOWN"
	NftTokenMetadataStatusMissingToken            NftTokenMetadataStatus = "MISSING_TOKEN"
	NftTokenMetadataStatusInvalidTokenURI         NftTokenMetadataStatus = "INVALID_TOKEN_URI"
	NftTokenMetadataStatusInvalidTokenURIScheme   NftTokenMetadataStatus = "INVALID_TOKEN_URI_SCHEME"
	NftTokenMetadataStatusUnreachableTokenURI     NftTokenMetadataStatus = "UNREACHABLE_TOKEN_URI"
	NftTokenMetadataStatusThrottledTokenURI       NftTokenMetadataStatus = "THROTTLED_TOKEN_URI"
	NftTokenMetadataStatusMetadataContentTooLarge NftTokenMetadataStatus = "METADATA_CONTENT_TOO_LARGE"
	NftTokenMetadataStatusInvalidMetadata         NftTokenMetadataStatus = "INVALID_METADATA"
	NftTokenMetadataStatusInvalidMetadataJSON     NftTokenMetadataStatus = "INVALID_METADATA_JSON"
	NftTokenMetadataStatusIndexed                 NftTokenMetadataStatus = "INDEXED"
	NftTokenMetadataStatusUnindexed               NftTokenMetadataStatus = "UNINDEXED"
)

func (e NftTokenMetadataStatus) ToPointer() *NftTokenMetadataStatus {
	return &e
}
func (e *NftTokenMetadataStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "MISSING_TOKEN":
		fallthrough
	case "INVALID_TOKEN_URI":
		fallthrough
	case "INVALID_TOKEN_URI_SCHEME":
		fallthrough
	case "UNREACHABLE_TOKEN_URI":
		fallthrough
	case "THROTTLED_TOKEN_URI":
		fallthrough
	case "METADATA_CONTENT_TOO_LARGE":
		fallthrough
	case "INVALID_METADATA":
		fallthrough
	case "INVALID_METADATA_JSON":
		fallthrough
	case "INDEXED":
		fallthrough
	case "UNINDEXED":
		*e = NftTokenMetadataStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NftTokenMetadataStatus: %v", v)
	}
}
