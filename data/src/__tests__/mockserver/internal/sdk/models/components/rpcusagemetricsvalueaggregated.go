// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

// RPCUsageMetricsValueAggregatedGroupedBy - Column name used for data aggregation
type RPCUsageMetricsValueAggregatedGroupedBy string

const (
	RPCUsageMetricsValueAggregatedGroupedByRPCMethod     RPCUsageMetricsValueAggregatedGroupedBy = "rpcMethod"
	RPCUsageMetricsValueAggregatedGroupedByResponseCode  RPCUsageMetricsValueAggregatedGroupedBy = "responseCode"
	RPCUsageMetricsValueAggregatedGroupedByRlBypassToken RPCUsageMetricsValueAggregatedGroupedBy = "rlBypassToken"
	RPCUsageMetricsValueAggregatedGroupedByRequestPath   RPCUsageMetricsValueAggregatedGroupedBy = "requestPath"
	RPCUsageMetricsValueAggregatedGroupedByCountry       RPCUsageMetricsValueAggregatedGroupedBy = "country"
	RPCUsageMetricsValueAggregatedGroupedByContinent     RPCUsageMetricsValueAggregatedGroupedBy = "continent"
	RPCUsageMetricsValueAggregatedGroupedByUserAgent     RPCUsageMetricsValueAggregatedGroupedBy = "userAgent"
	RPCUsageMetricsValueAggregatedGroupedByNone          RPCUsageMetricsValueAggregatedGroupedBy = "None"
)

func (e RPCUsageMetricsValueAggregatedGroupedBy) ToPointer() *RPCUsageMetricsValueAggregatedGroupedBy {
	return &e
}
func (e *RPCUsageMetricsValueAggregatedGroupedBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rpcMethod":
		fallthrough
	case "responseCode":
		fallthrough
	case "rlBypassToken":
		fallthrough
	case "requestPath":
		fallthrough
	case "country":
		fallthrough
	case "continent":
		fallthrough
	case "userAgent":
		fallthrough
	case "None":
		*e = RPCUsageMetricsValueAggregatedGroupedBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RPCUsageMetricsValueAggregatedGroupedBy: %v", v)
	}
}

type RPCUsageMetricsValueAggregatedGroupValueType string

const (
	RPCUsageMetricsValueAggregatedGroupValueTypeStr    RPCUsageMetricsValueAggregatedGroupValueType = "str"
	RPCUsageMetricsValueAggregatedGroupValueTypeNumber RPCUsageMetricsValueAggregatedGroupValueType = "number"
)

// RPCUsageMetricsValueAggregatedGroupValue - The value of the column used for data aggregation
type RPCUsageMetricsValueAggregatedGroupValue struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type RPCUsageMetricsValueAggregatedGroupValueType
}

func CreateRPCUsageMetricsValueAggregatedGroupValueStr(str string) RPCUsageMetricsValueAggregatedGroupValue {
	typ := RPCUsageMetricsValueAggregatedGroupValueTypeStr

	return RPCUsageMetricsValueAggregatedGroupValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateRPCUsageMetricsValueAggregatedGroupValueNumber(number float64) RPCUsageMetricsValueAggregatedGroupValue {
	typ := RPCUsageMetricsValueAggregatedGroupValueTypeNumber

	return RPCUsageMetricsValueAggregatedGroupValue{
		Number: &number,
		Type:   typ,
	}
}

func (u *RPCUsageMetricsValueAggregatedGroupValue) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = RPCUsageMetricsValueAggregatedGroupValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = RPCUsageMetricsValueAggregatedGroupValueTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RPCUsageMetricsValueAggregatedGroupValue", string(data))
}

func (u RPCUsageMetricsValueAggregatedGroupValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type RPCUsageMetricsValueAggregatedGroupValue: all fields are null")
}

type RPCUsageMetricsValueAggregated struct {
	// The total number of requests
	TotalRequests float64 `json:"totalRequests"`
	// The number of API credits used
	APICreditsUsed float64 `json:"apiCreditsUsed"`
	// The number of requests per second
	RequestsPerSecond float64 `json:"requestsPerSecond"`
	// The success rate percentage
	SuccessRatePercent float64 `json:"successRatePercent"`
	// The median response time in milliseconds
	MedianResponseTimeMsecs float64 `json:"medianResponseTimeMsecs"`
	// The number of invalid requests
	InvalidRequests float64 `json:"invalidRequests"`
	// The number of API credits wasted on invalid requests
	APICreditsWasted float64 `json:"apiCreditsWasted"`
	// Column name used for data aggregation
	GroupedBy RPCUsageMetricsValueAggregatedGroupedBy `json:"groupedBy"`
	// The value of the column used for data aggregation
	GroupValue *RPCUsageMetricsValueAggregatedGroupValue `json:"groupValue,omitempty"`
}

func (o *RPCUsageMetricsValueAggregated) GetTotalRequests() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalRequests
}

func (o *RPCUsageMetricsValueAggregated) GetAPICreditsUsed() float64 {
	if o == nil {
		return 0.0
	}
	return o.APICreditsUsed
}

func (o *RPCUsageMetricsValueAggregated) GetRequestsPerSecond() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestsPerSecond
}

func (o *RPCUsageMetricsValueAggregated) GetSuccessRatePercent() float64 {
	if o == nil {
		return 0.0
	}
	return o.SuccessRatePercent
}

func (o *RPCUsageMetricsValueAggregated) GetMedianResponseTimeMsecs() float64 {
	if o == nil {
		return 0.0
	}
	return o.MedianResponseTimeMsecs
}

func (o *RPCUsageMetricsValueAggregated) GetInvalidRequests() float64 {
	if o == nil {
		return 0.0
	}
	return o.InvalidRequests
}

func (o *RPCUsageMetricsValueAggregated) GetAPICreditsWasted() float64 {
	if o == nil {
		return 0.0
	}
	return o.APICreditsWasted
}

func (o *RPCUsageMetricsValueAggregated) GetGroupedBy() RPCUsageMetricsValueAggregatedGroupedBy {
	if o == nil {
		return RPCUsageMetricsValueAggregatedGroupedBy("")
	}
	return o.GroupedBy
}

func (o *RPCUsageMetricsValueAggregated) GetGroupValue() *RPCUsageMetricsValueAggregatedGroupValue {
	if o == nil {
		return nil
	}
	return o.GroupValue
}
