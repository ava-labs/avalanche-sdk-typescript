// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type ValidatorType string

const (
	ValidatorTypeActive    ValidatorType = "active"
	ValidatorTypePending   ValidatorType = "pending"
	ValidatorTypeCompleted ValidatorType = "completed"
	ValidatorTypeRemoved   ValidatorType = "removed"
)

type Validator struct {
	CompletedValidatorDetails *CompletedValidatorDetails `queryParam:"inline"`
	ActiveValidatorDetails    *ActiveValidatorDetails    `queryParam:"inline"`
	PendingValidatorDetails   *PendingValidatorDetails   `queryParam:"inline"`
	RemovedValidatorDetails   *RemovedValidatorDetails   `queryParam:"inline"`

	Type ValidatorType
}

func CreateValidatorActive(active ActiveValidatorDetails) Validator {
	typ := ValidatorTypeActive

	typStr := ActiveValidatorDetailsValidationStatus(typ)
	active.ValidationStatus = typStr

	return Validator{
		ActiveValidatorDetails: &active,
		Type:                   typ,
	}
}

func CreateValidatorPending(pending PendingValidatorDetails) Validator {
	typ := ValidatorTypePending

	typStr := PendingValidatorDetailsValidationStatus(typ)
	pending.ValidationStatus = typStr

	return Validator{
		PendingValidatorDetails: &pending,
		Type:                    typ,
	}
}

func CreateValidatorCompleted(completed CompletedValidatorDetails) Validator {
	typ := ValidatorTypeCompleted

	typStr := CompletedValidatorDetailsValidationStatus(typ)
	completed.ValidationStatus = typStr

	return Validator{
		CompletedValidatorDetails: &completed,
		Type:                      typ,
	}
}

func CreateValidatorRemoved(removed RemovedValidatorDetails) Validator {
	typ := ValidatorTypeRemoved

	typStr := RemovedValidatorDetailsValidationStatus(typ)
	removed.ValidationStatus = typStr

	return Validator{
		RemovedValidatorDetails: &removed,
		Type:                    typ,
	}
}

func (u *Validator) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		ValidationStatus string `json:"validationStatus"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ValidationStatus {
	case "active":
		activeValidatorDetails := new(ActiveValidatorDetails)
		if err := utils.UnmarshalJSON(data, &activeValidatorDetails, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ValidationStatus == active) type ActiveValidatorDetails within Validator: %w", string(data), err)
		}

		u.ActiveValidatorDetails = activeValidatorDetails
		u.Type = ValidatorTypeActive
		return nil
	case "pending":
		pendingValidatorDetails := new(PendingValidatorDetails)
		if err := utils.UnmarshalJSON(data, &pendingValidatorDetails, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ValidationStatus == pending) type PendingValidatorDetails within Validator: %w", string(data), err)
		}

		u.PendingValidatorDetails = pendingValidatorDetails
		u.Type = ValidatorTypePending
		return nil
	case "completed":
		completedValidatorDetails := new(CompletedValidatorDetails)
		if err := utils.UnmarshalJSON(data, &completedValidatorDetails, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ValidationStatus == completed) type CompletedValidatorDetails within Validator: %w", string(data), err)
		}

		u.CompletedValidatorDetails = completedValidatorDetails
		u.Type = ValidatorTypeCompleted
		return nil
	case "removed":
		removedValidatorDetails := new(RemovedValidatorDetails)
		if err := utils.UnmarshalJSON(data, &removedValidatorDetails, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ValidationStatus == removed) type RemovedValidatorDetails within Validator: %w", string(data), err)
		}

		u.RemovedValidatorDetails = removedValidatorDetails
		u.Type = ValidatorTypeRemoved
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Validator", string(data))
}

func (u Validator) MarshalJSON() ([]byte, error) {
	if u.CompletedValidatorDetails != nil {
		return utils.MarshalJSON(u.CompletedValidatorDetails, "", true)
	}

	if u.ActiveValidatorDetails != nil {
		return utils.MarshalJSON(u.ActiveValidatorDetails, "", true)
	}

	if u.PendingValidatorDetails != nil {
		return utils.MarshalJSON(u.PendingValidatorDetails, "", true)
	}

	if u.RemovedValidatorDetails != nil {
		return utils.MarshalJSON(u.RemovedValidatorDetails, "", true)
	}

	return nil, errors.New("could not marshal union type Validator: all fields are null")
}

type ListValidatorDetailsResponse struct {
	// A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
	NextPageToken *string `json:"nextPageToken,omitempty"`
	// The list of validator Details.
	Validators []Validator `json:"validators"`
}

func (o *ListValidatorDetailsResponse) GetNextPageToken() *string {
	if o == nil {
		return nil
	}
	return o.NextPageToken
}

func (o *ListValidatorDetailsResponse) GetValidators() []Validator {
	if o == nil {
		return []Validator{}
	}
	return o.Validators
}
