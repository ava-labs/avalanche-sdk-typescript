// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type ListIcmMessagesResponseMessageType string

const (
	ListIcmMessagesResponseMessageTypePending                   ListIcmMessagesResponseMessageType = "pending"
	ListIcmMessagesResponseMessageTypeDelivered                 ListIcmMessagesResponseMessageType = "delivered"
	ListIcmMessagesResponseMessageTypeDeliveredSourceNotIndexed ListIcmMessagesResponseMessageType = "delivered_source_not_indexed"
)

type ListIcmMessagesResponseMessage struct {
	PendingIcmMessage                   *PendingIcmMessage                   `queryParam:"inline"`
	DeliveredIcmMessage                 *DeliveredIcmMessage                 `queryParam:"inline"`
	DeliveredSourceNotIndexedIcmMessage *DeliveredSourceNotIndexedIcmMessage `queryParam:"inline"`

	Type ListIcmMessagesResponseMessageType
}

func CreateListIcmMessagesResponseMessagePending(pending PendingIcmMessage) ListIcmMessagesResponseMessage {
	typ := ListIcmMessagesResponseMessageTypePending

	typStr := PendingIcmMessageStatus(typ)
	pending.Status = typStr

	return ListIcmMessagesResponseMessage{
		PendingIcmMessage: &pending,
		Type:              typ,
	}
}

func CreateListIcmMessagesResponseMessageDelivered(delivered DeliveredIcmMessage) ListIcmMessagesResponseMessage {
	typ := ListIcmMessagesResponseMessageTypeDelivered

	typStr := DeliveredIcmMessageStatus(typ)
	delivered.Status = typStr

	return ListIcmMessagesResponseMessage{
		DeliveredIcmMessage: &delivered,
		Type:                typ,
	}
}

func CreateListIcmMessagesResponseMessageDeliveredSourceNotIndexed(deliveredSourceNotIndexed DeliveredSourceNotIndexedIcmMessage) ListIcmMessagesResponseMessage {
	typ := ListIcmMessagesResponseMessageTypeDeliveredSourceNotIndexed

	typStr := DeliveredSourceNotIndexedIcmMessageStatus(typ)
	deliveredSourceNotIndexed.Status = typStr

	return ListIcmMessagesResponseMessage{
		DeliveredSourceNotIndexedIcmMessage: &deliveredSourceNotIndexed,
		Type:                                typ,
	}
}

func (u *ListIcmMessagesResponseMessage) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Status string `json:"status"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Status {
	case "pending":
		pendingIcmMessage := new(PendingIcmMessage)
		if err := utils.UnmarshalJSON(data, &pendingIcmMessage, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Status == pending) type PendingIcmMessage within ListIcmMessagesResponseMessage: %w", string(data), err)
		}

		u.PendingIcmMessage = pendingIcmMessage
		u.Type = ListIcmMessagesResponseMessageTypePending
		return nil
	case "delivered":
		deliveredIcmMessage := new(DeliveredIcmMessage)
		if err := utils.UnmarshalJSON(data, &deliveredIcmMessage, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Status == delivered) type DeliveredIcmMessage within ListIcmMessagesResponseMessage: %w", string(data), err)
		}

		u.DeliveredIcmMessage = deliveredIcmMessage
		u.Type = ListIcmMessagesResponseMessageTypeDelivered
		return nil
	case "delivered_source_not_indexed":
		deliveredSourceNotIndexedIcmMessage := new(DeliveredSourceNotIndexedIcmMessage)
		if err := utils.UnmarshalJSON(data, &deliveredSourceNotIndexedIcmMessage, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Status == delivered_source_not_indexed) type DeliveredSourceNotIndexedIcmMessage within ListIcmMessagesResponseMessage: %w", string(data), err)
		}

		u.DeliveredSourceNotIndexedIcmMessage = deliveredSourceNotIndexedIcmMessage
		u.Type = ListIcmMessagesResponseMessageTypeDeliveredSourceNotIndexed
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListIcmMessagesResponseMessage", string(data))
}

func (u ListIcmMessagesResponseMessage) MarshalJSON() ([]byte, error) {
	if u.PendingIcmMessage != nil {
		return utils.MarshalJSON(u.PendingIcmMessage, "", true)
	}

	if u.DeliveredIcmMessage != nil {
		return utils.MarshalJSON(u.DeliveredIcmMessage, "", true)
	}

	if u.DeliveredSourceNotIndexedIcmMessage != nil {
		return utils.MarshalJSON(u.DeliveredSourceNotIndexedIcmMessage, "", true)
	}

	return nil, errors.New("could not marshal union type ListIcmMessagesResponseMessage: all fields are null")
}

type ListIcmMessagesResponse struct {
	// A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
	NextPageToken *string                          `json:"nextPageToken,omitempty"`
	Messages      []ListIcmMessagesResponseMessage `json:"messages"`
}

func (o *ListIcmMessagesResponse) GetNextPageToken() *string {
	if o == nil {
		return nil
	}
	return o.NextPageToken
}

func (o *ListIcmMessagesResponse) GetMessages() []ListIcmMessagesResponseMessage {
	if o == nil {
		return []ListIcmMessagesResponseMessage{}
	}
	return o.Messages
}
