// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type ListTeleporterMessagesResponseMessageType string

const (
	ListTeleporterMessagesResponseMessageTypePending                   ListTeleporterMessagesResponseMessageType = "pending"
	ListTeleporterMessagesResponseMessageTypeDelivered                 ListTeleporterMessagesResponseMessageType = "delivered"
	ListTeleporterMessagesResponseMessageTypeDeliveredSourceNotIndexed ListTeleporterMessagesResponseMessageType = "delivered_source_not_indexed"
)

type ListTeleporterMessagesResponseMessage struct {
	PendingTeleporterMessage            *PendingTeleporterMessage            `queryParam:"inline"`
	DeliveredTeleporterMessage          *DeliveredTeleporterMessage          `queryParam:"inline"`
	DeliveredSourceNotIndexedIcmMessage *DeliveredSourceNotIndexedIcmMessage `queryParam:"inline"`

	Type ListTeleporterMessagesResponseMessageType
}

func CreateListTeleporterMessagesResponseMessagePending(pending PendingTeleporterMessage) ListTeleporterMessagesResponseMessage {
	typ := ListTeleporterMessagesResponseMessageTypePending

	typStr := PendingTeleporterMessageStatus(typ)
	pending.Status = typStr

	return ListTeleporterMessagesResponseMessage{
		PendingTeleporterMessage: &pending,
		Type:                     typ,
	}
}

func CreateListTeleporterMessagesResponseMessageDelivered(delivered DeliveredTeleporterMessage) ListTeleporterMessagesResponseMessage {
	typ := ListTeleporterMessagesResponseMessageTypeDelivered

	typStr := DeliveredTeleporterMessageStatus(typ)
	delivered.Status = typStr

	return ListTeleporterMessagesResponseMessage{
		DeliveredTeleporterMessage: &delivered,
		Type:                       typ,
	}
}

func CreateListTeleporterMessagesResponseMessageDeliveredSourceNotIndexed(deliveredSourceNotIndexed DeliveredSourceNotIndexedIcmMessage) ListTeleporterMessagesResponseMessage {
	typ := ListTeleporterMessagesResponseMessageTypeDeliveredSourceNotIndexed

	typStr := DeliveredSourceNotIndexedIcmMessageStatus(typ)
	deliveredSourceNotIndexed.Status = typStr

	return ListTeleporterMessagesResponseMessage{
		DeliveredSourceNotIndexedIcmMessage: &deliveredSourceNotIndexed,
		Type:                                typ,
	}
}

func (u *ListTeleporterMessagesResponseMessage) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Status string `json:"status"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Status {
	case "pending":
		pendingTeleporterMessage := new(PendingTeleporterMessage)
		if err := utils.UnmarshalJSON(data, &pendingTeleporterMessage, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Status == pending) type PendingTeleporterMessage within ListTeleporterMessagesResponseMessage: %w", string(data), err)
		}

		u.PendingTeleporterMessage = pendingTeleporterMessage
		u.Type = ListTeleporterMessagesResponseMessageTypePending
		return nil
	case "delivered":
		deliveredTeleporterMessage := new(DeliveredTeleporterMessage)
		if err := utils.UnmarshalJSON(data, &deliveredTeleporterMessage, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Status == delivered) type DeliveredTeleporterMessage within ListTeleporterMessagesResponseMessage: %w", string(data), err)
		}

		u.DeliveredTeleporterMessage = deliveredTeleporterMessage
		u.Type = ListTeleporterMessagesResponseMessageTypeDelivered
		return nil
	case "delivered_source_not_indexed":
		deliveredSourceNotIndexedIcmMessage := new(DeliveredSourceNotIndexedIcmMessage)
		if err := utils.UnmarshalJSON(data, &deliveredSourceNotIndexedIcmMessage, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Status == delivered_source_not_indexed) type DeliveredSourceNotIndexedIcmMessage within ListTeleporterMessagesResponseMessage: %w", string(data), err)
		}

		u.DeliveredSourceNotIndexedIcmMessage = deliveredSourceNotIndexedIcmMessage
		u.Type = ListTeleporterMessagesResponseMessageTypeDeliveredSourceNotIndexed
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListTeleporterMessagesResponseMessage", string(data))
}

func (u ListTeleporterMessagesResponseMessage) MarshalJSON() ([]byte, error) {
	if u.PendingTeleporterMessage != nil {
		return utils.MarshalJSON(u.PendingTeleporterMessage, "", true)
	}

	if u.DeliveredTeleporterMessage != nil {
		return utils.MarshalJSON(u.DeliveredTeleporterMessage, "", true)
	}

	if u.DeliveredSourceNotIndexedIcmMessage != nil {
		return utils.MarshalJSON(u.DeliveredSourceNotIndexedIcmMessage, "", true)
	}

	return nil, errors.New("could not marshal union type ListTeleporterMessagesResponseMessage: all fields are null")
}

type ListTeleporterMessagesResponse struct {
	// A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
	NextPageToken *string                                 `json:"nextPageToken,omitempty"`
	Messages      []ListTeleporterMessagesResponseMessage `json:"messages"`
}

func (o *ListTeleporterMessagesResponse) GetNextPageToken() *string {
	if o == nil {
		return nil
	}
	return o.NextPageToken
}

func (o *ListTeleporterMessagesResponse) GetMessages() []ListTeleporterMessagesResponseMessage {
	if o == nil {
		return []ListTeleporterMessagesResponseMessage{}
	}
	return o.Messages
}
