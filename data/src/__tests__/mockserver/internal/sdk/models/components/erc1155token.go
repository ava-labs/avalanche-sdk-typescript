// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Erc1155TokenErcType string

const (
	Erc1155TokenErcTypeErc1155 Erc1155TokenErcType = "ERC-1155"
)

func (e Erc1155TokenErcType) ToPointer() *Erc1155TokenErcType {
	return &e
}
func (e *Erc1155TokenErcType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ERC-1155":
		*e = Erc1155TokenErcType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Erc1155TokenErcType: %v", v)
	}
}

type Erc1155Token struct {
	// A wallet or contract address in mixed-case checksum encoding.
	Address  string               `json:"address"`
	ErcType  Erc1155TokenErcType  `json:"ercType"`
	TokenID  string               `json:"tokenId"`
	TokenURI string               `json:"tokenUri"`
	Metadata Erc1155TokenMetadata `json:"metadata"`
}

func (o *Erc1155Token) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *Erc1155Token) GetErcType() Erc1155TokenErcType {
	if o == nil {
		return Erc1155TokenErcType("")
	}
	return o.ErcType
}

func (o *Erc1155Token) GetTokenID() string {
	if o == nil {
		return ""
	}
	return o.TokenID
}

func (o *Erc1155Token) GetTokenURI() string {
	if o == nil {
		return ""
	}
	return o.TokenURI
}

func (o *Erc1155Token) GetMetadata() Erc1155TokenMetadata {
	if o == nil {
		return Erc1155TokenMetadata{}
	}
	return o.Metadata
}
