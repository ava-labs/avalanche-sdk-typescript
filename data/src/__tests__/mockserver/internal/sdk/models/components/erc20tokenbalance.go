// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Erc20TokenBalanceErcType string

const (
	Erc20TokenBalanceErcTypeErc20 Erc20TokenBalanceErcType = "ERC-20"
)

func (e Erc20TokenBalanceErcType) ToPointer() *Erc20TokenBalanceErcType {
	return &e
}
func (e *Erc20TokenBalanceErcType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ERC-20":
		*e = Erc20TokenBalanceErcType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Erc20TokenBalanceErcType: %v", v)
	}
}

// TokenReputation - Indicates the reputation of the token based on a security analysis. 'Benign' suggests the token is likely safe, while 'Malicious'  indicates potential security risks. This field is nullable and is only populated for tokens on the C-Chain. Possible values are 'Benign', 'Malicious', or null if the  reputation is unknown.
type TokenReputation string

const (
	TokenReputationMalicious TokenReputation = "Malicious"
	TokenReputationBenign    TokenReputation = "Benign"
)

func (e TokenReputation) ToPointer() *TokenReputation {
	return &e
}
func (e *TokenReputation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Malicious":
		fallthrough
	case "Benign":
		*e = TokenReputation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TokenReputation: %v", v)
	}
}

type Erc20TokenBalance struct {
	// A wallet or contract address in mixed-case checksum encoding.
	Address string `json:"address"`
	// The contract name.
	Name string `json:"name"`
	// The contract symbol.
	Symbol string `json:"symbol"`
	// The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation.
	Decimals float64 `json:"decimals"`
	// The logo uri for the address.
	LogoURI *string                  `json:"logoUri,omitempty"`
	ErcType Erc20TokenBalanceErcType `json:"ercType"`
	// The token price, if available.
	Price *Money `json:"price,omitempty"`
	// The evm chain id.
	ChainID string `json:"chainId"`
	// The address balance for the token, in units specified by the `decimals` value for the contract.
	Balance string `json:"balance"`
	// The monetary value of the balance, if a price is available for the token.
	BalanceValue *Money `json:"balanceValue,omitempty"`
	// Indicates the reputation of the token based on a security analysis. 'Benign' suggests the token is likely safe, while 'Malicious'  indicates potential security risks. This field is nullable and is only populated for tokens on the C-Chain. Possible values are 'Benign', 'Malicious', or null if the  reputation is unknown.
	TokenReputation *TokenReputation `json:"tokenReputation"`
}

func (o *Erc20TokenBalance) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *Erc20TokenBalance) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Erc20TokenBalance) GetSymbol() string {
	if o == nil {
		return ""
	}
	return o.Symbol
}

func (o *Erc20TokenBalance) GetDecimals() float64 {
	if o == nil {
		return 0.0
	}
	return o.Decimals
}

func (o *Erc20TokenBalance) GetLogoURI() *string {
	if o == nil {
		return nil
	}
	return o.LogoURI
}

func (o *Erc20TokenBalance) GetErcType() Erc20TokenBalanceErcType {
	if o == nil {
		return Erc20TokenBalanceErcType("")
	}
	return o.ErcType
}

func (o *Erc20TokenBalance) GetPrice() *Money {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *Erc20TokenBalance) GetChainID() string {
	if o == nil {
		return ""
	}
	return o.ChainID
}

func (o *Erc20TokenBalance) GetBalance() string {
	if o == nil {
		return ""
	}
	return o.Balance
}

func (o *Erc20TokenBalance) GetBalanceValue() *Money {
	if o == nil {
		return nil
	}
	return o.BalanceValue
}

func (o *Erc20TokenBalance) GetTokenReputation() *TokenReputation {
	if o == nil {
		return nil
	}
	return o.TokenReputation
}
