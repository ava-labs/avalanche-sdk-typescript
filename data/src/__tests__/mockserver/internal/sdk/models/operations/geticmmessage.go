// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetIcmMessageRequest struct {
	// The teleporter message ID of the ICM message.
	MessageID string `pathParam:"style=simple,explode=false,name=messageId"`
}

func (o *GetIcmMessageRequest) GetMessageID() string {
	if o == nil {
		return ""
	}
	return o.MessageID
}

type GetIcmMessageResponseBodyType string

const (
	GetIcmMessageResponseBodyTypePending                   GetIcmMessageResponseBodyType = "pending"
	GetIcmMessageResponseBodyTypeDelivered                 GetIcmMessageResponseBodyType = "delivered"
	GetIcmMessageResponseBodyTypeDeliveredSourceNotIndexed GetIcmMessageResponseBodyType = "delivered_source_not_indexed"
)

// GetIcmMessageResponseBody - Successful response
type GetIcmMessageResponseBody struct {
	PendingIcmMessage                   *components.PendingIcmMessage                   `queryParam:"inline"`
	DeliveredIcmMessage                 *components.DeliveredIcmMessage                 `queryParam:"inline"`
	DeliveredSourceNotIndexedIcmMessage *components.DeliveredSourceNotIndexedIcmMessage `queryParam:"inline"`

	Type GetIcmMessageResponseBodyType
}

func CreateGetIcmMessageResponseBodyPending(pending components.PendingIcmMessage) GetIcmMessageResponseBody {
	typ := GetIcmMessageResponseBodyTypePending

	typStr := components.PendingIcmMessageStatus(typ)
	pending.Status = typStr

	return GetIcmMessageResponseBody{
		PendingIcmMessage: &pending,
		Type:              typ,
	}
}

func CreateGetIcmMessageResponseBodyDelivered(delivered components.DeliveredIcmMessage) GetIcmMessageResponseBody {
	typ := GetIcmMessageResponseBodyTypeDelivered

	typStr := components.DeliveredIcmMessageStatus(typ)
	delivered.Status = typStr

	return GetIcmMessageResponseBody{
		DeliveredIcmMessage: &delivered,
		Type:                typ,
	}
}

func CreateGetIcmMessageResponseBodyDeliveredSourceNotIndexed(deliveredSourceNotIndexed components.DeliveredSourceNotIndexedIcmMessage) GetIcmMessageResponseBody {
	typ := GetIcmMessageResponseBodyTypeDeliveredSourceNotIndexed

	typStr := components.DeliveredSourceNotIndexedIcmMessageStatus(typ)
	deliveredSourceNotIndexed.Status = typStr

	return GetIcmMessageResponseBody{
		DeliveredSourceNotIndexedIcmMessage: &deliveredSourceNotIndexed,
		Type:                                typ,
	}
}

func (u *GetIcmMessageResponseBody) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Status string `json:"status"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Status {
	case "pending":
		pendingIcmMessage := new(components.PendingIcmMessage)
		if err := utils.UnmarshalJSON(data, &pendingIcmMessage, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Status == pending) type components.PendingIcmMessage within GetIcmMessageResponseBody: %w", string(data), err)
		}

		u.PendingIcmMessage = pendingIcmMessage
		u.Type = GetIcmMessageResponseBodyTypePending
		return nil
	case "delivered":
		deliveredIcmMessage := new(components.DeliveredIcmMessage)
		if err := utils.UnmarshalJSON(data, &deliveredIcmMessage, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Status == delivered) type components.DeliveredIcmMessage within GetIcmMessageResponseBody: %w", string(data), err)
		}

		u.DeliveredIcmMessage = deliveredIcmMessage
		u.Type = GetIcmMessageResponseBodyTypeDelivered
		return nil
	case "delivered_source_not_indexed":
		deliveredSourceNotIndexedIcmMessage := new(components.DeliveredSourceNotIndexedIcmMessage)
		if err := utils.UnmarshalJSON(data, &deliveredSourceNotIndexedIcmMessage, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Status == delivered_source_not_indexed) type components.DeliveredSourceNotIndexedIcmMessage within GetIcmMessageResponseBody: %w", string(data), err)
		}

		u.DeliveredSourceNotIndexedIcmMessage = deliveredSourceNotIndexedIcmMessage
		u.Type = GetIcmMessageResponseBodyTypeDeliveredSourceNotIndexed
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetIcmMessageResponseBody", string(data))
}

func (u GetIcmMessageResponseBody) MarshalJSON() ([]byte, error) {
	if u.PendingIcmMessage != nil {
		return utils.MarshalJSON(u.PendingIcmMessage, "", true)
	}

	if u.DeliveredIcmMessage != nil {
		return utils.MarshalJSON(u.DeliveredIcmMessage, "", true)
	}

	if u.DeliveredSourceNotIndexedIcmMessage != nil {
		return utils.MarshalJSON(u.DeliveredSourceNotIndexedIcmMessage, "", true)
	}

	return nil, errors.New("could not marshal union type GetIcmMessageResponseBody: all fields are null")
}

type GetIcmMessageResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	OneOf *GetIcmMessageResponseBody
}

func (o *GetIcmMessageResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetIcmMessageResponse) GetOneOf() *GetIcmMessageResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}

func (o *GetIcmMessageResponse) GetOneOfPending() *components.PendingIcmMessage {
	if v := o.GetOneOf(); v != nil {
		return v.PendingIcmMessage
	}
	return nil
}

func (o *GetIcmMessageResponse) GetOneOfDelivered() *components.DeliveredIcmMessage {
	if v := o.GetOneOf(); v != nil {
		return v.DeliveredIcmMessage
	}
	return nil
}

func (o *GetIcmMessageResponse) GetOneOfDeliveredSourceNotIndexed() *components.DeliveredSourceNotIndexedIcmMessage {
	if v := o.GetOneOf(); v != nil {
		return v.DeliveredSourceNotIndexedIcmMessage
	}
	return nil
}
