// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type ListHistoricalPrimaryNetworkRewardsGlobals struct {
	// A supported network type mainnet or testnet/fuji.
	Network *components.GlobalParamNetwork `pathParam:"style=simple,explode=false,name=network"`
}

func (o *ListHistoricalPrimaryNetworkRewardsGlobals) GetNetwork() *components.GlobalParamNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

type ListHistoricalPrimaryNetworkRewardsRequest struct {
	// A comma separated list of X-Chain or P-Chain wallet addresses, starting with "avax"/"fuji", "P-avax"/"P-fuji" or "X-avax"/"X-fuji". Optional, but at least one of addresses or nodeIds is required.
	Addresses *string `queryParam:"style=form,explode=true,name=addresses"`
	// A page token, received from a previous list call. Provide this to retrieve the subsequent page.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
	PageSize *int64 `default:"10" queryParam:"style=form,explode=true,name=pageSize"`
	// Either mainnet or testnet/fuji.
	Network *components.GlobalParamNetwork `pathParam:"style=simple,explode=false,name=network"`
	// A comma separated list of node ids to filter by. Optional, but at least one of addresses or nodeIds is required.
	NodeIds *string `queryParam:"style=form,explode=true,name=nodeIds"`
	// The order by which to sort results. Use "asc" for ascending order, "desc" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.
	SortOrder *components.SortOrder `queryParam:"style=form,explode=true,name=sortOrder"`
	// The currency that return values should use. Defaults to USD.
	Currency *components.CurrencyCode `queryParam:"style=form,explode=true,name=currency"`
}

func (l ListHistoricalPrimaryNetworkRewardsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListHistoricalPrimaryNetworkRewardsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListHistoricalPrimaryNetworkRewardsRequest) GetAddresses() *string {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *ListHistoricalPrimaryNetworkRewardsRequest) GetPageToken() *string {
	if o == nil {
		return nil
	}
	return o.PageToken
}

func (o *ListHistoricalPrimaryNetworkRewardsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *ListHistoricalPrimaryNetworkRewardsRequest) GetNetwork() *components.GlobalParamNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

func (o *ListHistoricalPrimaryNetworkRewardsRequest) GetNodeIds() *string {
	if o == nil {
		return nil
	}
	return o.NodeIds
}

func (o *ListHistoricalPrimaryNetworkRewardsRequest) GetSortOrder() *components.SortOrder {
	if o == nil {
		return nil
	}
	return o.SortOrder
}

func (o *ListHistoricalPrimaryNetworkRewardsRequest) GetCurrency() *components.CurrencyCode {
	if o == nil {
		return nil
	}
	return o.Currency
}

type ListHistoricalPrimaryNetworkRewardsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	ListHistoricalRewardsResponse *components.ListHistoricalRewardsResponse

	Next func() (*ListHistoricalPrimaryNetworkRewardsResponse, error)
}

func (o *ListHistoricalPrimaryNetworkRewardsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListHistoricalPrimaryNetworkRewardsResponse) GetListHistoricalRewardsResponse() *components.ListHistoricalRewardsResponse {
	if o == nil {
		return nil
	}
	return o.ListHistoricalRewardsResponse
}
