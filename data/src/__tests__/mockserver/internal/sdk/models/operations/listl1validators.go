// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type ListL1ValidatorsGlobals struct {
	// A supported network type mainnet or testnet/fuji.
	Network *components.GlobalParamNetwork `pathParam:"style=simple,explode=false,name=network"`
}

func (o *ListL1ValidatorsGlobals) GetNetwork() *components.GlobalParamNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

type ListL1ValidatorsRequest struct {
	// A page token, received from a previous list call. Provide this to retrieve the subsequent page.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
	PageSize *int64 `default:"10" queryParam:"style=form,explode=true,name=pageSize"`
	// The L1 Validator's validation ID to filter by. If not provided, then all L1 Validators will be returned.
	L1ValidationID              *string `queryParam:"style=form,explode=true,name=l1ValidationId"`
	IncludeInactiveL1Validators *bool   `queryParam:"style=form,explode=true,name=includeInactiveL1Validators"`
	// Either mainnet or testnet/fuji.
	Network *components.GlobalParamNetwork `pathParam:"style=simple,explode=false,name=network"`
	// A valid node ID in format 'NodeID-HASH'.
	NodeID *string `queryParam:"style=form,explode=true,name=nodeId"`
	// The subnet ID to filter by. If not provided, then all subnets will be returned.
	SubnetID any `queryParam:"style=form,explode=true,name=subnetId"`
}

func (l ListL1ValidatorsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListL1ValidatorsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListL1ValidatorsRequest) GetPageToken() *string {
	if o == nil {
		return nil
	}
	return o.PageToken
}

func (o *ListL1ValidatorsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *ListL1ValidatorsRequest) GetL1ValidationID() *string {
	if o == nil {
		return nil
	}
	return o.L1ValidationID
}

func (o *ListL1ValidatorsRequest) GetIncludeInactiveL1Validators() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeInactiveL1Validators
}

func (o *ListL1ValidatorsRequest) GetNetwork() *components.GlobalParamNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

func (o *ListL1ValidatorsRequest) GetNodeID() *string {
	if o == nil {
		return nil
	}
	return o.NodeID
}

func (o *ListL1ValidatorsRequest) GetSubnetID() any {
	if o == nil {
		return nil
	}
	return o.SubnetID
}

type ListL1ValidatorsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	ListL1ValidatorsResponse *components.ListL1ValidatorsResponse

	Next func() (*ListL1ValidatorsResponse, error)
}

func (o *ListL1ValidatorsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListL1ValidatorsResponse) GetListL1ValidatorsResponse() *components.ListL1ValidatorsResponse {
	if o == nil {
		return nil
	}
	return o.ListL1ValidatorsResponse
}
