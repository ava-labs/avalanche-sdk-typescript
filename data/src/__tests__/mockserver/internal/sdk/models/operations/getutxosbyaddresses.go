// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetUtxosByAddressesGlobals struct {
	// A supported network type mainnet or testnet/fuji.
	Network *components.GlobalParamNetwork `pathParam:"style=simple,explode=false,name=network"`
}

func (o *GetUtxosByAddressesGlobals) GetNetwork() *components.GlobalParamNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

type GetUtxosByAddressesRequest struct {
	// A comma separated list of X-Chain or P-Chain wallet addresses, starting with "avax"/"fuji", "P-avax"/"P-fuji" or "X-avax"/"X-fuji".
	Addresses *string `queryParam:"style=form,explode=true,name=addresses"`
	// A page token, received from a previous list call. Provide this to retrieve the subsequent page.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
	PageSize *int64 `default:"10" queryParam:"style=form,explode=true,name=pageSize"`
	// A primary network blockchain id or alias.
	BlockchainID components.BlockchainID `pathParam:"style=simple,explode=false,name=blockchainId"`
	// Either mainnet or testnet/fuji.
	Network *components.GlobalParamNetwork `pathParam:"style=simple,explode=false,name=network"`
	// Asset ID for any asset (only applicable X-Chain)
	AssetID *string `queryParam:"style=form,explode=true,name=assetId"`
	// Boolean filter to include spent UTXOs.
	IncludeSpent *bool `queryParam:"style=form,explode=true,name=includeSpent"`
	// The order by which to sort results. Use "asc" for ascending order, "desc" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.
	SortOrder *components.SortOrder `queryParam:"style=form,explode=true,name=sortOrder"`
}

func (g GetUtxosByAddressesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetUtxosByAddressesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetUtxosByAddressesRequest) GetAddresses() *string {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *GetUtxosByAddressesRequest) GetPageToken() *string {
	if o == nil {
		return nil
	}
	return o.PageToken
}

func (o *GetUtxosByAddressesRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *GetUtxosByAddressesRequest) GetBlockchainID() components.BlockchainID {
	if o == nil {
		return components.BlockchainID("")
	}
	return o.BlockchainID
}

func (o *GetUtxosByAddressesRequest) GetNetwork() *components.GlobalParamNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

func (o *GetUtxosByAddressesRequest) GetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.AssetID
}

func (o *GetUtxosByAddressesRequest) GetIncludeSpent() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeSpent
}

func (o *GetUtxosByAddressesRequest) GetSortOrder() *components.SortOrder {
	if o == nil {
		return nil
	}
	return o.SortOrder
}

type GetUtxosByAddressesResponseBodyType string

const (
	GetUtxosByAddressesResponseBodyTypeListPChainUtxosResponse GetUtxosByAddressesResponseBodyType = "ListPChainUtxosResponse"
	GetUtxosByAddressesResponseBodyTypeListUtxosResponse       GetUtxosByAddressesResponseBodyType = "ListUtxosResponse"
)

// GetUtxosByAddressesResponseBody - Successful response
type GetUtxosByAddressesResponseBody struct {
	ListPChainUtxosResponse *components.ListPChainUtxosResponse `queryParam:"inline"`
	ListUtxosResponse       *components.ListUtxosResponse       `queryParam:"inline"`

	Type GetUtxosByAddressesResponseBodyType
}

func CreateGetUtxosByAddressesResponseBodyListPChainUtxosResponse(listPChainUtxosResponse components.ListPChainUtxosResponse) GetUtxosByAddressesResponseBody {
	typ := GetUtxosByAddressesResponseBodyTypeListPChainUtxosResponse

	return GetUtxosByAddressesResponseBody{
		ListPChainUtxosResponse: &listPChainUtxosResponse,
		Type:                    typ,
	}
}

func CreateGetUtxosByAddressesResponseBodyListUtxosResponse(listUtxosResponse components.ListUtxosResponse) GetUtxosByAddressesResponseBody {
	typ := GetUtxosByAddressesResponseBodyTypeListUtxosResponse

	return GetUtxosByAddressesResponseBody{
		ListUtxosResponse: &listUtxosResponse,
		Type:              typ,
	}
}

func (u *GetUtxosByAddressesResponseBody) UnmarshalJSON(data []byte) error {

	var listPChainUtxosResponse components.ListPChainUtxosResponse = components.ListPChainUtxosResponse{}
	if err := utils.UnmarshalJSON(data, &listPChainUtxosResponse, "", true, true); err == nil {
		u.ListPChainUtxosResponse = &listPChainUtxosResponse
		u.Type = GetUtxosByAddressesResponseBodyTypeListPChainUtxosResponse
		return nil
	}

	var listUtxosResponse components.ListUtxosResponse = components.ListUtxosResponse{}
	if err := utils.UnmarshalJSON(data, &listUtxosResponse, "", true, true); err == nil {
		u.ListUtxosResponse = &listUtxosResponse
		u.Type = GetUtxosByAddressesResponseBodyTypeListUtxosResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetUtxosByAddressesResponseBody", string(data))
}

func (u GetUtxosByAddressesResponseBody) MarshalJSON() ([]byte, error) {
	if u.ListPChainUtxosResponse != nil {
		return utils.MarshalJSON(u.ListPChainUtxosResponse, "", true)
	}

	if u.ListUtxosResponse != nil {
		return utils.MarshalJSON(u.ListUtxosResponse, "", true)
	}

	return nil, errors.New("could not marshal union type GetUtxosByAddressesResponseBody: all fields are null")
}

type GetUtxosByAddressesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	OneOf *GetUtxosByAddressesResponseBody

	Next func() (*GetUtxosByAddressesResponse, error)
}

func (o *GetUtxosByAddressesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetUtxosByAddressesResponse) GetOneOf() *GetUtxosByAddressesResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
