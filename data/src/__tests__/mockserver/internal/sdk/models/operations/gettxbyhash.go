// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetTxByHashGlobals struct {
	// A supported network type mainnet or testnet/fuji.
	Network *components.GlobalParamNetwork `pathParam:"style=simple,explode=false,name=network"`
}

func (o *GetTxByHashGlobals) GetNetwork() *components.GlobalParamNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

type GetTxByHashRequest struct {
	// A primary network blockchain id or alias.
	BlockchainID components.BlockchainID `pathParam:"style=simple,explode=false,name=blockchainId"`
	// Either mainnet or testnet/fuji.
	Network *components.GlobalParamNetwork `pathParam:"style=simple,explode=false,name=network"`
	// A primary network (P or X chain) transaction hash.
	TxHash string `pathParam:"style=simple,explode=false,name=txHash"`
}

func (o *GetTxByHashRequest) GetBlockchainID() components.BlockchainID {
	if o == nil {
		return components.BlockchainID("")
	}
	return o.BlockchainID
}

func (o *GetTxByHashRequest) GetNetwork() *components.GlobalParamNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

func (o *GetTxByHashRequest) GetTxHash() string {
	if o == nil {
		return ""
	}
	return o.TxHash
}

type GetTxByHashResponseBodyType string

const (
	GetTxByHashResponseBodyTypePChainTransaction          GetTxByHashResponseBodyType = "PChainTransaction"
	GetTxByHashResponseBodyTypeXChainNonLinearTransaction GetTxByHashResponseBodyType = "XChainNonLinearTransaction"
	GetTxByHashResponseBodyTypeXChainLinearTransaction    GetTxByHashResponseBodyType = "XChainLinearTransaction"
	GetTxByHashResponseBodyTypeCChainExportTransaction    GetTxByHashResponseBodyType = "CChainExportTransaction"
	GetTxByHashResponseBodyTypeCChainImportTransaction    GetTxByHashResponseBodyType = "CChainImportTransaction"
)

// GetTxByHashResponseBody - Successful response
type GetTxByHashResponseBody struct {
	PChainTransaction          *components.PChainTransaction          `queryParam:"inline"`
	XChainNonLinearTransaction *components.XChainNonLinearTransaction `queryParam:"inline"`
	XChainLinearTransaction    *components.XChainLinearTransaction    `queryParam:"inline"`
	CChainExportTransaction    *components.CChainExportTransaction    `queryParam:"inline"`
	CChainImportTransaction    *components.CChainImportTransaction    `queryParam:"inline"`

	Type GetTxByHashResponseBodyType
}

func CreateGetTxByHashResponseBodyPChainTransaction(pChainTransaction components.PChainTransaction) GetTxByHashResponseBody {
	typ := GetTxByHashResponseBodyTypePChainTransaction

	return GetTxByHashResponseBody{
		PChainTransaction: &pChainTransaction,
		Type:              typ,
	}
}

func CreateGetTxByHashResponseBodyXChainNonLinearTransaction(xChainNonLinearTransaction components.XChainNonLinearTransaction) GetTxByHashResponseBody {
	typ := GetTxByHashResponseBodyTypeXChainNonLinearTransaction

	return GetTxByHashResponseBody{
		XChainNonLinearTransaction: &xChainNonLinearTransaction,
		Type:                       typ,
	}
}

func CreateGetTxByHashResponseBodyXChainLinearTransaction(xChainLinearTransaction components.XChainLinearTransaction) GetTxByHashResponseBody {
	typ := GetTxByHashResponseBodyTypeXChainLinearTransaction

	return GetTxByHashResponseBody{
		XChainLinearTransaction: &xChainLinearTransaction,
		Type:                    typ,
	}
}

func CreateGetTxByHashResponseBodyCChainExportTransaction(cChainExportTransaction components.CChainExportTransaction) GetTxByHashResponseBody {
	typ := GetTxByHashResponseBodyTypeCChainExportTransaction

	return GetTxByHashResponseBody{
		CChainExportTransaction: &cChainExportTransaction,
		Type:                    typ,
	}
}

func CreateGetTxByHashResponseBodyCChainImportTransaction(cChainImportTransaction components.CChainImportTransaction) GetTxByHashResponseBody {
	typ := GetTxByHashResponseBodyTypeCChainImportTransaction

	return GetTxByHashResponseBody{
		CChainImportTransaction: &cChainImportTransaction,
		Type:                    typ,
	}
}

func (u *GetTxByHashResponseBody) UnmarshalJSON(data []byte) error {

	var cChainExportTransaction components.CChainExportTransaction = components.CChainExportTransaction{}
	if err := utils.UnmarshalJSON(data, &cChainExportTransaction, "", true, true); err == nil {
		u.CChainExportTransaction = &cChainExportTransaction
		u.Type = GetTxByHashResponseBodyTypeCChainExportTransaction
		return nil
	}

	var cChainImportTransaction components.CChainImportTransaction = components.CChainImportTransaction{}
	if err := utils.UnmarshalJSON(data, &cChainImportTransaction, "", true, true); err == nil {
		u.CChainImportTransaction = &cChainImportTransaction
		u.Type = GetTxByHashResponseBodyTypeCChainImportTransaction
		return nil
	}

	var xChainNonLinearTransaction components.XChainNonLinearTransaction = components.XChainNonLinearTransaction{}
	if err := utils.UnmarshalJSON(data, &xChainNonLinearTransaction, "", true, true); err == nil {
		u.XChainNonLinearTransaction = &xChainNonLinearTransaction
		u.Type = GetTxByHashResponseBodyTypeXChainNonLinearTransaction
		return nil
	}

	var xChainLinearTransaction components.XChainLinearTransaction = components.XChainLinearTransaction{}
	if err := utils.UnmarshalJSON(data, &xChainLinearTransaction, "", true, true); err == nil {
		u.XChainLinearTransaction = &xChainLinearTransaction
		u.Type = GetTxByHashResponseBodyTypeXChainLinearTransaction
		return nil
	}

	var pChainTransaction components.PChainTransaction = components.PChainTransaction{}
	if err := utils.UnmarshalJSON(data, &pChainTransaction, "", true, true); err == nil {
		u.PChainTransaction = &pChainTransaction
		u.Type = GetTxByHashResponseBodyTypePChainTransaction
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetTxByHashResponseBody", string(data))
}

func (u GetTxByHashResponseBody) MarshalJSON() ([]byte, error) {
	if u.PChainTransaction != nil {
		return utils.MarshalJSON(u.PChainTransaction, "", true)
	}

	if u.XChainNonLinearTransaction != nil {
		return utils.MarshalJSON(u.XChainNonLinearTransaction, "", true)
	}

	if u.XChainLinearTransaction != nil {
		return utils.MarshalJSON(u.XChainLinearTransaction, "", true)
	}

	if u.CChainExportTransaction != nil {
		return utils.MarshalJSON(u.CChainExportTransaction, "", true)
	}

	if u.CChainImportTransaction != nil {
		return utils.MarshalJSON(u.CChainImportTransaction, "", true)
	}

	return nil, errors.New("could not marshal union type GetTxByHashResponseBody: all fields are null")
}

type GetTxByHashResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	OneOf *GetTxByHashResponseBody
}

func (o *GetTxByHashResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetTxByHashResponse) GetOneOf() *GetTxByHashResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
