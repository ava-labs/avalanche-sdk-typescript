// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type ListErc20BalancesGlobals struct {
	// A supported EVM chain id, chain alias, or blockchain id.
	ChainID *string `pathParam:"style=simple,explode=false,name=chainId"`
}

func (o *ListErc20BalancesGlobals) GetChainID() *string {
	if o == nil {
		return nil
	}
	return o.ChainID
}

type ListErc20BalancesRequest struct {
	// The block number, if not defined the block number will be the latest block.
	BlockNumber *string `queryParam:"style=form,explode=true,name=blockNumber"`
	// A page token, received from a previous list call. Provide this to retrieve the subsequent page.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 500.
	PageSize *int64 `default:"10" queryParam:"style=form,explode=true,name=pageSize"`
	// whether to filter out spam tokens from the response. Default is true.
	FilterSpamTokens *bool `default:"true" queryParam:"style=form,explode=true,name=filterSpamTokens"`
	// A supported evm chain id or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
	ChainID *string `pathParam:"style=simple,explode=false,name=chainId"`
	// A wallet address.
	Address string `pathParam:"style=simple,explode=false,name=address"`
	// A comma separated list of contract addresses to filter by.
	ContractAddresses *string `queryParam:"style=form,explode=true,name=contractAddresses"`
	// The currency that return values should use. Defaults to USD.
	Currency *components.CurrencyCode `queryParam:"style=form,explode=true,name=currency"`
}

func (l ListErc20BalancesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListErc20BalancesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListErc20BalancesRequest) GetBlockNumber() *string {
	if o == nil {
		return nil
	}
	return o.BlockNumber
}

func (o *ListErc20BalancesRequest) GetPageToken() *string {
	if o == nil {
		return nil
	}
	return o.PageToken
}

func (o *ListErc20BalancesRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *ListErc20BalancesRequest) GetFilterSpamTokens() *bool {
	if o == nil {
		return nil
	}
	return o.FilterSpamTokens
}

func (o *ListErc20BalancesRequest) GetChainID() *string {
	if o == nil {
		return nil
	}
	return o.ChainID
}

func (o *ListErc20BalancesRequest) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *ListErc20BalancesRequest) GetContractAddresses() *string {
	if o == nil {
		return nil
	}
	return o.ContractAddresses
}

func (o *ListErc20BalancesRequest) GetCurrency() *components.CurrencyCode {
	if o == nil {
		return nil
	}
	return o.Currency
}

type ListErc20BalancesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	ListErc20BalancesResponse *components.ListErc20BalancesResponse

	Next func() (*ListErc20BalancesResponse, error)
}

func (o *ListErc20BalancesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListErc20BalancesResponse) GetListErc20BalancesResponse() *components.ListErc20BalancesResponse {
	if o == nil {
		return nil
	}
	return o.ListErc20BalancesResponse
}
