// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
)

type GetVertexByHashGlobals struct {
	// A supported network type mainnet or testnet/fuji.
	Network *components.GlobalParamNetwork `pathParam:"style=simple,explode=false,name=network"`
}

func (o *GetVertexByHashGlobals) GetNetwork() *components.GlobalParamNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

type GetVertexByHashRequest struct {
	// A vertex hash string.
	VertexHash string `pathParam:"style=simple,explode=false,name=vertexHash"`
	// A primary network blockchain id or alias.
	BlockchainID components.XChainID `pathParam:"style=simple,explode=false,name=blockchainId"`
	// Either mainnet or testnet/fuji.
	Network *components.GlobalParamNetwork `pathParam:"style=simple,explode=false,name=network"`
}

func (o *GetVertexByHashRequest) GetVertexHash() string {
	if o == nil {
		return ""
	}
	return o.VertexHash
}

func (o *GetVertexByHashRequest) GetBlockchainID() components.XChainID {
	if o == nil {
		return components.XChainID("")
	}
	return o.BlockchainID
}

func (o *GetVertexByHashRequest) GetNetwork() *components.GlobalParamNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

type GetVertexByHashResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	XChainVertex *components.XChainVertex
}

func (o *GetVertexByHashResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetVertexByHashResponse) GetXChainVertex() *components.XChainVertex {
	if o == nil {
		return nil
	}
	return o.XChainVertex
}
