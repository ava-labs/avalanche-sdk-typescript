// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// GetAPILogsRequestType - Filter data by request type.
type GetAPILogsRequestType string

const (
	GetAPILogsRequestTypeData GetAPILogsRequestType = "data"
	GetAPILogsRequestTypeRPC  GetAPILogsRequestType = "rpc"
)

func (e GetAPILogsRequestType) ToPointer() *GetAPILogsRequestType {
	return &e
}
func (e *GetAPILogsRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "data":
		fallthrough
	case "rpc":
		*e = GetAPILogsRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAPILogsRequestType: %v", v)
	}
}

type GetAPILogsRequest struct {
	// Organization ID to fetch usage metrics for
	OrgID *string `queryParam:"style=form,explode=true,name=orgId"`
	// The start time of the range as a UNIX timestamp. The requested start time  will be rounded down to 0:00 UTC of the day.
	StartTimestamp *int64 `queryParam:"style=form,explode=true,name=startTimestamp"`
	// The end time of the range as a UNIX timestamp. The requested end time will be rounded down to 0:00 UTC of the day.
	EndTimestamp *int64 `queryParam:"style=form,explode=true,name=endTimestamp"`
	// Filter data by chain ID.
	ChainID *string `queryParam:"style=form,explode=true,name=chainId"`
	// Filter data by response status code.
	ResponseCode *string `queryParam:"style=form,explode=true,name=responseCode"`
	// Filter data by request type.
	RequestType *GetAPILogsRequestType `queryParam:"style=form,explode=true,name=requestType"`
	// Filter data by API key ID.
	APIKeyID *string `queryParam:"style=form,explode=true,name=apiKeyId"`
	// Filter data by request path.
	RequestPath *string `queryParam:"style=form,explode=true,name=requestPath"`
	// A page token, received from a previous list call. Provide this to retrieve the subsequent page.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// The maximum number of items to return.
	PageSize *int64 `default:"10" queryParam:"style=form,explode=true,name=pageSize"`
}

func (g GetAPILogsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAPILogsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAPILogsRequest) GetOrgID() *string {
	if o == nil {
		return nil
	}
	return o.OrgID
}

func (o *GetAPILogsRequest) GetStartTimestamp() *int64 {
	if o == nil {
		return nil
	}
	return o.StartTimestamp
}

func (o *GetAPILogsRequest) GetEndTimestamp() *int64 {
	if o == nil {
		return nil
	}
	return o.EndTimestamp
}

func (o *GetAPILogsRequest) GetChainID() *string {
	if o == nil {
		return nil
	}
	return o.ChainID
}

func (o *GetAPILogsRequest) GetResponseCode() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCode
}

func (o *GetAPILogsRequest) GetRequestType() *GetAPILogsRequestType {
	if o == nil {
		return nil
	}
	return o.RequestType
}

func (o *GetAPILogsRequest) GetAPIKeyID() *string {
	if o == nil {
		return nil
	}
	return o.APIKeyID
}

func (o *GetAPILogsRequest) GetRequestPath() *string {
	if o == nil {
		return nil
	}
	return o.RequestPath
}

func (o *GetAPILogsRequest) GetPageToken() *string {
	if o == nil {
		return nil
	}
	return o.PageToken
}

func (o *GetAPILogsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

type GetAPILogsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	LogsResponseDTO *components.LogsResponseDTO

	Next func() (*GetAPILogsResponse, error)
}

func (o *GetAPILogsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetAPILogsResponse) GetLogsResponseDTO() *components.LogsResponseDTO {
	if o == nil {
		return nil
	}
	return o.LogsResponseDTO
}
