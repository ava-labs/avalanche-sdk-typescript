// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetTokenDetailsGlobals struct {
	// A supported EVM chain id, chain alias, or blockchain id.
	ChainID *string `pathParam:"style=simple,explode=false,name=chainId"`
}

func (o *GetTokenDetailsGlobals) GetChainID() *string {
	if o == nil {
		return nil
	}
	return o.ChainID
}

type GetTokenDetailsRequest struct {
	// A supported evm chain id or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
	ChainID *string `pathParam:"style=simple,explode=false,name=chainId"`
	// Contract address on the relevant chain.
	Address string `pathParam:"style=simple,explode=false,name=address"`
	// TokenId on the contract
	TokenID string `pathParam:"style=simple,explode=false,name=tokenId"`
}

func (o *GetTokenDetailsRequest) GetChainID() *string {
	if o == nil {
		return nil
	}
	return o.ChainID
}

func (o *GetTokenDetailsRequest) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

func (o *GetTokenDetailsRequest) GetTokenID() string {
	if o == nil {
		return ""
	}
	return o.TokenID
}

type GetTokenDetailsResponseBodyType string

const (
	GetTokenDetailsResponseBodyTypeErc721  GetTokenDetailsResponseBodyType = "ERC-721"
	GetTokenDetailsResponseBodyTypeErc1155 GetTokenDetailsResponseBodyType = "ERC-1155"
)

// GetTokenDetailsResponseBody - Successful response
type GetTokenDetailsResponseBody struct {
	Erc721Token  *components.Erc721Token  `queryParam:"inline"`
	Erc1155Token *components.Erc1155Token `queryParam:"inline"`

	Type GetTokenDetailsResponseBodyType
}

func CreateGetTokenDetailsResponseBodyErc721(erc721 components.Erc721Token) GetTokenDetailsResponseBody {
	typ := GetTokenDetailsResponseBodyTypeErc721

	typStr := components.Erc721TokenErcType(typ)
	erc721.ErcType = typStr

	return GetTokenDetailsResponseBody{
		Erc721Token: &erc721,
		Type:        typ,
	}
}

func CreateGetTokenDetailsResponseBodyErc1155(erc1155 components.Erc1155Token) GetTokenDetailsResponseBody {
	typ := GetTokenDetailsResponseBodyTypeErc1155

	typStr := components.Erc1155TokenErcType(typ)
	erc1155.ErcType = typStr

	return GetTokenDetailsResponseBody{
		Erc1155Token: &erc1155,
		Type:         typ,
	}
}

func (u *GetTokenDetailsResponseBody) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		ErcType string `json:"ercType"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ErcType {
	case "ERC-721":
		erc721Token := new(components.Erc721Token)
		if err := utils.UnmarshalJSON(data, &erc721Token, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ErcType == ERC-721) type components.Erc721Token within GetTokenDetailsResponseBody: %w", string(data), err)
		}

		u.Erc721Token = erc721Token
		u.Type = GetTokenDetailsResponseBodyTypeErc721
		return nil
	case "ERC-1155":
		erc1155Token := new(components.Erc1155Token)
		if err := utils.UnmarshalJSON(data, &erc1155Token, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ErcType == ERC-1155) type components.Erc1155Token within GetTokenDetailsResponseBody: %w", string(data), err)
		}

		u.Erc1155Token = erc1155Token
		u.Type = GetTokenDetailsResponseBodyTypeErc1155
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetTokenDetailsResponseBody", string(data))
}

func (u GetTokenDetailsResponseBody) MarshalJSON() ([]byte, error) {
	if u.Erc721Token != nil {
		return utils.MarshalJSON(u.Erc721Token, "", true)
	}

	if u.Erc1155Token != nil {
		return utils.MarshalJSON(u.Erc1155Token, "", true)
	}

	return nil, errors.New("could not marshal union type GetTokenDetailsResponseBody: all fields are null")
}

type GetTokenDetailsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	OneOf *GetTokenDetailsResponseBody
}

func (o *GetTokenDetailsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetTokenDetailsResponse) GetOneOf() *GetTokenDetailsResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}

func (o *GetTokenDetailsResponse) GetOneOfErc721() *components.Erc721Token {
	if v := o.GetOneOf(); v != nil {
		return v.Erc721Token
	}
	return nil
}

func (o *GetTokenDetailsResponse) GetOneOfErc1155() *components.Erc1155Token {
	if v := o.GetOneOf(); v != nil {
		return v.Erc1155Token
	}
	return nil
}
