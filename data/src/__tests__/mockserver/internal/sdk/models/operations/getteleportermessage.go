// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetTeleporterMessageRequest struct {
	// The message ID of the teleporter message.
	MessageID string `pathParam:"style=simple,explode=false,name=messageId"`
}

func (o *GetTeleporterMessageRequest) GetMessageID() string {
	if o == nil {
		return ""
	}
	return o.MessageID
}

type GetTeleporterMessageResponseBodyType string

const (
	GetTeleporterMessageResponseBodyTypePending                   GetTeleporterMessageResponseBodyType = "pending"
	GetTeleporterMessageResponseBodyTypeDelivered                 GetTeleporterMessageResponseBodyType = "delivered"
	GetTeleporterMessageResponseBodyTypeDeliveredSourceNotIndexed GetTeleporterMessageResponseBodyType = "delivered_source_not_indexed"
)

// GetTeleporterMessageResponseBody - Successful response
type GetTeleporterMessageResponseBody struct {
	PendingTeleporterMessage                   *components.PendingTeleporterMessage                   `queryParam:"inline"`
	DeliveredTeleporterMessage                 *components.DeliveredTeleporterMessage                 `queryParam:"inline"`
	DeliveredSourceNotIndexedTeleporterMessage *components.DeliveredSourceNotIndexedTeleporterMessage `queryParam:"inline"`

	Type GetTeleporterMessageResponseBodyType
}

func CreateGetTeleporterMessageResponseBodyPending(pending components.PendingTeleporterMessage) GetTeleporterMessageResponseBody {
	typ := GetTeleporterMessageResponseBodyTypePending

	typStr := components.PendingTeleporterMessageStatus(typ)
	pending.Status = typStr

	return GetTeleporterMessageResponseBody{
		PendingTeleporterMessage: &pending,
		Type:                     typ,
	}
}

func CreateGetTeleporterMessageResponseBodyDelivered(delivered components.DeliveredTeleporterMessage) GetTeleporterMessageResponseBody {
	typ := GetTeleporterMessageResponseBodyTypeDelivered

	typStr := components.DeliveredTeleporterMessageStatus(typ)
	delivered.Status = typStr

	return GetTeleporterMessageResponseBody{
		DeliveredTeleporterMessage: &delivered,
		Type:                       typ,
	}
}

func CreateGetTeleporterMessageResponseBodyDeliveredSourceNotIndexed(deliveredSourceNotIndexed components.DeliveredSourceNotIndexedTeleporterMessage) GetTeleporterMessageResponseBody {
	typ := GetTeleporterMessageResponseBodyTypeDeliveredSourceNotIndexed

	typStr := components.DeliveredSourceNotIndexedTeleporterMessageStatus(typ)
	deliveredSourceNotIndexed.Status = typStr

	return GetTeleporterMessageResponseBody{
		DeliveredSourceNotIndexedTeleporterMessage: &deliveredSourceNotIndexed,
		Type: typ,
	}
}

func (u *GetTeleporterMessageResponseBody) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Status string `json:"status"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Status {
	case "pending":
		pendingTeleporterMessage := new(components.PendingTeleporterMessage)
		if err := utils.UnmarshalJSON(data, &pendingTeleporterMessage, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Status == pending) type components.PendingTeleporterMessage within GetTeleporterMessageResponseBody: %w", string(data), err)
		}

		u.PendingTeleporterMessage = pendingTeleporterMessage
		u.Type = GetTeleporterMessageResponseBodyTypePending
		return nil
	case "delivered":
		deliveredTeleporterMessage := new(components.DeliveredTeleporterMessage)
		if err := utils.UnmarshalJSON(data, &deliveredTeleporterMessage, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Status == delivered) type components.DeliveredTeleporterMessage within GetTeleporterMessageResponseBody: %w", string(data), err)
		}

		u.DeliveredTeleporterMessage = deliveredTeleporterMessage
		u.Type = GetTeleporterMessageResponseBodyTypeDelivered
		return nil
	case "delivered_source_not_indexed":
		deliveredSourceNotIndexedTeleporterMessage := new(components.DeliveredSourceNotIndexedTeleporterMessage)
		if err := utils.UnmarshalJSON(data, &deliveredSourceNotIndexedTeleporterMessage, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Status == delivered_source_not_indexed) type components.DeliveredSourceNotIndexedTeleporterMessage within GetTeleporterMessageResponseBody: %w", string(data), err)
		}

		u.DeliveredSourceNotIndexedTeleporterMessage = deliveredSourceNotIndexedTeleporterMessage
		u.Type = GetTeleporterMessageResponseBodyTypeDeliveredSourceNotIndexed
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetTeleporterMessageResponseBody", string(data))
}

func (u GetTeleporterMessageResponseBody) MarshalJSON() ([]byte, error) {
	if u.PendingTeleporterMessage != nil {
		return utils.MarshalJSON(u.PendingTeleporterMessage, "", true)
	}

	if u.DeliveredTeleporterMessage != nil {
		return utils.MarshalJSON(u.DeliveredTeleporterMessage, "", true)
	}

	if u.DeliveredSourceNotIndexedTeleporterMessage != nil {
		return utils.MarshalJSON(u.DeliveredSourceNotIndexedTeleporterMessage, "", true)
	}

	return nil, errors.New("could not marshal union type GetTeleporterMessageResponseBody: all fields are null")
}

type GetTeleporterMessageResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	OneOf *GetTeleporterMessageResponseBody
}

func (o *GetTeleporterMessageResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetTeleporterMessageResponse) GetOneOf() *GetTeleporterMessageResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}

func (o *GetTeleporterMessageResponse) GetOneOfPending() *components.PendingTeleporterMessage {
	if v := o.GetOneOf(); v != nil {
		return v.PendingTeleporterMessage
	}
	return nil
}

func (o *GetTeleporterMessageResponse) GetOneOfDelivered() *components.DeliveredTeleporterMessage {
	if v := o.GetOneOf(); v != nil {
		return v.DeliveredTeleporterMessage
	}
	return nil
}

func (o *GetTeleporterMessageResponse) GetOneOfDeliveredSourceNotIndexed() *components.DeliveredSourceNotIndexedTeleporterMessage {
	if v := o.GetOneOf(); v != nil {
		return v.DeliveredSourceNotIndexedTeleporterMessage
	}
	return nil
}
