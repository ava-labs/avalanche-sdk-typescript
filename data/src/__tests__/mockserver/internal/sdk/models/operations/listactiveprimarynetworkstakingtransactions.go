// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type ListActivePrimaryNetworkStakingTransactionsGlobals struct {
	// A supported network type mainnet or testnet/fuji.
	Network *components.GlobalParamNetwork `pathParam:"style=simple,explode=false,name=network"`
}

func (o *ListActivePrimaryNetworkStakingTransactionsGlobals) GetNetwork() *components.GlobalParamNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

type ListActivePrimaryNetworkStakingTransactionsRequest struct {
	// A comma separated list of X-Chain or P-Chain wallet addresses, starting with "avax"/"fuji", "P-avax"/"P-fuji" or "X-avax"/"X-fuji".
	Addresses *string `queryParam:"style=form,explode=true,name=addresses"`
	// Query param for filtering items based on transaction types.
	TxTypes []components.PrimaryNetworkTxType `queryParam:"style=form,explode=true,name=txTypes"`
	// Query param for retrieving items after a specific timestamp.
	StartTimestamp *int64 `queryParam:"style=form,explode=true,name=startTimestamp"`
	// Query param for retrieving items before a specific timestamp.
	EndTimestamp *int64 `queryParam:"style=form,explode=true,name=endTimestamp"`
	// A page token, received from a previous list call. Provide this to retrieve the subsequent page.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
	PageSize *int64 `default:"10" queryParam:"style=form,explode=true,name=pageSize"`
	// A primary network blockchain id or alias.
	BlockchainID components.PChainID `pathParam:"style=simple,explode=false,name=blockchainId"`
	// Either mainnet or testnet/fuji.
	Network *components.GlobalParamNetwork `pathParam:"style=simple,explode=false,name=network"`
	// The order by which to sort results. Use "asc" for ascending order, "desc" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.
	SortOrder *components.SortOrder `queryParam:"style=form,explode=true,name=sortOrder"`
}

func (l ListActivePrimaryNetworkStakingTransactionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListActivePrimaryNetworkStakingTransactionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListActivePrimaryNetworkStakingTransactionsRequest) GetAddresses() *string {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *ListActivePrimaryNetworkStakingTransactionsRequest) GetTxTypes() []components.PrimaryNetworkTxType {
	if o == nil {
		return nil
	}
	return o.TxTypes
}

func (o *ListActivePrimaryNetworkStakingTransactionsRequest) GetStartTimestamp() *int64 {
	if o == nil {
		return nil
	}
	return o.StartTimestamp
}

func (o *ListActivePrimaryNetworkStakingTransactionsRequest) GetEndTimestamp() *int64 {
	if o == nil {
		return nil
	}
	return o.EndTimestamp
}

func (o *ListActivePrimaryNetworkStakingTransactionsRequest) GetPageToken() *string {
	if o == nil {
		return nil
	}
	return o.PageToken
}

func (o *ListActivePrimaryNetworkStakingTransactionsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *ListActivePrimaryNetworkStakingTransactionsRequest) GetBlockchainID() components.PChainID {
	if o == nil {
		return components.PChainID("")
	}
	return o.BlockchainID
}

func (o *ListActivePrimaryNetworkStakingTransactionsRequest) GetNetwork() *components.GlobalParamNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

func (o *ListActivePrimaryNetworkStakingTransactionsRequest) GetSortOrder() *components.SortOrder {
	if o == nil {
		return nil
	}
	return o.SortOrder
}

type ListActivePrimaryNetworkStakingTransactionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	ListPChainTransactionsResponse *components.ListPChainTransactionsResponse

	Next func() (*ListActivePrimaryNetworkStakingTransactionsResponse, error)
}

func (o *ListActivePrimaryNetworkStakingTransactionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListActivePrimaryNetworkStakingTransactionsResponse) GetListPChainTransactionsResponse() *components.ListPChainTransactionsResponse {
	if o == nil {
		return nil
	}
	return o.ListPChainTransactionsResponse
}
