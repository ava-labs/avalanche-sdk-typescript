// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// GetAPIUsageMetricsRequestType - Filter data by request type.
type GetAPIUsageMetricsRequestType string

const (
	GetAPIUsageMetricsRequestTypeData GetAPIUsageMetricsRequestType = "data"
	GetAPIUsageMetricsRequestTypeRPC  GetAPIUsageMetricsRequestType = "rpc"
)

func (e GetAPIUsageMetricsRequestType) ToPointer() *GetAPIUsageMetricsRequestType {
	return &e
}
func (e *GetAPIUsageMetricsRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "data":
		fallthrough
	case "rpc":
		*e = GetAPIUsageMetricsRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAPIUsageMetricsRequestType: %v", v)
	}
}

type GetAPIUsageMetricsRequest struct {
	// Organization ID to fetch usage metrics for
	OrgID *string `queryParam:"style=form,explode=true,name=orgId"`
	// The start time of the range as a UNIX timestamp. The requested start time  will be rounded down to 0:00 UTC of the day.
	StartTimestamp *int64 `queryParam:"style=form,explode=true,name=startTimestamp"`
	// The end time of the range as a UNIX timestamp. The requested end time will be rounded down to 0:00 UTC of the day.
	EndTimestamp *int64 `queryParam:"style=form,explode=true,name=endTimestamp"`
	// Time interval granularity for data aggregation
	TimeInterval *components.TimeIntervalGranularityExtended `queryParam:"style=form,explode=true,name=timeInterval"`
	// Query param for the criterion used for grouping metrics
	GroupBy *components.UsageMetricsGroupByEnum `queryParam:"style=form,explode=true,name=groupBy"`
	// Filter data by chain ID.
	ChainID *string `queryParam:"style=form,explode=true,name=chainId"`
	// Filter data by response status code.
	ResponseCode *string `queryParam:"style=form,explode=true,name=responseCode"`
	// Filter data by request type.
	RequestType *GetAPIUsageMetricsRequestType `queryParam:"style=form,explode=true,name=requestType"`
	// Filter data by API key ID.
	APIKeyID *string `queryParam:"style=form,explode=true,name=apiKeyId"`
	// Filter data by request path.
	RequestPath *string `queryParam:"style=form,explode=true,name=requestPath"`
}

func (o *GetAPIUsageMetricsRequest) GetOrgID() *string {
	if o == nil {
		return nil
	}
	return o.OrgID
}

func (o *GetAPIUsageMetricsRequest) GetStartTimestamp() *int64 {
	if o == nil {
		return nil
	}
	return o.StartTimestamp
}

func (o *GetAPIUsageMetricsRequest) GetEndTimestamp() *int64 {
	if o == nil {
		return nil
	}
	return o.EndTimestamp
}

func (o *GetAPIUsageMetricsRequest) GetTimeInterval() *components.TimeIntervalGranularityExtended {
	if o == nil {
		return nil
	}
	return o.TimeInterval
}

func (o *GetAPIUsageMetricsRequest) GetGroupBy() *components.UsageMetricsGroupByEnum {
	if o == nil {
		return nil
	}
	return o.GroupBy
}

func (o *GetAPIUsageMetricsRequest) GetChainID() *string {
	if o == nil {
		return nil
	}
	return o.ChainID
}

func (o *GetAPIUsageMetricsRequest) GetResponseCode() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCode
}

func (o *GetAPIUsageMetricsRequest) GetRequestType() *GetAPIUsageMetricsRequestType {
	if o == nil {
		return nil
	}
	return o.RequestType
}

func (o *GetAPIUsageMetricsRequest) GetAPIKeyID() *string {
	if o == nil {
		return nil
	}
	return o.APIKeyID
}

func (o *GetAPIUsageMetricsRequest) GetRequestPath() *string {
	if o == nil {
		return nil
	}
	return o.RequestPath
}

type GetAPIUsageMetricsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	UsageMetricsResponseDTO *components.UsageMetricsResponseDTO
}

func (o *GetAPIUsageMetricsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetAPIUsageMetricsResponse) GetUsageMetricsResponseDTO() *components.UsageMetricsResponseDTO {
	if o == nil {
		return nil
	}
	return o.UsageMetricsResponseDTO
}
