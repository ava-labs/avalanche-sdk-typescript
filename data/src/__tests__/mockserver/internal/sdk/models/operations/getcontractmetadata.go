// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetContractMetadataGlobals struct {
	// A supported EVM chain id, chain alias, or blockchain id.
	ChainID *string `pathParam:"style=simple,explode=false,name=chainId"`
}

func (o *GetContractMetadataGlobals) GetChainID() *string {
	if o == nil {
		return nil
	}
	return o.ChainID
}

type GetContractMetadataRequest struct {
	// A supported evm chain id or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
	ChainID *string `pathParam:"style=simple,explode=false,name=chainId"`
	// Contract address on the relevant chain.
	Address string `pathParam:"style=simple,explode=false,name=address"`
}

func (o *GetContractMetadataRequest) GetChainID() *string {
	if o == nil {
		return nil
	}
	return o.ChainID
}

func (o *GetContractMetadataRequest) GetAddress() string {
	if o == nil {
		return ""
	}
	return o.Address
}

type GetContractMetadataResponseBodyType string

const (
	GetContractMetadataResponseBodyTypeErc721  GetContractMetadataResponseBodyType = "ERC-721"
	GetContractMetadataResponseBodyTypeErc1155 GetContractMetadataResponseBodyType = "ERC-1155"
	GetContractMetadataResponseBodyTypeErc20   GetContractMetadataResponseBodyType = "ERC-20"
	GetContractMetadataResponseBodyTypeUnknown GetContractMetadataResponseBodyType = "UNKNOWN"
)

// GetContractMetadataResponseBody - Successful response
type GetContractMetadataResponseBody struct {
	Erc721Contract  *components.Erc721Contract  `queryParam:"inline"`
	Erc1155Contract *components.Erc1155Contract `queryParam:"inline"`
	Erc20Contract   *components.Erc20Contract   `queryParam:"inline"`
	UnknownContract *components.UnknownContract `queryParam:"inline"`

	Type GetContractMetadataResponseBodyType
}

func CreateGetContractMetadataResponseBodyErc721(erc721 components.Erc721Contract) GetContractMetadataResponseBody {
	typ := GetContractMetadataResponseBodyTypeErc721

	typStr := components.Erc721ContractErcType(typ)
	erc721.ErcType = typStr

	return GetContractMetadataResponseBody{
		Erc721Contract: &erc721,
		Type:           typ,
	}
}

func CreateGetContractMetadataResponseBodyErc1155(erc1155 components.Erc1155Contract) GetContractMetadataResponseBody {
	typ := GetContractMetadataResponseBodyTypeErc1155

	typStr := components.Erc1155ContractErcType(typ)
	erc1155.ErcType = typStr

	return GetContractMetadataResponseBody{
		Erc1155Contract: &erc1155,
		Type:            typ,
	}
}

func CreateGetContractMetadataResponseBodyErc20(erc20 components.Erc20Contract) GetContractMetadataResponseBody {
	typ := GetContractMetadataResponseBodyTypeErc20

	typStr := components.Erc20ContractErcType(typ)
	erc20.ErcType = typStr

	return GetContractMetadataResponseBody{
		Erc20Contract: &erc20,
		Type:          typ,
	}
}

func CreateGetContractMetadataResponseBodyUnknown(unknown components.UnknownContract) GetContractMetadataResponseBody {
	typ := GetContractMetadataResponseBodyTypeUnknown

	typStr := components.UnknownContractErcType(typ)
	unknown.ErcType = typStr

	return GetContractMetadataResponseBody{
		UnknownContract: &unknown,
		Type:            typ,
	}
}

func (u *GetContractMetadataResponseBody) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		ErcType string `json:"ercType"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ErcType {
	case "ERC-721":
		erc721Contract := new(components.Erc721Contract)
		if err := utils.UnmarshalJSON(data, &erc721Contract, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ErcType == ERC-721) type components.Erc721Contract within GetContractMetadataResponseBody: %w", string(data), err)
		}

		u.Erc721Contract = erc721Contract
		u.Type = GetContractMetadataResponseBodyTypeErc721
		return nil
	case "ERC-1155":
		erc1155Contract := new(components.Erc1155Contract)
		if err := utils.UnmarshalJSON(data, &erc1155Contract, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ErcType == ERC-1155) type components.Erc1155Contract within GetContractMetadataResponseBody: %w", string(data), err)
		}

		u.Erc1155Contract = erc1155Contract
		u.Type = GetContractMetadataResponseBodyTypeErc1155
		return nil
	case "ERC-20":
		erc20Contract := new(components.Erc20Contract)
		if err := utils.UnmarshalJSON(data, &erc20Contract, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ErcType == ERC-20) type components.Erc20Contract within GetContractMetadataResponseBody: %w", string(data), err)
		}

		u.Erc20Contract = erc20Contract
		u.Type = GetContractMetadataResponseBodyTypeErc20
		return nil
	case "UNKNOWN":
		unknownContract := new(components.UnknownContract)
		if err := utils.UnmarshalJSON(data, &unknownContract, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ErcType == UNKNOWN) type components.UnknownContract within GetContractMetadataResponseBody: %w", string(data), err)
		}

		u.UnknownContract = unknownContract
		u.Type = GetContractMetadataResponseBodyTypeUnknown
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetContractMetadataResponseBody", string(data))
}

func (u GetContractMetadataResponseBody) MarshalJSON() ([]byte, error) {
	if u.Erc721Contract != nil {
		return utils.MarshalJSON(u.Erc721Contract, "", true)
	}

	if u.Erc1155Contract != nil {
		return utils.MarshalJSON(u.Erc1155Contract, "", true)
	}

	if u.Erc20Contract != nil {
		return utils.MarshalJSON(u.Erc20Contract, "", true)
	}

	if u.UnknownContract != nil {
		return utils.MarshalJSON(u.UnknownContract, "", true)
	}

	return nil, errors.New("could not marshal union type GetContractMetadataResponseBody: all fields are null")
}

type GetContractMetadataResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	OneOf *GetContractMetadataResponseBody
}

func (o *GetContractMetadataResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetContractMetadataResponse) GetOneOf() *GetContractMetadataResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}

func (o *GetContractMetadataResponse) GetOneOfErc721() *components.Erc721Contract {
	if v := o.GetOneOf(); v != nil {
		return v.Erc721Contract
	}
	return nil
}

func (o *GetContractMetadataResponse) GetOneOfErc1155() *components.Erc1155Contract {
	if v := o.GetOneOf(); v != nil {
		return v.Erc1155Contract
	}
	return nil
}

func (o *GetContractMetadataResponse) GetOneOfErc20() *components.Erc20Contract {
	if v := o.GetOneOf(); v != nil {
		return v.Erc20Contract
	}
	return nil
}

func (o *GetContractMetadataResponse) GetOneOfUnknown() *components.UnknownContract {
	if v := o.GetOneOf(); v != nil {
		return v.UnknownContract
	}
	return nil
}
