// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetBalancesByAddressesGlobals struct {
	// A supported network type mainnet or testnet/fuji.
	Network *components.GlobalParamNetwork `pathParam:"style=simple,explode=false,name=network"`
}

func (o *GetBalancesByAddressesGlobals) GetNetwork() *components.GlobalParamNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

type GetBalancesByAddressesRequest struct {
	// An epoch timestamp in seconds. Balance will be calculated at this timestamp.
	BlockTimestamp *int64 `queryParam:"style=form,explode=true,name=blockTimestamp"`
	// A comma separated list of X-Chain or P-Chain wallet addresses, starting with "avax"/"fuji", "P-avax"/"P-fuji" or "X-avax"/"X-fuji".
	Addresses *string `queryParam:"style=form,explode=true,name=addresses"`
	// A primary network blockchain id or alias.
	BlockchainID components.BlockchainID `pathParam:"style=simple,explode=false,name=blockchainId"`
	// Either mainnet or testnet/fuji.
	Network *components.GlobalParamNetwork `pathParam:"style=simple,explode=false,name=network"`
}

func (o *GetBalancesByAddressesRequest) GetBlockTimestamp() *int64 {
	if o == nil {
		return nil
	}
	return o.BlockTimestamp
}

func (o *GetBalancesByAddressesRequest) GetAddresses() *string {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *GetBalancesByAddressesRequest) GetBlockchainID() components.BlockchainID {
	if o == nil {
		return components.BlockchainID("")
	}
	return o.BlockchainID
}

func (o *GetBalancesByAddressesRequest) GetNetwork() *components.GlobalParamNetwork {
	if o == nil {
		return nil
	}
	return o.Network
}

type GetBalancesByAddressesResponseBodyType string

const (
	GetBalancesByAddressesResponseBodyTypeListPChainBalancesResponse       GetBalancesByAddressesResponseBodyType = "ListPChainBalancesResponse"
	GetBalancesByAddressesResponseBodyTypeListXChainBalancesResponse       GetBalancesByAddressesResponseBodyType = "ListXChainBalancesResponse"
	GetBalancesByAddressesResponseBodyTypeListCChainAtomicBalancesResponse GetBalancesByAddressesResponseBodyType = "ListCChainAtomicBalancesResponse"
)

// GetBalancesByAddressesResponseBody - Successful response
type GetBalancesByAddressesResponseBody struct {
	ListPChainBalancesResponse       *components.ListPChainBalancesResponse       `queryParam:"inline"`
	ListXChainBalancesResponse       *components.ListXChainBalancesResponse       `queryParam:"inline"`
	ListCChainAtomicBalancesResponse *components.ListCChainAtomicBalancesResponse `queryParam:"inline"`

	Type GetBalancesByAddressesResponseBodyType
}

func CreateGetBalancesByAddressesResponseBodyListPChainBalancesResponse(listPChainBalancesResponse components.ListPChainBalancesResponse) GetBalancesByAddressesResponseBody {
	typ := GetBalancesByAddressesResponseBodyTypeListPChainBalancesResponse

	return GetBalancesByAddressesResponseBody{
		ListPChainBalancesResponse: &listPChainBalancesResponse,
		Type:                       typ,
	}
}

func CreateGetBalancesByAddressesResponseBodyListXChainBalancesResponse(listXChainBalancesResponse components.ListXChainBalancesResponse) GetBalancesByAddressesResponseBody {
	typ := GetBalancesByAddressesResponseBodyTypeListXChainBalancesResponse

	return GetBalancesByAddressesResponseBody{
		ListXChainBalancesResponse: &listXChainBalancesResponse,
		Type:                       typ,
	}
}

func CreateGetBalancesByAddressesResponseBodyListCChainAtomicBalancesResponse(listCChainAtomicBalancesResponse components.ListCChainAtomicBalancesResponse) GetBalancesByAddressesResponseBody {
	typ := GetBalancesByAddressesResponseBodyTypeListCChainAtomicBalancesResponse

	return GetBalancesByAddressesResponseBody{
		ListCChainAtomicBalancesResponse: &listCChainAtomicBalancesResponse,
		Type:                             typ,
	}
}

func (u *GetBalancesByAddressesResponseBody) UnmarshalJSON(data []byte) error {

	var listPChainBalancesResponse components.ListPChainBalancesResponse = components.ListPChainBalancesResponse{}
	if err := utils.UnmarshalJSON(data, &listPChainBalancesResponse, "", true, true); err == nil {
		u.ListPChainBalancesResponse = &listPChainBalancesResponse
		u.Type = GetBalancesByAddressesResponseBodyTypeListPChainBalancesResponse
		return nil
	}

	var listXChainBalancesResponse components.ListXChainBalancesResponse = components.ListXChainBalancesResponse{}
	if err := utils.UnmarshalJSON(data, &listXChainBalancesResponse, "", true, true); err == nil {
		u.ListXChainBalancesResponse = &listXChainBalancesResponse
		u.Type = GetBalancesByAddressesResponseBodyTypeListXChainBalancesResponse
		return nil
	}

	var listCChainAtomicBalancesResponse components.ListCChainAtomicBalancesResponse = components.ListCChainAtomicBalancesResponse{}
	if err := utils.UnmarshalJSON(data, &listCChainAtomicBalancesResponse, "", true, true); err == nil {
		u.ListCChainAtomicBalancesResponse = &listCChainAtomicBalancesResponse
		u.Type = GetBalancesByAddressesResponseBodyTypeListCChainAtomicBalancesResponse
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetBalancesByAddressesResponseBody", string(data))
}

func (u GetBalancesByAddressesResponseBody) MarshalJSON() ([]byte, error) {
	if u.ListPChainBalancesResponse != nil {
		return utils.MarshalJSON(u.ListPChainBalancesResponse, "", true)
	}

	if u.ListXChainBalancesResponse != nil {
		return utils.MarshalJSON(u.ListXChainBalancesResponse, "", true)
	}

	if u.ListCChainAtomicBalancesResponse != nil {
		return utils.MarshalJSON(u.ListCChainAtomicBalancesResponse, "", true)
	}

	return nil, errors.New("could not marshal union type GetBalancesByAddressesResponseBody: all fields are null")
}

type GetBalancesByAddressesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	OneOf *GetBalancesByAddressesResponseBody
}

func (o *GetBalancesByAddressesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetBalancesByAddressesResponse) GetOneOf() *GetBalancesByAddressesResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
