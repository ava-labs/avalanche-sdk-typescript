// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
)

type GetSubnetRPCUsageMetricsRequest struct {
	// Time interval granularity for data aggregation for subnet
	//      rpc metrics
	TimeInterval *components.SubnetRPCTimeIntervalGranularity `queryParam:"style=form,explode=true,name=timeInterval"`
	// The start time of the range as a UNIX timestamp. The requested start time  will be rounded down to 0:00 UTC of the day.
	StartTimestamp *int64 `queryParam:"style=form,explode=true,name=startTimestamp"`
	// The end time of the range as a UNIX timestamp. The requested end time will be rounded down to 0:00 UTC of the day.
	EndTimestamp *int64 `queryParam:"style=form,explode=true,name=endTimestamp"`
	// Query param for the criterion used for grouping metrics
	GroupBy *components.RPCUsageMetricsGroupByEnum `queryParam:"style=form,explode=true,name=groupBy"`
	// Filter data by chain ID.
	ChainID *string `queryParam:"style=form,explode=true,name=chainId"`
	// Filter data by response status code.
	ResponseCode *string `queryParam:"style=form,explode=true,name=responseCode"`
	// Filter data by RPC method.
	RPCMethod *string `queryParam:"style=form,explode=true,name=rpcMethod"`
	// Filter data by Rl Bypass API Token.
	RlBypassAPIToken *string `queryParam:"style=form,explode=true,name=rlBypassApiToken"`
}

func (o *GetSubnetRPCUsageMetricsRequest) GetTimeInterval() *components.SubnetRPCTimeIntervalGranularity {
	if o == nil {
		return nil
	}
	return o.TimeInterval
}

func (o *GetSubnetRPCUsageMetricsRequest) GetStartTimestamp() *int64 {
	if o == nil {
		return nil
	}
	return o.StartTimestamp
}

func (o *GetSubnetRPCUsageMetricsRequest) GetEndTimestamp() *int64 {
	if o == nil {
		return nil
	}
	return o.EndTimestamp
}

func (o *GetSubnetRPCUsageMetricsRequest) GetGroupBy() *components.RPCUsageMetricsGroupByEnum {
	if o == nil {
		return nil
	}
	return o.GroupBy
}

func (o *GetSubnetRPCUsageMetricsRequest) GetChainID() *string {
	if o == nil {
		return nil
	}
	return o.ChainID
}

func (o *GetSubnetRPCUsageMetricsRequest) GetResponseCode() *string {
	if o == nil {
		return nil
	}
	return o.ResponseCode
}

func (o *GetSubnetRPCUsageMetricsRequest) GetRPCMethod() *string {
	if o == nil {
		return nil
	}
	return o.RPCMethod
}

func (o *GetSubnetRPCUsageMetricsRequest) GetRlBypassAPIToken() *string {
	if o == nil {
		return nil
	}
	return o.RlBypassAPIToken
}

type GetSubnetRPCUsageMetricsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response
	SubnetRPCUsageMetricsResponseDTO *components.SubnetRPCUsageMetricsResponseDTO
}

func (o *GetSubnetRPCUsageMetricsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetSubnetRPCUsageMetricsResponse) GetSubnetRPCUsageMetricsResponseDTO() *components.SubnetRPCUsageMetricsResponseDTO {
	if o == nil {
		return nil
	}
	return o.SubnetRPCUsageMetricsResponseDTO
}
