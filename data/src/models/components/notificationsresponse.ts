/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationsResponse = {
  message: string;
};

/** @internal */
export const NotificationsResponse$inboundSchema: z.ZodType<
  NotificationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type NotificationsResponse$Outbound = {
  message: string;
};

/** @internal */
export const NotificationsResponse$outboundSchema: z.ZodType<
  NotificationsResponse$Outbound,
  z.ZodTypeDef,
  NotificationsResponse
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationsResponse$ {
  /** @deprecated use `NotificationsResponse$inboundSchema` instead. */
  export const inboundSchema = NotificationsResponse$inboundSchema;
  /** @deprecated use `NotificationsResponse$outboundSchema` instead. */
  export const outboundSchema = NotificationsResponse$outboundSchema;
  /** @deprecated use `NotificationsResponse$Outbound` instead. */
  export type Outbound = NotificationsResponse$Outbound;
}

export function notificationsResponseToJSON(
  notificationsResponse: NotificationsResponse,
): string {
  return JSON.stringify(
    NotificationsResponse$outboundSchema.parse(notificationsResponse),
  );
}

export function notificationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<NotificationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationsResponse' from JSON`,
  );
}
