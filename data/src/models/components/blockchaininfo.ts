/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The genesis data of the blockchain.  Present for CreateChainTx. EVM based chains will return the genesis data as an object. Non-EVM based chains will return the genesis data as an encoded string. The encoding depends on the VM
 */
export type BlockchainInfoGenesisData = {};

export type BlockchainInfo = {
  chainName: string;
  vmId: string;
  /**
   * The genesis data of the blockchain.  Present for CreateChainTx. EVM based chains will return the genesis data as an object. Non-EVM based chains will return the genesis data as an encoded string. The encoding depends on the VM
   */
  genesisData?: BlockchainInfoGenesisData | undefined;
};

/** @internal */
export const BlockchainInfoGenesisData$inboundSchema: z.ZodType<
  BlockchainInfoGenesisData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type BlockchainInfoGenesisData$Outbound = {};

/** @internal */
export const BlockchainInfoGenesisData$outboundSchema: z.ZodType<
  BlockchainInfoGenesisData$Outbound,
  z.ZodTypeDef,
  BlockchainInfoGenesisData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BlockchainInfoGenesisData$ {
  /** @deprecated use `BlockchainInfoGenesisData$inboundSchema` instead. */
  export const inboundSchema = BlockchainInfoGenesisData$inboundSchema;
  /** @deprecated use `BlockchainInfoGenesisData$outboundSchema` instead. */
  export const outboundSchema = BlockchainInfoGenesisData$outboundSchema;
  /** @deprecated use `BlockchainInfoGenesisData$Outbound` instead. */
  export type Outbound = BlockchainInfoGenesisData$Outbound;
}

export function blockchainInfoGenesisDataToJSON(
  blockchainInfoGenesisData: BlockchainInfoGenesisData,
): string {
  return JSON.stringify(
    BlockchainInfoGenesisData$outboundSchema.parse(blockchainInfoGenesisData),
  );
}

export function blockchainInfoGenesisDataFromJSON(
  jsonString: string,
): SafeParseResult<BlockchainInfoGenesisData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BlockchainInfoGenesisData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BlockchainInfoGenesisData' from JSON`,
  );
}

/** @internal */
export const BlockchainInfo$inboundSchema: z.ZodType<
  BlockchainInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainName: z.string(),
  vmId: z.string(),
  genesisData: z.lazy(() => BlockchainInfoGenesisData$inboundSchema).optional(),
});

/** @internal */
export type BlockchainInfo$Outbound = {
  chainName: string;
  vmId: string;
  genesisData?: BlockchainInfoGenesisData$Outbound | undefined;
};

/** @internal */
export const BlockchainInfo$outboundSchema: z.ZodType<
  BlockchainInfo$Outbound,
  z.ZodTypeDef,
  BlockchainInfo
> = z.object({
  chainName: z.string(),
  vmId: z.string(),
  genesisData: z.lazy(() => BlockchainInfoGenesisData$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BlockchainInfo$ {
  /** @deprecated use `BlockchainInfo$inboundSchema` instead. */
  export const inboundSchema = BlockchainInfo$inboundSchema;
  /** @deprecated use `BlockchainInfo$outboundSchema` instead. */
  export const outboundSchema = BlockchainInfo$outboundSchema;
  /** @deprecated use `BlockchainInfo$Outbound` instead. */
  export type Outbound = BlockchainInfo$Outbound;
}

export function blockchainInfoToJSON(blockchainInfo: BlockchainInfo): string {
  return JSON.stringify(BlockchainInfo$outboundSchema.parse(blockchainInfo));
}

export function blockchainInfoFromJSON(
  jsonString: string,
): SafeParseResult<BlockchainInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BlockchainInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BlockchainInfo' from JSON`,
  );
}
