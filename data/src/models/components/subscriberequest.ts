/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SubscribeRequestNotification = {
  Connectivity: "connectivity",
  Ports: "ports",
  Version: "version",
} as const;
export type SubscribeRequestNotification = ClosedEnum<
  typeof SubscribeRequestNotification
>;

export type SubscribeRequest = {
  /**
   * The access token to use for authentication
   */
  accessToken: string;
  /**
   * The node ID to subscribe to
   */
  nodeId: string;
  /**
   * The notification types to subscribe to. If not provided, all notification types will be subscribed to
   */
  notifications?: Array<SubscribeRequestNotification> | undefined;
};

/** @internal */
export const SubscribeRequestNotification$inboundSchema: z.ZodNativeEnum<
  typeof SubscribeRequestNotification
> = z.nativeEnum(SubscribeRequestNotification);

/** @internal */
export const SubscribeRequestNotification$outboundSchema: z.ZodNativeEnum<
  typeof SubscribeRequestNotification
> = SubscribeRequestNotification$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribeRequestNotification$ {
  /** @deprecated use `SubscribeRequestNotification$inboundSchema` instead. */
  export const inboundSchema = SubscribeRequestNotification$inboundSchema;
  /** @deprecated use `SubscribeRequestNotification$outboundSchema` instead. */
  export const outboundSchema = SubscribeRequestNotification$outboundSchema;
}

/** @internal */
export const SubscribeRequest$inboundSchema: z.ZodType<
  SubscribeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string(),
  nodeId: z.string(),
  notifications: z.array(SubscribeRequestNotification$inboundSchema).optional(),
});

/** @internal */
export type SubscribeRequest$Outbound = {
  accessToken: string;
  nodeId: string;
  notifications?: Array<string> | undefined;
};

/** @internal */
export const SubscribeRequest$outboundSchema: z.ZodType<
  SubscribeRequest$Outbound,
  z.ZodTypeDef,
  SubscribeRequest
> = z.object({
  accessToken: z.string(),
  nodeId: z.string(),
  notifications: z.array(SubscribeRequestNotification$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribeRequest$ {
  /** @deprecated use `SubscribeRequest$inboundSchema` instead. */
  export const inboundSchema = SubscribeRequest$inboundSchema;
  /** @deprecated use `SubscribeRequest$outboundSchema` instead. */
  export const outboundSchema = SubscribeRequest$outboundSchema;
  /** @deprecated use `SubscribeRequest$Outbound` instead. */
  export type Outbound = SubscribeRequest$Outbound;
}

export function subscribeRequestToJSON(
  subscribeRequest: SubscribeRequest,
): string {
  return JSON.stringify(
    SubscribeRequest$outboundSchema.parse(subscribeRequest),
  );
}

export function subscribeRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubscribeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscribeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscribeRequest' from JSON`,
  );
}
