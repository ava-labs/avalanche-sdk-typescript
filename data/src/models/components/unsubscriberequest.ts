/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UnsubscribeRequest = {
  /**
   * The access token to use for authentication
   */
  accessToken: string;
  /**
   * The node ID to subscribe to
   */
  nodeId: string;
};

/** @internal */
export const UnsubscribeRequest$inboundSchema: z.ZodType<
  UnsubscribeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string(),
  nodeId: z.string(),
});

/** @internal */
export type UnsubscribeRequest$Outbound = {
  accessToken: string;
  nodeId: string;
};

/** @internal */
export const UnsubscribeRequest$outboundSchema: z.ZodType<
  UnsubscribeRequest$Outbound,
  z.ZodTypeDef,
  UnsubscribeRequest
> = z.object({
  accessToken: z.string(),
  nodeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnsubscribeRequest$ {
  /** @deprecated use `UnsubscribeRequest$inboundSchema` instead. */
  export const inboundSchema = UnsubscribeRequest$inboundSchema;
  /** @deprecated use `UnsubscribeRequest$outboundSchema` instead. */
  export const outboundSchema = UnsubscribeRequest$outboundSchema;
  /** @deprecated use `UnsubscribeRequest$Outbound` instead. */
  export type Outbound = UnsubscribeRequest$Outbound;
}

export function unsubscribeRequestToJSON(
  unsubscribeRequest: UnsubscribeRequest,
): string {
  return JSON.stringify(
    UnsubscribeRequest$outboundSchema.parse(unsubscribeRequest),
  );
}

export function unsubscribeRequestFromJSON(
  jsonString: string,
): SafeParseResult<UnsubscribeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnsubscribeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnsubscribeRequest' from JSON`,
  );
}
