/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccessRequest = {
  /**
   * The email address to send the access token to
   */
  email: string;
  /**
   * The captcha to verify the user
   */
  captcha: string;
};

/** @internal */
export const AccessRequest$inboundSchema: z.ZodType<
  AccessRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  captcha: z.string(),
});

/** @internal */
export type AccessRequest$Outbound = {
  email: string;
  captcha: string;
};

/** @internal */
export const AccessRequest$outboundSchema: z.ZodType<
  AccessRequest$Outbound,
  z.ZodTypeDef,
  AccessRequest
> = z.object({
  email: z.string(),
  captcha: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessRequest$ {
  /** @deprecated use `AccessRequest$inboundSchema` instead. */
  export const inboundSchema = AccessRequest$inboundSchema;
  /** @deprecated use `AccessRequest$outboundSchema` instead. */
  export const outboundSchema = AccessRequest$outboundSchema;
  /** @deprecated use `AccessRequest$Outbound` instead. */
  export type Outbound = AccessRequest$Outbound;
}

export function accessRequestToJSON(accessRequest: AccessRequest): string {
  return JSON.stringify(AccessRequest$outboundSchema.parse(accessRequest));
}

export function accessRequestFromJSON(
  jsonString: string,
): SafeParseResult<AccessRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessRequest' from JSON`,
  );
}
