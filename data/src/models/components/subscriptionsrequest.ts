/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriptionsRequest = {
  /**
   * The access token to use for authentication
   */
  accessToken: string;
};

/** @internal */
export const SubscriptionsRequest$inboundSchema: z.ZodType<
  SubscriptionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string(),
});

/** @internal */
export type SubscriptionsRequest$Outbound = {
  accessToken: string;
};

/** @internal */
export const SubscriptionsRequest$outboundSchema: z.ZodType<
  SubscriptionsRequest$Outbound,
  z.ZodTypeDef,
  SubscriptionsRequest
> = z.object({
  accessToken: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionsRequest$ {
  /** @deprecated use `SubscriptionsRequest$inboundSchema` instead. */
  export const inboundSchema = SubscriptionsRequest$inboundSchema;
  /** @deprecated use `SubscriptionsRequest$outboundSchema` instead. */
  export const outboundSchema = SubscriptionsRequest$outboundSchema;
  /** @deprecated use `SubscriptionsRequest$Outbound` instead. */
  export type Outbound = SubscriptionsRequest$Outbound;
}

export function subscriptionsRequestToJSON(
  subscriptionsRequest: SubscriptionsRequest,
): string {
  return JSON.stringify(
    SubscriptionsRequest$outboundSchema.parse(subscriptionsRequest),
  );
}

export function subscriptionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionsRequest' from JSON`,
  );
}
