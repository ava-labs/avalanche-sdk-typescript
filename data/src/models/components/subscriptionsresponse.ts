/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SubscriptionsResponseNotification = {
  Connectivity: "connectivity",
  Ports: "ports",
  Version: "version",
} as const;
export type SubscriptionsResponseNotification = ClosedEnum<
  typeof SubscriptionsResponseNotification
>;

export type Subscriptions = {
  notifications?: Array<SubscriptionsResponseNotification> | undefined;
};

export type SubscriptionsResponse = {
  /**
   * The email address of the user
   */
  email: string;
  /**
   * The subscriptions of the user
   */
  subscriptions: { [k: string]: Subscriptions };
};

/** @internal */
export const SubscriptionsResponseNotification$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionsResponseNotification
> = z.nativeEnum(SubscriptionsResponseNotification);

/** @internal */
export const SubscriptionsResponseNotification$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionsResponseNotification
> = SubscriptionsResponseNotification$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionsResponseNotification$ {
  /** @deprecated use `SubscriptionsResponseNotification$inboundSchema` instead. */
  export const inboundSchema = SubscriptionsResponseNotification$inboundSchema;
  /** @deprecated use `SubscriptionsResponseNotification$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionsResponseNotification$outboundSchema;
}

/** @internal */
export const Subscriptions$inboundSchema: z.ZodType<
  Subscriptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  notifications: z.array(SubscriptionsResponseNotification$inboundSchema)
    .optional(),
});

/** @internal */
export type Subscriptions$Outbound = {
  notifications?: Array<string> | undefined;
};

/** @internal */
export const Subscriptions$outboundSchema: z.ZodType<
  Subscriptions$Outbound,
  z.ZodTypeDef,
  Subscriptions
> = z.object({
  notifications: z.array(SubscriptionsResponseNotification$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Subscriptions$ {
  /** @deprecated use `Subscriptions$inboundSchema` instead. */
  export const inboundSchema = Subscriptions$inboundSchema;
  /** @deprecated use `Subscriptions$outboundSchema` instead. */
  export const outboundSchema = Subscriptions$outboundSchema;
  /** @deprecated use `Subscriptions$Outbound` instead. */
  export type Outbound = Subscriptions$Outbound;
}

export function subscriptionsToJSON(subscriptions: Subscriptions): string {
  return JSON.stringify(Subscriptions$outboundSchema.parse(subscriptions));
}

export function subscriptionsFromJSON(
  jsonString: string,
): SafeParseResult<Subscriptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Subscriptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Subscriptions' from JSON`,
  );
}

/** @internal */
export const SubscriptionsResponse$inboundSchema: z.ZodType<
  SubscriptionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  subscriptions: z.record(z.lazy(() => Subscriptions$inboundSchema)),
});

/** @internal */
export type SubscriptionsResponse$Outbound = {
  email: string;
  subscriptions: { [k: string]: Subscriptions$Outbound };
};

/** @internal */
export const SubscriptionsResponse$outboundSchema: z.ZodType<
  SubscriptionsResponse$Outbound,
  z.ZodTypeDef,
  SubscriptionsResponse
> = z.object({
  email: z.string(),
  subscriptions: z.record(z.lazy(() => Subscriptions$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionsResponse$ {
  /** @deprecated use `SubscriptionsResponse$inboundSchema` instead. */
  export const inboundSchema = SubscriptionsResponse$inboundSchema;
  /** @deprecated use `SubscriptionsResponse$outboundSchema` instead. */
  export const outboundSchema = SubscriptionsResponse$outboundSchema;
  /** @deprecated use `SubscriptionsResponse$Outbound` instead. */
  export type Outbound = SubscriptionsResponse$Outbound;
}

export function subscriptionsResponseToJSON(
  subscriptionsResponse: SubscriptionsResponse,
): string {
  return JSON.stringify(
    SubscriptionsResponse$outboundSchema.parse(subscriptionsResponse),
  );
}

export function subscriptionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionsResponse' from JSON`,
  );
}
