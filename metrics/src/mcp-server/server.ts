/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { AvalancheCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope, mcpScopes } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$metricsChainMetricsGetEvmChainMetrics } from "./tools/metricsChainMetricsGetEvmChainMetrics.js";
import { tool$metricsChainMetricsGetEvmChainRollingWindowMetrics } from "./tools/metricsChainMetricsGetEvmChainRollingWindowMetrics.js";
import { tool$metricsChainMetricsGetStakingMetrics } from "./tools/metricsChainMetricsGetStakingMetrics.js";
import { tool$metricsChainMetricsGetTeleporterMetricsByChain } from "./tools/metricsChainMetricsGetTeleporterMetricsByChain.js";
import { tool$metricsEvmChainsGetChain } from "./tools/metricsEvmChainsGetChain.js";
import { tool$metricsEvmChainsListChains } from "./tools/metricsEvmChainsListChains.js";
import { tool$metricsHealthCheckMetricsHealthCheck } from "./tools/metricsHealthCheckMetricsHealthCheck.js";
import { tool$metricsLookingGlassCompositeQuery } from "./tools/metricsLookingGlassCompositeQuery.js";
import { tool$metricsLookingGlassGetAddressesByBalanceOverTime } from "./tools/metricsLookingGlassGetAddressesByBalanceOverTime.js";
import { tool$metricsLookingGlassGetAddressesByBtcbBridged } from "./tools/metricsLookingGlassGetAddressesByBtcbBridged.js";
import { tool$metricsLookingGlassGetNftHoldersByContractAddress } from "./tools/metricsLookingGlassGetNftHoldersByContractAddress.js";
import { tool$metricsLookingGlassGetValidatorsByDateRange } from "./tools/metricsLookingGlassGetValidatorsByDateRange.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  chainId?: SDKOptions["chainId"] | undefined;
  network?: SDKOptions["network"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
}) {
  const server = new McpServer({
    name: "Avalanche",
    version: "0.2.0",
  });

  const client = new AvalancheCore({
    chainId: deps.chainId,
    network: deps.network,
    serverURL: deps.serverURL,
    serverIdx: deps.serverIdx,
  });

  const scopes = new Set(deps.scopes ?? mcpScopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$metricsHealthCheckMetricsHealthCheck);
  tool(tool$metricsLookingGlassGetNftHoldersByContractAddress);
  tool(tool$metricsLookingGlassGetAddressesByBalanceOverTime);
  tool(tool$metricsLookingGlassGetAddressesByBtcbBridged);
  tool(tool$metricsLookingGlassGetValidatorsByDateRange);
  tool(tool$metricsLookingGlassCompositeQuery);
  tool(tool$metricsEvmChainsListChains);
  tool(tool$metricsEvmChainsGetChain);
  tool(tool$metricsChainMetricsGetEvmChainMetrics);
  tool(tool$metricsChainMetricsGetTeleporterMetricsByChain);
  tool(tool$metricsChainMetricsGetEvmChainRollingWindowMetrics);
  tool(tool$metricsChainMetricsGetStakingMetrics);

  return server;
}
