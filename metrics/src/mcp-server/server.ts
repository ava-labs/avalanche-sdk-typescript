/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { AvalancheCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$metricsChainsGet } from "./tools/metricsChainsGet.js";
import { tool$metricsChainsGetMetrics } from "./tools/metricsChainsGetMetrics.js";
import { tool$metricsChainsGetRollingWindowMetrics } from "./tools/metricsChainsGetRollingWindowMetrics.js";
import { tool$metricsChainsGetTeleporterMetrics } from "./tools/metricsChainsGetTeleporterMetrics.js";
import { tool$metricsChainsList } from "./tools/metricsChainsList.js";
import { tool$metricsChainsListBTCbBridgersAboveThreshold } from "./tools/metricsChainsListBTCbBridgersAboveThreshold.js";
import { tool$metricsChainsListNftHolders } from "./tools/metricsChainsListNftHolders.js";
import { tool$metricsChainsListTokenHoldersAboveThreshold } from "./tools/metricsChainsListTokenHoldersAboveThreshold.js";
import { tool$metricsHealthCheck } from "./tools/metricsHealthCheck.js";
import { tool$metricsL1ValidatorsGetMetricsByNodeId } from "./tools/metricsL1ValidatorsGetMetricsByNodeId.js";
import { tool$metricsL1ValidatorsGetMetricsBySubnetId } from "./tools/metricsL1ValidatorsGetMetricsBySubnetId.js";
import { tool$metricsL1ValidatorsGetMetricsByValidationId } from "./tools/metricsL1ValidatorsGetMetricsByValidationId.js";
import { tool$metricsL1ValidatorsListMetrics } from "./tools/metricsL1ValidatorsListMetrics.js";
import { tool$metricsNetworksGetStakingMetrics } from "./tools/metricsNetworksGetStakingMetrics.js";
import { tool$metricsSubnetsGetValidators } from "./tools/metricsSubnetsGetValidators.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  chainId?: SDKOptions["chainId"] | undefined;
  network?: SDKOptions["network"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
}) {
  const server = new McpServer({
    name: "Avalanche",
    version: "0.4.0",
  });

  const client = new AvalancheCore({
    chainId: deps.chainId,
    network: deps.network,
    serverURL: deps.serverURL,
    serverIdx: deps.serverIdx,
  });

  const scopes = new Set(deps.scopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$metricsHealthCheck);
  tool(tool$metricsChainsList);
  tool(tool$metricsChainsGet);
  tool(tool$metricsChainsGetMetrics);
  tool(tool$metricsChainsGetTeleporterMetrics);
  tool(tool$metricsChainsGetRollingWindowMetrics);
  tool(tool$metricsChainsListNftHolders);
  tool(tool$metricsChainsListTokenHoldersAboveThreshold);
  tool(tool$metricsChainsListBTCbBridgersAboveThreshold);
  tool(tool$metricsNetworksGetStakingMetrics);
  tool(tool$metricsL1ValidatorsListMetrics);
  tool(tool$metricsL1ValidatorsGetMetricsByValidationId);
  tool(tool$metricsL1ValidatorsGetMetricsByNodeId);
  tool(tool$metricsL1ValidatorsGetMetricsBySubnetId);
  tool(tool$metricsSubnetsGetValidators);

  return server;
}
