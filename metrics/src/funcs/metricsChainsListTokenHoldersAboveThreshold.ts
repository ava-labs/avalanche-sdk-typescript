/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { AvalancheCore } from "../core.js";
import { dlv } from "../lib/dlv.js";
import { encodeFormQuery, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { pathToFunc } from "../lib/url.js";
import { AvalancheError } from "../models/errors/avalancheerror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
import {
  createPageIterator,
  haltIterator,
  PageIterator,
  Paginator,
} from "../types/operations.js";

/**
 * Get addresses by balance over time
 *
 * @remarks
 * Get list of addresses and their latest balances that have held more than a certain threshold of a given token during the specified time frame.
 */
export function metricsChainsListTokenHoldersAboveThreshold(
  client: AvalancheCore,
  request: operations.GetAddressesByBalanceOverTimeRequest,
  options?: RequestOptions,
): APIPromise<
  PageIterator<
    Result<
      operations.GetAddressesByBalanceOverTimeResponse,
      | errors.BadRequestError
      | errors.UnauthorizedError
      | errors.ForbiddenError
      | errors.NotFoundError
      | errors.TooManyRequestsError
      | errors.InternalServerError
      | errors.BadGatewayError
      | errors.ServiceUnavailableError
      | AvalancheError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    { cursor: string }
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: AvalancheCore,
  request: operations.GetAddressesByBalanceOverTimeRequest,
  options?: RequestOptions,
): Promise<
  [
    PageIterator<
      Result<
        operations.GetAddressesByBalanceOverTimeResponse,
        | errors.BadRequestError
        | errors.UnauthorizedError
        | errors.ForbiddenError
        | errors.NotFoundError
        | errors.TooManyRequestsError
        | errors.InternalServerError
        | errors.BadGatewayError
        | errors.ServiceUnavailableError
        | AvalancheError
        | ResponseValidationError
        | ConnectionError
        | RequestAbortedError
        | RequestTimeoutError
        | InvalidRequestError
        | UnexpectedClientError
        | SDKValidationError
      >,
      { cursor: string }
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.GetAddressesByBalanceOverTimeRequest$outboundSchema.parse(
        value,
      ),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [haltIterator(parsed), { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const pathParams = {
    address: encodeSimple("address", payload.address, {
      explode: false,
      charEncoding: "percent",
    }),
    chainId: encodeSimple(
      "chainId",
      payload.chainId ?? client._options.chainId,
      { explode: false, charEncoding: "percent" },
    ),
  };

  const path = pathToFunc("/v2/chains/{chainId}/contracts/{address}/balances")(
    pathParams,
  );

  const query = encodeFormQuery({
    "endTimestamp": payload.endTimestamp,
    "pageSize": payload.pageSize,
    "pageToken": payload.pageToken,
    "startTimestamp": payload.startTimestamp,
    "threshold": payload.threshold,
  });

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "getAddressesByBalanceOverTime",
    oAuth2Scopes: [],

    resolvedSecurity: null,

    securitySource: null,
    retryConfig: options?.retries
      || client._options.retryConfig
      || {
        strategy: "backoff",
        backoff: {
          initialInterval: 500,
          maxInterval: 60000,
          exponent: 1.5,
          maxElapsedTime: 120000,
        },
        retryConnectionErrors: true,
      }
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["5XX"],
  };

  const requestRes = client._createRequest(context, {
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [haltIterator(requestRes), { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: [
      "400",
      "401",
      "403",
      "404",
      "429",
      "4XX",
      "500",
      "502",
      "503",
      "5XX",
    ],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [haltIterator(doResult), { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result, raw] = await M.match<
    operations.GetAddressesByBalanceOverTimeResponse,
    | errors.BadRequestError
    | errors.UnauthorizedError
    | errors.ForbiddenError
    | errors.NotFoundError
    | errors.TooManyRequestsError
    | errors.InternalServerError
    | errors.BadGatewayError
    | errors.ServiceUnavailableError
    | AvalancheError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(
      200,
      operations.GetAddressesByBalanceOverTimeResponse$inboundSchema,
      { key: "Result" },
    ),
    M.jsonErr(400, errors.BadRequestError$inboundSchema),
    M.jsonErr(401, errors.UnauthorizedError$inboundSchema),
    M.jsonErr(403, errors.ForbiddenError$inboundSchema),
    M.jsonErr(404, errors.NotFoundError$inboundSchema),
    M.jsonErr(429, errors.TooManyRequestsError$inboundSchema),
    M.jsonErr(500, errors.InternalServerError$inboundSchema),
    M.jsonErr(502, errors.BadGatewayError$inboundSchema),
    M.jsonErr(503, errors.ServiceUnavailableError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [haltIterator(result), {
      status: "complete",
      request: req,
      response,
    }];
  }

  const nextFunc = (
    responseData: unknown,
  ): {
    next: Paginator<
      Result<
        operations.GetAddressesByBalanceOverTimeResponse,
        | errors.BadRequestError
        | errors.UnauthorizedError
        | errors.ForbiddenError
        | errors.NotFoundError
        | errors.TooManyRequestsError
        | errors.InternalServerError
        | errors.BadGatewayError
        | errors.ServiceUnavailableError
        | AvalancheError
        | ResponseValidationError
        | ConnectionError
        | RequestAbortedError
        | RequestTimeoutError
        | InvalidRequestError
        | UnexpectedClientError
        | SDKValidationError
      >
    >;
    "~next"?: { cursor: string };
  } => {
    const nextCursor = dlv(responseData, "nextPageToken");
    if (typeof nextCursor !== "string") {
      return { next: () => null };
    }

    const nextVal = () =>
      metricsChainsListTokenHoldersAboveThreshold(
        client,
        {
          ...request,
          pageToken: nextCursor,
        },
        options,
      );

    return { next: nextVal, "~next": { cursor: nextCursor } };
  };

  const page = { ...result, ...nextFunc(raw) };
  return [{ ...page, ...createPageIterator(page, (v) => !v.ok) }, {
    status: "complete",
    request: req,
    response,
  }];
}
