/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DateRangeStarsArenaMinBalanceParam,
  DateRangeStarsArenaMinBalanceParam$inboundSchema,
  DateRangeStarsArenaMinBalanceParam$Outbound,
  DateRangeStarsArenaMinBalanceParam$outboundSchema,
} from "./daterangestarsarenaminbalanceparam.js";

export const TypeAllTimeStarsArenaBalance = {
  AllTimeStarsArenaBalance: "AllTimeStarsArenaBalance",
} as const;
export type TypeAllTimeStarsArenaBalance = ClosedEnum<
  typeof TypeAllTimeStarsArenaBalance
>;

export type AllTimeStarsArenaBalanceQueryDto = {
  id: string;
  type: TypeAllTimeStarsArenaBalance;
  params: DateRangeStarsArenaMinBalanceParam;
};

/** @internal */
export const TypeAllTimeStarsArenaBalance$inboundSchema: z.ZodNativeEnum<
  typeof TypeAllTimeStarsArenaBalance
> = z.nativeEnum(TypeAllTimeStarsArenaBalance);

/** @internal */
export const TypeAllTimeStarsArenaBalance$outboundSchema: z.ZodNativeEnum<
  typeof TypeAllTimeStarsArenaBalance
> = TypeAllTimeStarsArenaBalance$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAllTimeStarsArenaBalance$ {
  /** @deprecated use `TypeAllTimeStarsArenaBalance$inboundSchema` instead. */
  export const inboundSchema = TypeAllTimeStarsArenaBalance$inboundSchema;
  /** @deprecated use `TypeAllTimeStarsArenaBalance$outboundSchema` instead. */
  export const outboundSchema = TypeAllTimeStarsArenaBalance$outboundSchema;
}

/** @internal */
export const AllTimeStarsArenaBalanceQueryDto$inboundSchema: z.ZodType<
  AllTimeStarsArenaBalanceQueryDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: TypeAllTimeStarsArenaBalance$inboundSchema,
  params: DateRangeStarsArenaMinBalanceParam$inboundSchema,
});

/** @internal */
export type AllTimeStarsArenaBalanceQueryDto$Outbound = {
  id: string;
  type: string;
  params: DateRangeStarsArenaMinBalanceParam$Outbound;
};

/** @internal */
export const AllTimeStarsArenaBalanceQueryDto$outboundSchema: z.ZodType<
  AllTimeStarsArenaBalanceQueryDto$Outbound,
  z.ZodTypeDef,
  AllTimeStarsArenaBalanceQueryDto
> = z.object({
  id: z.string(),
  type: TypeAllTimeStarsArenaBalance$outboundSchema,
  params: DateRangeStarsArenaMinBalanceParam$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllTimeStarsArenaBalanceQueryDto$ {
  /** @deprecated use `AllTimeStarsArenaBalanceQueryDto$inboundSchema` instead. */
  export const inboundSchema = AllTimeStarsArenaBalanceQueryDto$inboundSchema;
  /** @deprecated use `AllTimeStarsArenaBalanceQueryDto$outboundSchema` instead. */
  export const outboundSchema = AllTimeStarsArenaBalanceQueryDto$outboundSchema;
  /** @deprecated use `AllTimeStarsArenaBalanceQueryDto$Outbound` instead. */
  export type Outbound = AllTimeStarsArenaBalanceQueryDto$Outbound;
}

export function allTimeStarsArenaBalanceQueryDtoToJSON(
  allTimeStarsArenaBalanceQueryDto: AllTimeStarsArenaBalanceQueryDto,
): string {
  return JSON.stringify(
    AllTimeStarsArenaBalanceQueryDto$outboundSchema.parse(
      allTimeStarsArenaBalanceQueryDto,
    ),
  );
}

export function allTimeStarsArenaBalanceQueryDtoFromJSON(
  jsonString: string,
): SafeParseResult<AllTimeStarsArenaBalanceQueryDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllTimeStarsArenaBalanceQueryDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllTimeStarsArenaBalanceQueryDto' from JSON`,
  );
}
