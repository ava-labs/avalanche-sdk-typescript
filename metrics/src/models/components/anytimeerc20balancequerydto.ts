/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DateRangeErc20MinBalanceParam,
  DateRangeErc20MinBalanceParam$inboundSchema,
  DateRangeErc20MinBalanceParam$Outbound,
  DateRangeErc20MinBalanceParam$outboundSchema,
} from "./daterangeerc20minbalanceparam.js";

export const TypeAnyTimeErc20Balance = {
  AnyTimeErc20Balance: "AnyTimeErc20Balance",
} as const;
export type TypeAnyTimeErc20Balance = ClosedEnum<
  typeof TypeAnyTimeErc20Balance
>;

export type AnyTimeErc20BalanceQueryDto = {
  id: string;
  type: TypeAnyTimeErc20Balance;
  params: DateRangeErc20MinBalanceParam;
};

/** @internal */
export const TypeAnyTimeErc20Balance$inboundSchema: z.ZodNativeEnum<
  typeof TypeAnyTimeErc20Balance
> = z.nativeEnum(TypeAnyTimeErc20Balance);

/** @internal */
export const TypeAnyTimeErc20Balance$outboundSchema: z.ZodNativeEnum<
  typeof TypeAnyTimeErc20Balance
> = TypeAnyTimeErc20Balance$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAnyTimeErc20Balance$ {
  /** @deprecated use `TypeAnyTimeErc20Balance$inboundSchema` instead. */
  export const inboundSchema = TypeAnyTimeErc20Balance$inboundSchema;
  /** @deprecated use `TypeAnyTimeErc20Balance$outboundSchema` instead. */
  export const outboundSchema = TypeAnyTimeErc20Balance$outboundSchema;
}

/** @internal */
export const AnyTimeErc20BalanceQueryDto$inboundSchema: z.ZodType<
  AnyTimeErc20BalanceQueryDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: TypeAnyTimeErc20Balance$inboundSchema,
  params: DateRangeErc20MinBalanceParam$inboundSchema,
});

/** @internal */
export type AnyTimeErc20BalanceQueryDto$Outbound = {
  id: string;
  type: string;
  params: DateRangeErc20MinBalanceParam$Outbound;
};

/** @internal */
export const AnyTimeErc20BalanceQueryDto$outboundSchema: z.ZodType<
  AnyTimeErc20BalanceQueryDto$Outbound,
  z.ZodTypeDef,
  AnyTimeErc20BalanceQueryDto
> = z.object({
  id: z.string(),
  type: TypeAnyTimeErc20Balance$outboundSchema,
  params: DateRangeErc20MinBalanceParam$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnyTimeErc20BalanceQueryDto$ {
  /** @deprecated use `AnyTimeErc20BalanceQueryDto$inboundSchema` instead. */
  export const inboundSchema = AnyTimeErc20BalanceQueryDto$inboundSchema;
  /** @deprecated use `AnyTimeErc20BalanceQueryDto$outboundSchema` instead. */
  export const outboundSchema = AnyTimeErc20BalanceQueryDto$outboundSchema;
  /** @deprecated use `AnyTimeErc20BalanceQueryDto$Outbound` instead. */
  export type Outbound = AnyTimeErc20BalanceQueryDto$Outbound;
}

export function anyTimeErc20BalanceQueryDtoToJSON(
  anyTimeErc20BalanceQueryDto: AnyTimeErc20BalanceQueryDto,
): string {
  return JSON.stringify(
    AnyTimeErc20BalanceQueryDto$outboundSchema.parse(
      anyTimeErc20BalanceQueryDto,
    ),
  );
}

export function anyTimeErc20BalanceQueryDtoFromJSON(
  jsonString: string,
): SafeParseResult<AnyTimeErc20BalanceQueryDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnyTimeErc20BalanceQueryDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnyTimeErc20BalanceQueryDto' from JSON`,
  );
}
