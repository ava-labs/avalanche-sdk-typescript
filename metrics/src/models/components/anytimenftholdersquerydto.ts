/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DateRangeNftHoldersParam,
  DateRangeNftHoldersParam$inboundSchema,
  DateRangeNftHoldersParam$Outbound,
  DateRangeNftHoldersParam$outboundSchema,
} from "./daterangenftholdersparam.js";
import {
  TimestampRangeNftHoldersParam,
  TimestampRangeNftHoldersParam$inboundSchema,
  TimestampRangeNftHoldersParam$Outbound,
  TimestampRangeNftHoldersParam$outboundSchema,
} from "./timestamprangenftholdersparam.js";

export const TypeAnyTimeNftHolders = {
  AnyTimeNftHolders: "AnyTimeNftHolders",
} as const;
export type TypeAnyTimeNftHolders = ClosedEnum<typeof TypeAnyTimeNftHolders>;

export type AnyTimeNftHoldersQueryDtoParams =
  | TimestampRangeNftHoldersParam
  | DateRangeNftHoldersParam;

export type AnyTimeNftHoldersQueryDto = {
  id: string;
  type: TypeAnyTimeNftHolders;
  params: TimestampRangeNftHoldersParam | DateRangeNftHoldersParam;
};

/** @internal */
export const TypeAnyTimeNftHolders$inboundSchema: z.ZodNativeEnum<
  typeof TypeAnyTimeNftHolders
> = z.nativeEnum(TypeAnyTimeNftHolders);

/** @internal */
export const TypeAnyTimeNftHolders$outboundSchema: z.ZodNativeEnum<
  typeof TypeAnyTimeNftHolders
> = TypeAnyTimeNftHolders$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAnyTimeNftHolders$ {
  /** @deprecated use `TypeAnyTimeNftHolders$inboundSchema` instead. */
  export const inboundSchema = TypeAnyTimeNftHolders$inboundSchema;
  /** @deprecated use `TypeAnyTimeNftHolders$outboundSchema` instead. */
  export const outboundSchema = TypeAnyTimeNftHolders$outboundSchema;
}

/** @internal */
export const AnyTimeNftHoldersQueryDtoParams$inboundSchema: z.ZodType<
  AnyTimeNftHoldersQueryDtoParams,
  z.ZodTypeDef,
  unknown
> = z.union([
  TimestampRangeNftHoldersParam$inboundSchema,
  DateRangeNftHoldersParam$inboundSchema,
]);

/** @internal */
export type AnyTimeNftHoldersQueryDtoParams$Outbound =
  | TimestampRangeNftHoldersParam$Outbound
  | DateRangeNftHoldersParam$Outbound;

/** @internal */
export const AnyTimeNftHoldersQueryDtoParams$outboundSchema: z.ZodType<
  AnyTimeNftHoldersQueryDtoParams$Outbound,
  z.ZodTypeDef,
  AnyTimeNftHoldersQueryDtoParams
> = z.union([
  TimestampRangeNftHoldersParam$outboundSchema,
  DateRangeNftHoldersParam$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnyTimeNftHoldersQueryDtoParams$ {
  /** @deprecated use `AnyTimeNftHoldersQueryDtoParams$inboundSchema` instead. */
  export const inboundSchema = AnyTimeNftHoldersQueryDtoParams$inboundSchema;
  /** @deprecated use `AnyTimeNftHoldersQueryDtoParams$outboundSchema` instead. */
  export const outboundSchema = AnyTimeNftHoldersQueryDtoParams$outboundSchema;
  /** @deprecated use `AnyTimeNftHoldersQueryDtoParams$Outbound` instead. */
  export type Outbound = AnyTimeNftHoldersQueryDtoParams$Outbound;
}

export function anyTimeNftHoldersQueryDtoParamsToJSON(
  anyTimeNftHoldersQueryDtoParams: AnyTimeNftHoldersQueryDtoParams,
): string {
  return JSON.stringify(
    AnyTimeNftHoldersQueryDtoParams$outboundSchema.parse(
      anyTimeNftHoldersQueryDtoParams,
    ),
  );
}

export function anyTimeNftHoldersQueryDtoParamsFromJSON(
  jsonString: string,
): SafeParseResult<AnyTimeNftHoldersQueryDtoParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnyTimeNftHoldersQueryDtoParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnyTimeNftHoldersQueryDtoParams' from JSON`,
  );
}

/** @internal */
export const AnyTimeNftHoldersQueryDto$inboundSchema: z.ZodType<
  AnyTimeNftHoldersQueryDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: TypeAnyTimeNftHolders$inboundSchema,
  params: z.union([
    TimestampRangeNftHoldersParam$inboundSchema,
    DateRangeNftHoldersParam$inboundSchema,
  ]),
});

/** @internal */
export type AnyTimeNftHoldersQueryDto$Outbound = {
  id: string;
  type: string;
  params:
    | TimestampRangeNftHoldersParam$Outbound
    | DateRangeNftHoldersParam$Outbound;
};

/** @internal */
export const AnyTimeNftHoldersQueryDto$outboundSchema: z.ZodType<
  AnyTimeNftHoldersQueryDto$Outbound,
  z.ZodTypeDef,
  AnyTimeNftHoldersQueryDto
> = z.object({
  id: z.string(),
  type: TypeAnyTimeNftHolders$outboundSchema,
  params: z.union([
    TimestampRangeNftHoldersParam$outboundSchema,
    DateRangeNftHoldersParam$outboundSchema,
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnyTimeNftHoldersQueryDto$ {
  /** @deprecated use `AnyTimeNftHoldersQueryDto$inboundSchema` instead. */
  export const inboundSchema = AnyTimeNftHoldersQueryDto$inboundSchema;
  /** @deprecated use `AnyTimeNftHoldersQueryDto$outboundSchema` instead. */
  export const outboundSchema = AnyTimeNftHoldersQueryDto$outboundSchema;
  /** @deprecated use `AnyTimeNftHoldersQueryDto$Outbound` instead. */
  export type Outbound = AnyTimeNftHoldersQueryDto$Outbound;
}

export function anyTimeNftHoldersQueryDtoToJSON(
  anyTimeNftHoldersQueryDto: AnyTimeNftHoldersQueryDto,
): string {
  return JSON.stringify(
    AnyTimeNftHoldersQueryDto$outboundSchema.parse(anyTimeNftHoldersQueryDto),
  );
}

export function anyTimeNftHoldersQueryDtoFromJSON(
  jsonString: string,
): SafeParseResult<AnyTimeNftHoldersQueryDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnyTimeNftHoldersQueryDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnyTimeNftHoldersQueryDto' from JSON`,
  );
}
