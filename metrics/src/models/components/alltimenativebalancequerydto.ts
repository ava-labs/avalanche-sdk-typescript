/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DateRangeMinBalanceParam,
  DateRangeMinBalanceParam$inboundSchema,
  DateRangeMinBalanceParam$Outbound,
  DateRangeMinBalanceParam$outboundSchema,
} from "./daterangeminbalanceparam.js";

export const AllTimeNativeBalanceQueryDtoType = {
  AllTimeNativeBalance: "AllTimeNativeBalance",
} as const;
export type AllTimeNativeBalanceQueryDtoType = ClosedEnum<
  typeof AllTimeNativeBalanceQueryDtoType
>;

export type AllTimeNativeBalanceQueryDto = {
  id: string;
  type: AllTimeNativeBalanceQueryDtoType;
  params: DateRangeMinBalanceParam;
};

/** @internal */
export const AllTimeNativeBalanceQueryDtoType$inboundSchema: z.ZodNativeEnum<
  typeof AllTimeNativeBalanceQueryDtoType
> = z.nativeEnum(AllTimeNativeBalanceQueryDtoType);

/** @internal */
export const AllTimeNativeBalanceQueryDtoType$outboundSchema: z.ZodNativeEnum<
  typeof AllTimeNativeBalanceQueryDtoType
> = AllTimeNativeBalanceQueryDtoType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllTimeNativeBalanceQueryDtoType$ {
  /** @deprecated use `AllTimeNativeBalanceQueryDtoType$inboundSchema` instead. */
  export const inboundSchema = AllTimeNativeBalanceQueryDtoType$inboundSchema;
  /** @deprecated use `AllTimeNativeBalanceQueryDtoType$outboundSchema` instead. */
  export const outboundSchema = AllTimeNativeBalanceQueryDtoType$outboundSchema;
}

/** @internal */
export const AllTimeNativeBalanceQueryDto$inboundSchema: z.ZodType<
  AllTimeNativeBalanceQueryDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: AllTimeNativeBalanceQueryDtoType$inboundSchema,
  params: DateRangeMinBalanceParam$inboundSchema,
});

/** @internal */
export type AllTimeNativeBalanceQueryDto$Outbound = {
  id: string;
  type: string;
  params: DateRangeMinBalanceParam$Outbound;
};

/** @internal */
export const AllTimeNativeBalanceQueryDto$outboundSchema: z.ZodType<
  AllTimeNativeBalanceQueryDto$Outbound,
  z.ZodTypeDef,
  AllTimeNativeBalanceQueryDto
> = z.object({
  id: z.string(),
  type: AllTimeNativeBalanceQueryDtoType$outboundSchema,
  params: DateRangeMinBalanceParam$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllTimeNativeBalanceQueryDto$ {
  /** @deprecated use `AllTimeNativeBalanceQueryDto$inboundSchema` instead. */
  export const inboundSchema = AllTimeNativeBalanceQueryDto$inboundSchema;
  /** @deprecated use `AllTimeNativeBalanceQueryDto$outboundSchema` instead. */
  export const outboundSchema = AllTimeNativeBalanceQueryDto$outboundSchema;
  /** @deprecated use `AllTimeNativeBalanceQueryDto$Outbound` instead. */
  export type Outbound = AllTimeNativeBalanceQueryDto$Outbound;
}

export function allTimeNativeBalanceQueryDtoToJSON(
  allTimeNativeBalanceQueryDto: AllTimeNativeBalanceQueryDto,
): string {
  return JSON.stringify(
    AllTimeNativeBalanceQueryDto$outboundSchema.parse(
      allTimeNativeBalanceQueryDto,
    ),
  );
}

export function allTimeNativeBalanceQueryDtoFromJSON(
  jsonString: string,
): SafeParseResult<AllTimeNativeBalanceQueryDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllTimeNativeBalanceQueryDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllTimeNativeBalanceQueryDto' from JSON`,
  );
}
