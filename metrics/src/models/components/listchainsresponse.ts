/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Chain,
  Chain$inboundSchema,
  Chain$Outbound,
  Chain$outboundSchema,
} from "./chain.js";

export type ListChainsResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  /**
   * Array of Subnet - EVM Chain ID mappings whose metrics we support.
   */
  chains: Array<Chain>;
};

/** @internal */
export const ListChainsResponse$inboundSchema: z.ZodType<
  ListChainsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  chains: z.array(Chain$inboundSchema),
});

/** @internal */
export type ListChainsResponse$Outbound = {
  nextPageToken?: string | undefined;
  chains: Array<Chain$Outbound>;
};

/** @internal */
export const ListChainsResponse$outboundSchema: z.ZodType<
  ListChainsResponse$Outbound,
  z.ZodTypeDef,
  ListChainsResponse
> = z.object({
  nextPageToken: z.string().optional(),
  chains: z.array(Chain$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChainsResponse$ {
  /** @deprecated use `ListChainsResponse$inboundSchema` instead. */
  export const inboundSchema = ListChainsResponse$inboundSchema;
  /** @deprecated use `ListChainsResponse$outboundSchema` instead. */
  export const outboundSchema = ListChainsResponse$outboundSchema;
  /** @deprecated use `ListChainsResponse$Outbound` instead. */
  export type Outbound = ListChainsResponse$Outbound;
}

export function listChainsResponseToJSON(
  listChainsResponse: ListChainsResponse,
): string {
  return JSON.stringify(
    ListChainsResponse$outboundSchema.parse(listChainsResponse),
  );
}

export function listChainsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListChainsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListChainsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListChainsResponse' from JSON`,
  );
}
