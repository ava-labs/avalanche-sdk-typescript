/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DateRangeNftHoldersParam,
  DateRangeNftHoldersParam$inboundSchema,
  DateRangeNftHoldersParam$Outbound,
  DateRangeNftHoldersParam$outboundSchema,
} from "./daterangenftholdersparam.js";
import {
  TimestampRangeNftHoldersParam,
  TimestampRangeNftHoldersParam$inboundSchema,
  TimestampRangeNftHoldersParam$Outbound,
  TimestampRangeNftHoldersParam$outboundSchema,
} from "./timestamprangenftholdersparam.js";

export const TypeAllTimeNftHolders = {
  AllTimeNftHolders: "AllTimeNftHolders",
} as const;
export type TypeAllTimeNftHolders = ClosedEnum<typeof TypeAllTimeNftHolders>;

export type AllTimeNftHoldersQueryDtoParams =
  | TimestampRangeNftHoldersParam
  | DateRangeNftHoldersParam;

export type AllTimeNftHoldersQueryDto = {
  id: string;
  type: TypeAllTimeNftHolders;
  params: TimestampRangeNftHoldersParam | DateRangeNftHoldersParam;
};

/** @internal */
export const TypeAllTimeNftHolders$inboundSchema: z.ZodNativeEnum<
  typeof TypeAllTimeNftHolders
> = z.nativeEnum(TypeAllTimeNftHolders);

/** @internal */
export const TypeAllTimeNftHolders$outboundSchema: z.ZodNativeEnum<
  typeof TypeAllTimeNftHolders
> = TypeAllTimeNftHolders$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAllTimeNftHolders$ {
  /** @deprecated use `TypeAllTimeNftHolders$inboundSchema` instead. */
  export const inboundSchema = TypeAllTimeNftHolders$inboundSchema;
  /** @deprecated use `TypeAllTimeNftHolders$outboundSchema` instead. */
  export const outboundSchema = TypeAllTimeNftHolders$outboundSchema;
}

/** @internal */
export const AllTimeNftHoldersQueryDtoParams$inboundSchema: z.ZodType<
  AllTimeNftHoldersQueryDtoParams,
  z.ZodTypeDef,
  unknown
> = z.union([
  TimestampRangeNftHoldersParam$inboundSchema,
  DateRangeNftHoldersParam$inboundSchema,
]);

/** @internal */
export type AllTimeNftHoldersQueryDtoParams$Outbound =
  | TimestampRangeNftHoldersParam$Outbound
  | DateRangeNftHoldersParam$Outbound;

/** @internal */
export const AllTimeNftHoldersQueryDtoParams$outboundSchema: z.ZodType<
  AllTimeNftHoldersQueryDtoParams$Outbound,
  z.ZodTypeDef,
  AllTimeNftHoldersQueryDtoParams
> = z.union([
  TimestampRangeNftHoldersParam$outboundSchema,
  DateRangeNftHoldersParam$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllTimeNftHoldersQueryDtoParams$ {
  /** @deprecated use `AllTimeNftHoldersQueryDtoParams$inboundSchema` instead. */
  export const inboundSchema = AllTimeNftHoldersQueryDtoParams$inboundSchema;
  /** @deprecated use `AllTimeNftHoldersQueryDtoParams$outboundSchema` instead. */
  export const outboundSchema = AllTimeNftHoldersQueryDtoParams$outboundSchema;
  /** @deprecated use `AllTimeNftHoldersQueryDtoParams$Outbound` instead. */
  export type Outbound = AllTimeNftHoldersQueryDtoParams$Outbound;
}

export function allTimeNftHoldersQueryDtoParamsToJSON(
  allTimeNftHoldersQueryDtoParams: AllTimeNftHoldersQueryDtoParams,
): string {
  return JSON.stringify(
    AllTimeNftHoldersQueryDtoParams$outboundSchema.parse(
      allTimeNftHoldersQueryDtoParams,
    ),
  );
}

export function allTimeNftHoldersQueryDtoParamsFromJSON(
  jsonString: string,
): SafeParseResult<AllTimeNftHoldersQueryDtoParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllTimeNftHoldersQueryDtoParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllTimeNftHoldersQueryDtoParams' from JSON`,
  );
}

/** @internal */
export const AllTimeNftHoldersQueryDto$inboundSchema: z.ZodType<
  AllTimeNftHoldersQueryDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: TypeAllTimeNftHolders$inboundSchema,
  params: z.union([
    TimestampRangeNftHoldersParam$inboundSchema,
    DateRangeNftHoldersParam$inboundSchema,
  ]),
});

/** @internal */
export type AllTimeNftHoldersQueryDto$Outbound = {
  id: string;
  type: string;
  params:
    | TimestampRangeNftHoldersParam$Outbound
    | DateRangeNftHoldersParam$Outbound;
};

/** @internal */
export const AllTimeNftHoldersQueryDto$outboundSchema: z.ZodType<
  AllTimeNftHoldersQueryDto$Outbound,
  z.ZodTypeDef,
  AllTimeNftHoldersQueryDto
> = z.object({
  id: z.string(),
  type: TypeAllTimeNftHolders$outboundSchema,
  params: z.union([
    TimestampRangeNftHoldersParam$outboundSchema,
    DateRangeNftHoldersParam$outboundSchema,
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllTimeNftHoldersQueryDto$ {
  /** @deprecated use `AllTimeNftHoldersQueryDto$inboundSchema` instead. */
  export const inboundSchema = AllTimeNftHoldersQueryDto$inboundSchema;
  /** @deprecated use `AllTimeNftHoldersQueryDto$outboundSchema` instead. */
  export const outboundSchema = AllTimeNftHoldersQueryDto$outboundSchema;
  /** @deprecated use `AllTimeNftHoldersQueryDto$Outbound` instead. */
  export type Outbound = AllTimeNftHoldersQueryDto$Outbound;
}

export function allTimeNftHoldersQueryDtoToJSON(
  allTimeNftHoldersQueryDto: AllTimeNftHoldersQueryDto,
): string {
  return JSON.stringify(
    AllTimeNftHoldersQueryDto$outboundSchema.parse(allTimeNftHoldersQueryDto),
  );
}

export function allTimeNftHoldersQueryDtoFromJSON(
  jsonString: string,
): SafeParseResult<AllTimeNftHoldersQueryDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllTimeNftHoldersQueryDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllTimeNftHoldersQueryDto' from JSON`,
  );
}
