/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DateRangeErc20MinBalanceParam,
  DateRangeErc20MinBalanceParam$inboundSchema,
  DateRangeErc20MinBalanceParam$Outbound,
  DateRangeErc20MinBalanceParam$outboundSchema,
} from "./daterangeerc20minbalanceparam.js";

export const TypeAllTimeErc20Balance = {
  AllTimeErc20Balance: "AllTimeErc20Balance",
} as const;
export type TypeAllTimeErc20Balance = ClosedEnum<
  typeof TypeAllTimeErc20Balance
>;

export type AllTimeErc20BalanceQueryDto = {
  id: string;
  type: TypeAllTimeErc20Balance;
  params: DateRangeErc20MinBalanceParam;
};

/** @internal */
export const TypeAllTimeErc20Balance$inboundSchema: z.ZodNativeEnum<
  typeof TypeAllTimeErc20Balance
> = z.nativeEnum(TypeAllTimeErc20Balance);

/** @internal */
export const TypeAllTimeErc20Balance$outboundSchema: z.ZodNativeEnum<
  typeof TypeAllTimeErc20Balance
> = TypeAllTimeErc20Balance$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAllTimeErc20Balance$ {
  /** @deprecated use `TypeAllTimeErc20Balance$inboundSchema` instead. */
  export const inboundSchema = TypeAllTimeErc20Balance$inboundSchema;
  /** @deprecated use `TypeAllTimeErc20Balance$outboundSchema` instead. */
  export const outboundSchema = TypeAllTimeErc20Balance$outboundSchema;
}

/** @internal */
export const AllTimeErc20BalanceQueryDto$inboundSchema: z.ZodType<
  AllTimeErc20BalanceQueryDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: TypeAllTimeErc20Balance$inboundSchema,
  params: DateRangeErc20MinBalanceParam$inboundSchema,
});

/** @internal */
export type AllTimeErc20BalanceQueryDto$Outbound = {
  id: string;
  type: string;
  params: DateRangeErc20MinBalanceParam$Outbound;
};

/** @internal */
export const AllTimeErc20BalanceQueryDto$outboundSchema: z.ZodType<
  AllTimeErc20BalanceQueryDto$Outbound,
  z.ZodTypeDef,
  AllTimeErc20BalanceQueryDto
> = z.object({
  id: z.string(),
  type: TypeAllTimeErc20Balance$outboundSchema,
  params: DateRangeErc20MinBalanceParam$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllTimeErc20BalanceQueryDto$ {
  /** @deprecated use `AllTimeErc20BalanceQueryDto$inboundSchema` instead. */
  export const inboundSchema = AllTimeErc20BalanceQueryDto$inboundSchema;
  /** @deprecated use `AllTimeErc20BalanceQueryDto$outboundSchema` instead. */
  export const outboundSchema = AllTimeErc20BalanceQueryDto$outboundSchema;
  /** @deprecated use `AllTimeErc20BalanceQueryDto$Outbound` instead. */
  export type Outbound = AllTimeErc20BalanceQueryDto$Outbound;
}

export function allTimeErc20BalanceQueryDtoToJSON(
  allTimeErc20BalanceQueryDto: AllTimeErc20BalanceQueryDto,
): string {
  return JSON.stringify(
    AllTimeErc20BalanceQueryDto$outboundSchema.parse(
      allTimeErc20BalanceQueryDto,
    ),
  );
}

export function allTimeErc20BalanceQueryDtoFromJSON(
  jsonString: string,
): SafeParseResult<AllTimeErc20BalanceQueryDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllTimeErc20BalanceQueryDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllTimeErc20BalanceQueryDto' from JSON`,
  );
}
