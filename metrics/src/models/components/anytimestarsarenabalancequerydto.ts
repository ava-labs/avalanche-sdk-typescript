/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DateRangeStarsArenaMinBalanceParam,
  DateRangeStarsArenaMinBalanceParam$inboundSchema,
  DateRangeStarsArenaMinBalanceParam$Outbound,
  DateRangeStarsArenaMinBalanceParam$outboundSchema,
} from "./daterangestarsarenaminbalanceparam.js";

export const TypeAnyTimeStarsArenaBalance = {
  AnyTimeStarsArenaBalance: "AnyTimeStarsArenaBalance",
} as const;
export type TypeAnyTimeStarsArenaBalance = ClosedEnum<
  typeof TypeAnyTimeStarsArenaBalance
>;

export type AnyTimeStarsArenaBalanceQueryDto = {
  id: string;
  type: TypeAnyTimeStarsArenaBalance;
  params: DateRangeStarsArenaMinBalanceParam;
};

/** @internal */
export const TypeAnyTimeStarsArenaBalance$inboundSchema: z.ZodNativeEnum<
  typeof TypeAnyTimeStarsArenaBalance
> = z.nativeEnum(TypeAnyTimeStarsArenaBalance);

/** @internal */
export const TypeAnyTimeStarsArenaBalance$outboundSchema: z.ZodNativeEnum<
  typeof TypeAnyTimeStarsArenaBalance
> = TypeAnyTimeStarsArenaBalance$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAnyTimeStarsArenaBalance$ {
  /** @deprecated use `TypeAnyTimeStarsArenaBalance$inboundSchema` instead. */
  export const inboundSchema = TypeAnyTimeStarsArenaBalance$inboundSchema;
  /** @deprecated use `TypeAnyTimeStarsArenaBalance$outboundSchema` instead. */
  export const outboundSchema = TypeAnyTimeStarsArenaBalance$outboundSchema;
}

/** @internal */
export const AnyTimeStarsArenaBalanceQueryDto$inboundSchema: z.ZodType<
  AnyTimeStarsArenaBalanceQueryDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: TypeAnyTimeStarsArenaBalance$inboundSchema,
  params: DateRangeStarsArenaMinBalanceParam$inboundSchema,
});

/** @internal */
export type AnyTimeStarsArenaBalanceQueryDto$Outbound = {
  id: string;
  type: string;
  params: DateRangeStarsArenaMinBalanceParam$Outbound;
};

/** @internal */
export const AnyTimeStarsArenaBalanceQueryDto$outboundSchema: z.ZodType<
  AnyTimeStarsArenaBalanceQueryDto$Outbound,
  z.ZodTypeDef,
  AnyTimeStarsArenaBalanceQueryDto
> = z.object({
  id: z.string(),
  type: TypeAnyTimeStarsArenaBalance$outboundSchema,
  params: DateRangeStarsArenaMinBalanceParam$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnyTimeStarsArenaBalanceQueryDto$ {
  /** @deprecated use `AnyTimeStarsArenaBalanceQueryDto$inboundSchema` instead. */
  export const inboundSchema = AnyTimeStarsArenaBalanceQueryDto$inboundSchema;
  /** @deprecated use `AnyTimeStarsArenaBalanceQueryDto$outboundSchema` instead. */
  export const outboundSchema = AnyTimeStarsArenaBalanceQueryDto$outboundSchema;
  /** @deprecated use `AnyTimeStarsArenaBalanceQueryDto$Outbound` instead. */
  export type Outbound = AnyTimeStarsArenaBalanceQueryDto$Outbound;
}

export function anyTimeStarsArenaBalanceQueryDtoToJSON(
  anyTimeStarsArenaBalanceQueryDto: AnyTimeStarsArenaBalanceQueryDto,
): string {
  return JSON.stringify(
    AnyTimeStarsArenaBalanceQueryDto$outboundSchema.parse(
      anyTimeStarsArenaBalanceQueryDto,
    ),
  );
}

export function anyTimeStarsArenaBalanceQueryDtoFromJSON(
  jsonString: string,
): SafeParseResult<AnyTimeStarsArenaBalanceQueryDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnyTimeStarsArenaBalanceQueryDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnyTimeStarsArenaBalanceQueryDto' from JSON`,
  );
}
