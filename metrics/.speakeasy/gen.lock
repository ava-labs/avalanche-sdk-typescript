lockVersion: 2.0.0
id: 08752bf2-e791-41ce-8509-32ac5e1c0179
management:
  docChecksum: 367751ce2e2821606b6c9edaba6f9407
  docVersion: 1.0.0
  speakeasyVersion: 1.598.2
  generationVersion: 2.674.3
  releaseVersion: 0.4.3
  configChecksum: 91a419d5ae509d645033e93ef9369cb7
  repoURL: https://github.com/ava-labs/avalanche-sdk-typescript.git
  repoSubDirectory: metrics
  installationURL: https://gitpkg.now.sh/ava-labs/avalanche-sdk-typescript/metrics
  published: true
features:
  typescript:
    additionalDependencies: 0.1.0
    constsAndDefaults: 0.1.12
    core: 3.21.20
    defaultEnabledRetries: 0.1.0
    devContainers: 2.90.0
    enumUnions: 0.1.0
    envVarSecurityUsage: 0.1.2
    globalSecurityCallbacks: 0.1.0
    globalServerURLs: 2.82.5
    globals: 2.82.2
    groups: 2.81.2
    mcpServer: 0.9.3
    nameOverrides: 2.81.2
    nullables: 0.1.1
    pagination: 2.83.0
    responseFormat: 0.2.3
    retries: 2.83.0
    sdkHooks: 0.3.0
    unions: 2.85.11
generatedFiles:
  - .devcontainer/README.md
  - .devcontainer/devcontainer.json
  - .devcontainer/setup.sh
  - .gitattributes
  - .npmignore
  - FUNCTIONS.md
  - RUNTIMES.md
  - USAGE.md
  - docs/lib/utils/retryconfig.md
  - docs/models/components/addressdetails.md
  - docs/models/components/chain.md
  - docs/models/components/chainmetric.md
  - docs/models/components/chainrollingwindowmetric.md
  - docs/models/components/chainrollingwindowmetricsvalue.md
  - docs/models/components/globalparamnetwork.md
  - docs/models/components/healthcheckresultdto.md
  - docs/models/components/healthcheckresultdtostatus.md
  - docs/models/components/healthindicatorresultdto.md
  - docs/models/components/healthindicatorresultdtostatus.md
  - docs/models/components/listchainsresponse.md
  - docs/models/components/lookingglassresponse.md
  - docs/models/components/metricsapiresponse.md
  - docs/models/components/metricsvalue.md
  - docs/models/components/network.md
  - docs/models/components/networkmetric.md
  - docs/models/components/networktype.md
  - docs/models/components/nftholdersresponse.md
  - docs/models/components/pchainaddressdetails.md
  - docs/models/components/pchainlookingglassresponse.md
  - docs/models/components/rollingwindowmetricsapiresponse.md
  - docs/models/components/teleporterchainmetricsapiresponse.md
  - docs/models/components/teleportermetric.md
  - docs/models/components/teleportermetricsvalue.md
  - docs/models/components/timeintervalgranularity.md
  - docs/models/errors/badgatewayerror.md
  - docs/models/errors/badgatewaymessage.md
  - docs/models/errors/badrequesterror.md
  - docs/models/errors/badrequestmessage.md
  - docs/models/errors/forbiddenerror.md
  - docs/models/errors/forbiddenmessage.md
  - docs/models/errors/internalservererror.md
  - docs/models/errors/internalservererrormessage.md
  - docs/models/errors/notfounderror.md
  - docs/models/errors/notfoundmessage.md
  - docs/models/errors/serviceunavailableerror.md
  - docs/models/errors/serviceunavailablemessage.md
  - docs/models/errors/toomanyrequestserror.md
  - docs/models/errors/toomanyrequestsmessage.md
  - docs/models/errors/unauthorizederror.md
  - docs/models/errors/unauthorizedmessage.md
  - docs/models/operations/getaddressesbybalanceovertimeglobals.md
  - docs/models/operations/getaddressesbybalanceovertimerequest.md
  - docs/models/operations/getaddressesbybalanceovertimeresponse.md
  - docs/models/operations/getaddressesbybtcbbridgedrequest.md
  - docs/models/operations/getaddressesbybtcbbridgedresponse.md
  - docs/models/operations/getchainglobals.md
  - docs/models/operations/getchainrequest.md
  - docs/models/operations/getevmchainmetricsglobals.md
  - docs/models/operations/getevmchainmetricsrequest.md
  - docs/models/operations/getevmchainmetricsresponse.md
  - docs/models/operations/getevmchainrollingwindowmetricsglobals.md
  - docs/models/operations/getevmchainrollingwindowmetricsrequest.md
  - docs/models/operations/getmetricsbynodeidmetric.md
  - docs/models/operations/getmetricsbynodeidrequest.md
  - docs/models/operations/getmetricsbysubnetidmetric.md
  - docs/models/operations/getmetricsbysubnetidrequest.md
  - docs/models/operations/getmetricsbyvalidationidmetric.md
  - docs/models/operations/getmetricsbyvalidationidrequest.md
  - docs/models/operations/getnftholdersbycontractaddressglobals.md
  - docs/models/operations/getnftholdersbycontractaddressrequest.md
  - docs/models/operations/getnftholdersbycontractaddressresponse.md
  - docs/models/operations/getstakingmetricsglobals.md
  - docs/models/operations/getstakingmetricsrequest.md
  - docs/models/operations/getstakingmetricsresponse.md
  - docs/models/operations/getteleportermetricsbychainglobals.md
  - docs/models/operations/getteleportermetricsbychainrequest.md
  - docs/models/operations/gettotall1validatormetricsmetric.md
  - docs/models/operations/gettotall1validatormetricsrequest.md
  - docs/models/operations/getvalidatorsbydaterangerequest.md
  - docs/models/operations/getvalidatorsbydaterangeresponse.md
  - docs/models/operations/listchainsrequest.md
  - docs/models/operations/listchainsresponse.md
  - docs/sdks/avalanche/README.md
  - docs/sdks/chains/README.md
  - docs/sdks/l1validators/README.md
  - docs/sdks/metrics/README.md
  - docs/sdks/networks/README.md
  - docs/sdks/subnets/README.md
  - eslint.config.mjs
  - examples/.env.template
  - examples/README.md
  - examples/metricsHealthCheck.example.ts
  - examples/package.json
  - jsr.json
  - package.json
  - src/core.ts
  - src/funcs/metricsChainsGet.ts
  - src/funcs/metricsChainsGetMetrics.ts
  - src/funcs/metricsChainsGetRollingWindowMetrics.ts
  - src/funcs/metricsChainsGetTeleporterMetrics.ts
  - src/funcs/metricsChainsList.ts
  - src/funcs/metricsChainsListBTCbBridgersAboveThreshold.ts
  - src/funcs/metricsChainsListNftHolders.ts
  - src/funcs/metricsChainsListTokenHoldersAboveThreshold.ts
  - src/funcs/metricsHealthCheck.ts
  - src/funcs/metricsL1ValidatorsGetMetricsByNodeId.ts
  - src/funcs/metricsL1ValidatorsGetMetricsBySubnetId.ts
  - src/funcs/metricsL1ValidatorsGetMetricsByValidationId.ts
  - src/funcs/metricsL1ValidatorsListMetrics.ts
  - src/funcs/metricsNetworksGetStakingMetrics.ts
  - src/funcs/metricsSubnetsGetValidators.ts
  - src/hooks/hooks.ts
  - src/hooks/index.ts
  - src/hooks/types.ts
  - src/index.ts
  - src/lib/base64.ts
  - src/lib/config.ts
  - src/lib/dlv.ts
  - src/lib/encodings.ts
  - src/lib/files.ts
  - src/lib/http.ts
  - src/lib/is-plain-object.ts
  - src/lib/logger.ts
  - src/lib/matchers.ts
  - src/lib/primitives.ts
  - src/lib/retries.ts
  - src/lib/schemas.ts
  - src/lib/sdks.ts
  - src/lib/security.ts
  - src/lib/url.ts
  - src/mcp-server/build.mts
  - src/mcp-server/cli.ts
  - src/mcp-server/cli/start/command.ts
  - src/mcp-server/cli/start/impl.ts
  - src/mcp-server/console-logger.ts
  - src/mcp-server/extensions.ts
  - src/mcp-server/mcp-server.ts
  - src/mcp-server/prompts.ts
  - src/mcp-server/resources.ts
  - src/mcp-server/scopes.ts
  - src/mcp-server/server.ts
  - src/mcp-server/shared.ts
  - src/mcp-server/tools.ts
  - src/mcp-server/tools/metricsChainsGet.ts
  - src/mcp-server/tools/metricsChainsGetMetrics.ts
  - src/mcp-server/tools/metricsChainsGetRollingWindowMetrics.ts
  - src/mcp-server/tools/metricsChainsGetTeleporterMetrics.ts
  - src/mcp-server/tools/metricsChainsList.ts
  - src/mcp-server/tools/metricsChainsListBTCbBridgersAboveThreshold.ts
  - src/mcp-server/tools/metricsChainsListNftHolders.ts
  - src/mcp-server/tools/metricsChainsListTokenHoldersAboveThreshold.ts
  - src/mcp-server/tools/metricsHealthCheck.ts
  - src/mcp-server/tools/metricsL1ValidatorsGetMetricsByNodeId.ts
  - src/mcp-server/tools/metricsL1ValidatorsGetMetricsBySubnetId.ts
  - src/mcp-server/tools/metricsL1ValidatorsGetMetricsByValidationId.ts
  - src/mcp-server/tools/metricsL1ValidatorsListMetrics.ts
  - src/mcp-server/tools/metricsNetworksGetStakingMetrics.ts
  - src/mcp-server/tools/metricsSubnetsGetValidators.ts
  - src/models/components/addressdetails.ts
  - src/models/components/chain.ts
  - src/models/components/chainmetric.ts
  - src/models/components/chainrollingwindowmetric.ts
  - src/models/components/chainrollingwindowmetricsvalue.ts
  - src/models/components/globalparamnetwork.ts
  - src/models/components/healthcheckresultdto.ts
  - src/models/components/healthindicatorresultdto.ts
  - src/models/components/index.ts
  - src/models/components/listchainsresponse.ts
  - src/models/components/lookingglassresponse.ts
  - src/models/components/metricsapiresponse.ts
  - src/models/components/metricsvalue.ts
  - src/models/components/network.ts
  - src/models/components/networkmetric.ts
  - src/models/components/networktype.ts
  - src/models/components/nftholdersresponse.ts
  - src/models/components/pchainaddressdetails.ts
  - src/models/components/pchainlookingglassresponse.ts
  - src/models/components/rollingwindowmetricsapiresponse.ts
  - src/models/components/teleporterchainmetricsapiresponse.ts
  - src/models/components/teleportermetric.ts
  - src/models/components/teleportermetricsvalue.ts
  - src/models/components/timeintervalgranularity.ts
  - src/models/errors/avalancheapierror.ts
  - src/models/errors/avalancheerror.ts
  - src/models/errors/badgatewayerror.ts
  - src/models/errors/badrequesterror.ts
  - src/models/errors/forbiddenerror.ts
  - src/models/errors/httpclienterrors.ts
  - src/models/errors/index.ts
  - src/models/errors/internalservererror.ts
  - src/models/errors/notfounderror.ts
  - src/models/errors/responsevalidationerror.ts
  - src/models/errors/sdkvalidationerror.ts
  - src/models/errors/serviceunavailableerror.ts
  - src/models/errors/toomanyrequestserror.ts
  - src/models/errors/unauthorizederror.ts
  - src/models/operations/getaddressesbybalanceovertime.ts
  - src/models/operations/getaddressesbybtcbbridged.ts
  - src/models/operations/getchain.ts
  - src/models/operations/getevmchainmetrics.ts
  - src/models/operations/getevmchainrollingwindowmetrics.ts
  - src/models/operations/getmetricsbynodeid.ts
  - src/models/operations/getmetricsbysubnetid.ts
  - src/models/operations/getmetricsbyvalidationid.ts
  - src/models/operations/getnftholdersbycontractaddress.ts
  - src/models/operations/getstakingmetrics.ts
  - src/models/operations/getteleportermetricsbychain.ts
  - src/models/operations/gettotall1validatormetrics.ts
  - src/models/operations/getvalidatorsbydaterange.ts
  - src/models/operations/index.ts
  - src/models/operations/listchains.ts
  - src/sdk/chains.ts
  - src/sdk/index.ts
  - src/sdk/l1validators.ts
  - src/sdk/metrics.ts
  - src/sdk/networks.ts
  - src/sdk/sdk.ts
  - src/sdk/subnets.ts
  - src/types/async.ts
  - src/types/blobs.ts
  - src/types/constdatetime.ts
  - src/types/enums.ts
  - src/types/fp.ts
  - src/types/index.ts
  - src/types/operations.ts
  - src/types/rfcdate.ts
  - src/types/streams.ts
  - tsconfig.json
examples:
  metrics-health-check:
    speakeasy-default-metrics-health-check:
      responses:
        "200":
          application/json: {"info": {"database": {"status": "up"}}, "error": {}, "details": {"database": {"status": "up"}}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 503, "error": "Service Unavailable"}
  listChains:
    speakeasy-default-list-chains:
      parameters:
        query:
          network: "mainnet"
      responses:
        "200":
          application/json: {"chains": [{"evmChainId": 43114, "chainName": "c_chain", "blockchainId": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5", "subnetId": "11111111111111111111111111111111LpoYY", "network": "mainnet"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value 1>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value 1>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value 1>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value 1>", "<value 2>", "<value 3>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value 1>", "<value 2>", "<value 3>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value 1>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getChain:
    speakeasy-default-get-chain:
      parameters:
        path:
          chainId: "43114"
      responses:
        "200":
          application/json: {"evmChainId": 43114, "chainName": "c_chain", "blockchainId": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5", "subnetId": "11111111111111111111111111111111LpoYY", "network": "testnet"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getEvmChainMetrics:
    speakeasy-default-get-evm-chain-metrics:
      parameters:
        path:
          metric: "activeAddresses"
          chainId: "43114"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          timeInterval: "day"
          pageSize: 10
      responses:
        "200":
          application/json: {"results": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value 1>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getTeleporterMetricsByChain:
    speakeasy-default-get-teleporter-metrics-by-chain:
      parameters:
        path:
          metric: "teleporterSourceTxnCount"
          chainId: "43114"
      responses:
        "200":
          application/json: {"result": {"value": 3068.43}}
        "400":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value 1>", "<value 2>", "<value 3>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value 1>", "<value 2>", "<value 3>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value 1>", "<value 2>", "<value 3>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getEvmChainRollingWindowMetrics:
    speakeasy-default-get-evm-chain-rolling-window-metrics:
      parameters:
        path:
          metric: "txCount"
          chainId: "43114"
      responses:
        "200":
          application/json: {"result": {"lastHour": 7081.1, "lastDay": 2127.7, "lastMonth": 6960.23, "lastYear": 4069.8, "allTime": 1499.54}}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value 1>", "<value 2>", "<value 3>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getNftHoldersByContractAddress:
    speakeasy-default-get-nft-holders-by-contract-address:
      parameters:
        path:
          chainId: "43114"
          address: "0x7a420AEFF902AAa2c85a190D7B91Ce8BEFffFE14"
        query:
          pageSize: 10
      responses:
        "200":
          application/json: {"addresses": [{"address": "0x1234567890abcdef1234567890abcdef123456789", "sortKey": "123"}], "nftCollectionName": ["NFT Project"], "nftSymbol": ["NFTPROJ"], "totalHolders": 10, "totalTokens": 10}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value 1>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getAddressesByBalanceOverTime:
    speakeasy-default-get-addresses-by-balance-over-time:
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
        query:
          threshold: "1000000"
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: 10
      responses:
        "200":
          application/json: {"addresses": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value 1>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getAddressesByBtcbBridged:
    speakeasy-default-get-addresses-by-btcb-bridged:
      parameters:
        query:
          threshold: "1000000"
          pageSize: 10
      responses:
        "200":
          application/json: {"addresses": [{"address": "0x1234567890abcdef1234567890abcdef123456789", "sortKey": "123"}]}
        "400":
          application/json: {"message": ["<value 1>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value 1>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value 1>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getStakingMetrics:
    speakeasy-default-get-staking-metrics:
      parameters:
        path:
          metric: "validatorCount"
          network: "mainnet"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: 10
          subnetId: "11111111111111111111111111111111LpoYY"
      responses:
        "200":
          application/json: {"results": []}
        "400":
          application/json: {"message": ["<value 1>", "<value 2>", "<value 3>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getTotalL1ValidatorMetrics:
    speakeasy-default-get-total-l1-validator-metrics:
      parameters:
        path:
          metric: "totalValidatorFeesDaily"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
      responses:
        "200":
          application/json: {"results": []}
        "400":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value 1>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value 1>"], "statusCode": 503, "error": "Service Unavailable"}
  getMetricsByValidationId:
    speakeasy-default-get-metrics-by-validation-id:
      parameters:
        path:
          l1ValidationId: "2YYCZGHjqnbw1MzQ5fGrTp3SjqUu8y1J1xeW4yuhdXe4LoUVVG"
          metric: "validationFeesDaily"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
      responses:
        "200":
          application/json: {"results": [{"value": 4090.68, "timestamp": 9641.56}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value 1>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value 1>", "<value 2>", "<value 3>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value 1>", "<value 2>", "<value 3>"], "statusCode": 503, "error": "Service Unavailable"}
  getMetricsByNodeId:
    speakeasy-default-get-metrics-by-node-id:
      parameters:
        path:
          metric: "perNodeDailyFeesPaid"
          nodeId: "NodeID-JQPadXEMWtRtJyXrisyDNWuXKSjSf9D36"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
      responses:
        "200":
          application/json: {"results": [{"value": 5895.61, "timestamp": 1664.44}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value 1>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value 1>", "<value 2>", "<value 3>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value 1>"], "statusCode": 503, "error": "Service Unavailable"}
  getMetricsBySubnetId:
    speakeasy-default-get-metrics-by-subnet-id:
      parameters:
        path:
          metric: "perSubnetDailyFeesPaid"
          subnetId: "eYwmVU67LmSfZb1RwqCMhBYkFyG8ftxn6jAwqzFmxC9STBWLC"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
      responses:
        "200":
          application/json: {"results": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value 1>", "<value 2>", "<value 3>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getValidatorsByDateRange:
    speakeasy-default-get-validators-by-date-range:
      parameters:
        path:
          subnetId: "11111111111111111111111111111111LpoYY"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: 10
          network: "mainnet"
      responses:
        "200":
          application/json: {"addresses": [{"addresses": ["avax1abcdef1234567890abcdef1234567890abcdef"], "sortKey": "123"}]}
        "400":
          application/json: {"message": ["<value 1>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value 1>", "<value 2>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value 1>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value 1>", "<value 2>", "<value 3>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value 1>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value 1>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
examplesVersion: 1.0.2
generatedTests: {}
