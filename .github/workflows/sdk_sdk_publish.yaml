name: Release SDK to NPM and Create GitHub Release

on:
  push:
    branches:
      - main
    paths:
      - sdk/RELEASE.md # Trigger only if RELEASE.md changes
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write
  packages: write

jobs:
  release-sdk:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Use your preferred version
          registry-url: "https://registry.npmjs.org/"

      # Step 3: Extract version from RELEASE.md
      - name: Extract version
        id: extract_version
        run: |

          VERSION=$(grep -Eo 'NPM v[0-9]+\.[0-9]+\.[0-9]+' sdk/RELEASE.md | head -1 | sed 's/NPM v//')
          echo "Extracted version from RELEASE.md: $VERSION"

          if [ -z "$VERSION" ]; then
            echo "❌ No version found in RELEASE.md. Exiting..."
            exit 1
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step 4: Extract the latest release body from RELEASE.md
      - name: Extract latest release body
        id: extract_release_body
        run: |
          # Step 1: Extract the most recent release timestamp (without '##' prefix)
          LATEST_TIMESTAMP=$(head -n 1 sdk/RELEASE.md | awk '{print $1 " " $2}' | sed 's/^ *//g' | sed 's/ *$//g' | sed 's/^## //')  # Remove '##'
          echo "LATEST_TIMESTAMP=$LATEST_TIMESTAMP" >> $GITHUB_ENV

          # Debug: Print the latest timestamp to verify it's correct
          echo "Extracted Timestamp: $LATEST_TIMESTAMP"

          # Step 2: Escape any special characters in the timestamp for sed
          ESCAPED_TIMESTAMP=$(echo "$LATEST_TIMESTAMP" | sed 's/[\/&]/\\&/g')  # Escape any characters that sed might misinterpret

          # Step 3: Extract the body of the release using the timestamp
          RELEASE_BODY=$(sed -n "/$ESCAPED_TIMESTAMP/,/---/p" sdk/RELEASE.md)

          # Debug: Print the release body to verify it's correct
          echo "Extracted RELEASE_BODY: $RELEASE_BODY"


          # Store release body in GitHub environment
          {
            echo "RELEASE_BODY<<EOF"
            echo "$RELEASE_BODY"
            echo "EOF"
          } >> $GITHUB_ENV


      # Step 5: Install dependencies and build the SDK
      - name: Install dependencies
        run: |
          cd sdk
          npm install
          npm run build --if-present

      # Step 6: Update version in package.json only if necessary
      - name: Update version in package.json (if necessary)
        run: |
          cd sdk

          # Get the current version from package.json
          CURRENT_VERSION=$(jq -r '.version' package.json)

          # Check if the version needs to be updated
          if [ "$CURRENT_VERSION" != "${{ env.VERSION }}" ]; then
            echo "Updating version from $CURRENT_VERSION to ${{ env.VERSION }}"
            npm version ${{ env.VERSION }} --no-git-tag-version
          else
            echo "Version is already up to date ($CURRENT_VERSION). Skipping npm version update."
          fi

      # Step 7: Create Git tag
      - name: Create Git tag
        run: |
          git tag "sdk/v${{ env.VERSION }}"
          git push origin "sdk/v${{ env.VERSION }}"

      # Step 8: Get the latest release body from the RELEASE.md file
      - name: Get Current UTC Timestamp
        id: get_timestamp
        run: |
          # Get current UTC timestamp in the format YYYY-MM-DD HH:MM:SS
          CURRENT_TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S")
          echo "CURRENT_TIMESTAMP=$CURRENT_TIMESTAMP" >> $GITHUB_ENV

          echo "Release Body: ${{ env.RELEASE_BODY }}"
      
     # Step 9: Create GitHub release with the extracted body 
      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: "sdk/v${{ env.VERSION }}"
          name: "typescript - sdk/v${{ env.VERSION }} - ${{ env.CURRENT_TIMESTAMP }}"
          body: "$(cat release_notes.txt)"
          token: ${{ secrets.GITHUB_TOKEN }}
    
      # Step 10: Publish the SDK to NPM
      - name: Publish to NPM
        run: |
          cd sdk
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}